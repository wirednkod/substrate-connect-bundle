(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@polkadot/keyring'), require('@polkadot/util'), require('@polkadot/types'), require('@polkadot/util-crypto')) :
  typeof define === 'function' && define.amd ? define(['exports', '@polkadot/keyring', '@polkadot/util', '@polkadot/types', '@polkadot/util-crypto'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.polkadotApi = {}, global.polkadotKeyring, global.polkadotUtil, global.polkadotTypes, global.polkadotUtilCrypto));
})(this, (function (exports, keyring, util, types, utilCrypto) { 'use strict';

  const global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : window;

  function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }

  var id = 0;
  function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
  }

  ({
    name: '@polkadot/x-global',
    path: (({ url: (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href)) }) && (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))) ? new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.substring(0, new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '10.1.4'
  });

  function evaluateThis(fn) {
    return fn('return this');
  }
  const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);

  ({
    name: '@polkadot/x-fetch',
    path: (({ url: (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href)) }) && (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))) ? new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.substring(0, new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '10.1.4'
  });

  const fetch = xglobal.fetch;

  function isFunction$1(value) {
    return typeof value === 'function';
  }

  const UNKNOWN = -99999;
  function extend(that, name, value) {
    Object.defineProperty(that, name, {
      configurable: true,
      enumerable: false,
      value
    });
  }
  class RpcError extends Error {
    constructor(message = '', code = UNKNOWN, data) {
      super();
      extend(this, 'message', String(message));
      extend(this, 'name', this.constructor.name);
      extend(this, 'data', data);
      extend(this, 'code', code);
      if (isFunction$1(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        const {
          stack
        } = new Error(message);
        stack && extend(this, 'stack', stack);
      }
    }
    static CODES = {
      ASSERT: -90009,
      INVALID_JSONRPC: -99998,
      METHOD_NOT_FOUND: -32601,
      UNKNOWN
    };
  }

  function formatErrorData(data) {
    if (util.isUndefined(data)) {
      return '';
    }
    const formatted = `: ${util.isString(data) ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '') : util.stringify(data)}`;
    return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}â€¦`;
  }
  function checkError(error) {
    if (error) {
      const {
        code,
        data,
        message
      } = error;
      throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
    }
  }
  class RpcCoder {
    #id = 0;
    decodeResponse(response) {
      if (!response || response.jsonrpc !== '2.0') {
        throw new Error('Invalid jsonrpc field in decoded object');
      }
      const isSubscription = !util.isUndefined(response.params) && !util.isUndefined(response.method);
      if (!util.isNumber(response.id) && (!isSubscription || !util.isNumber(response.params.subscription) && !util.isString(response.params.subscription))) {
        throw new Error('Invalid id field in decoded object');
      }
      checkError(response.error);
      if (response.result === undefined && !isSubscription) {
        throw new Error('No result found in jsonrpc response');
      }
      if (isSubscription) {
        checkError(response.params.error);
        return response.params.result;
      }
      return response.result;
    }
    encodeJson(method, params) {
      const [id, data] = this.encodeObject(method, params);
      return [id, util.stringify(data)];
    }
    encodeObject(method, params) {
      const id = ++this.#id;
      return [id, {
        id,
        jsonrpc: '2.0',
        method,
        params
      }];
    }
  }

  const HTTP_URL = 'http://127.0.0.1:9933';
  const WS_URL = 'ws://127.0.0.1:9944';
  const defaults = {
    HTTP_URL,
    WS_URL
  };

  const DEFAULT_CAPACITY = 128;
  class LRUNode {
    constructor(key) {
      this.key = key;
      this.next = this.prev = this;
    }
  }
  var _data = _classPrivateFieldKey("data");
  var _refs = _classPrivateFieldKey("refs");
  var _length = _classPrivateFieldKey("length");
  var _head = _classPrivateFieldKey("head");
  var _tail = _classPrivateFieldKey("tail");
  var _toHead = _classPrivateFieldKey("toHead");
  class LRUCache {
    constructor(capacity = DEFAULT_CAPACITY) {
      Object.defineProperty(this, _toHead, {
        value: _toHead2
      });
      this.capacity = void 0;
      Object.defineProperty(this, _data, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _refs, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _length, {
        writable: true,
        value: 0
      });
      Object.defineProperty(this, _head, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _tail, {
        writable: true,
        value: void 0
      });
      this.capacity = capacity;
      _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = new LRUNode('<empty>');
    }
    get length() {
      return _classPrivateFieldBase(this, _length)[_length];
    }
    get lengthData() {
      return _classPrivateFieldBase(this, _data)[_data].size;
    }
    get lengthRefs() {
      return _classPrivateFieldBase(this, _refs)[_refs].size;
    }
    entries() {
      const keys = this.keys();
      const entries = new Array(keys.length);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        entries[i] = [key, _classPrivateFieldBase(this, _data)[_data].get(key)];
      }
      return entries;
    }
    keys() {
      const keys = [];
      if (_classPrivateFieldBase(this, _length)[_length]) {
        let curr = _classPrivateFieldBase(this, _head)[_head];
        while (curr !== _classPrivateFieldBase(this, _tail)[_tail]) {
          keys.push(curr.key);
          curr = curr.next;
        }
        keys.push(curr.key);
      }
      return keys;
    }
    get(key) {
      const data = _classPrivateFieldBase(this, _data)[_data].get(key);
      if (data) {
        _classPrivateFieldBase(this, _toHead)[_toHead](key);
        return data;
      }
      return null;
    }
    set(key, value) {
      if (_classPrivateFieldBase(this, _data)[_data].has(key)) {
        _classPrivateFieldBase(this, _toHead)[_toHead](key);
      } else {
        const node = new LRUNode(key);
        _classPrivateFieldBase(this, _refs)[_refs].set(node.key, node);
        if (this.length === 0) {
          _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = node;
        } else {
          _classPrivateFieldBase(this, _head)[_head].prev = node;
          node.next = _classPrivateFieldBase(this, _head)[_head];
          _classPrivateFieldBase(this, _head)[_head] = node;
        }
        if (_classPrivateFieldBase(this, _length)[_length] === this.capacity) {
          _classPrivateFieldBase(this, _data)[_data].delete(_classPrivateFieldBase(this, _tail)[_tail].key);
          _classPrivateFieldBase(this, _refs)[_refs].delete(_classPrivateFieldBase(this, _tail)[_tail].key);
          _classPrivateFieldBase(this, _tail)[_tail] = _classPrivateFieldBase(this, _tail)[_tail].prev;
          _classPrivateFieldBase(this, _tail)[_tail].next = _classPrivateFieldBase(this, _head)[_head];
        } else {
          _classPrivateFieldBase(this, _length)[_length] += 1;
        }
      }
      _classPrivateFieldBase(this, _data)[_data].set(key, value);
    }
  }
  function _toHead2(key) {
    const ref = _classPrivateFieldBase(this, _refs)[_refs].get(key);
    if (ref && ref !== _classPrivateFieldBase(this, _head)[_head]) {
      ref.prev.next = ref.next;
      ref.next.prev = ref.prev;
      ref.next = _classPrivateFieldBase(this, _head)[_head];
      _classPrivateFieldBase(this, _head)[_head].prev = ref;
      _classPrivateFieldBase(this, _head)[_head] = ref;
    }
  }

  const ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';
  const l$7 = util.logger('api-http');
  var _callCache$1 = _classPrivateFieldKey("callCache");
  var _coder$1 = _classPrivateFieldKey("coder");
  var _endpoint = _classPrivateFieldKey("endpoint");
  var _headers$1 = _classPrivateFieldKey("headers");
  var _stats$1 = _classPrivateFieldKey("stats");
  var _send$1 = _classPrivateFieldKey("send");
  class HttpProvider {
    constructor(endpoint = defaults.HTTP_URL, headers = {}) {
      Object.defineProperty(this, _send$1, {
        value: _send2$1
      });
      Object.defineProperty(this, _callCache$1, {
        writable: true,
        value: new LRUCache()
      });
      Object.defineProperty(this, _coder$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpoint, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _headers$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _stats$1, {
        writable: true,
        value: void 0
      });
      if (!/^(https|http):\/\//.test(endpoint)) {
        throw new Error(`Endpoint should start with 'http://' or 'https://', received '${endpoint}'`);
      }
      _classPrivateFieldBase(this, _coder$1)[_coder$1] = new RpcCoder();
      _classPrivateFieldBase(this, _endpoint)[_endpoint] = endpoint;
      _classPrivateFieldBase(this, _headers$1)[_headers$1] = headers;
      _classPrivateFieldBase(this, _stats$1)[_stats$1] = {
        active: {
          requests: 0,
          subscriptions: 0
        },
        total: {
          bytesRecv: 0,
          bytesSent: 0,
          cached: 0,
          errors: 0,
          requests: 0,
          subscriptions: 0,
          timeout: 0
        }
      };
    }
    get hasSubscriptions() {
      return false;
    }
    clone() {
      return new HttpProvider(_classPrivateFieldBase(this, _endpoint)[_endpoint], _classPrivateFieldBase(this, _headers$1)[_headers$1]);
    }
    async connect() {
    }
    async disconnect() {
    }
    get stats() {
      return _classPrivateFieldBase(this, _stats$1)[_stats$1];
    }
    get isConnected() {
      return true;
    }
    on(type, sub) {
      l$7.error('HTTP Provider does not have \'on\' emitters, use WebSockets instead');
      return () => {
      };
    }
    async send(method, params, isCacheable) {
      _classPrivateFieldBase(this, _stats$1)[_stats$1].total.requests++;
      const [, body] = _classPrivateFieldBase(this, _coder$1)[_coder$1].encodeJson(method, params);
      let resultPromise = isCacheable ? _classPrivateFieldBase(this, _callCache$1)[_callCache$1].get(body) : null;
      if (!resultPromise) {
        resultPromise = _classPrivateFieldBase(this, _send$1)[_send$1](body);
        if (isCacheable) {
          _classPrivateFieldBase(this, _callCache$1)[_callCache$1].set(body, resultPromise);
        }
      } else {
        _classPrivateFieldBase(this, _stats$1)[_stats$1].total.cached++;
      }
      return resultPromise;
    }
    async subscribe(types, method, params, cb) {
      l$7.error(ERROR_SUBSCRIBE);
      throw new Error(ERROR_SUBSCRIBE);
    }
    async unsubscribe(type, method, id) {
      l$7.error(ERROR_SUBSCRIBE);
      throw new Error(ERROR_SUBSCRIBE);
    }
  }
  async function _send2$1(body) {
    _classPrivateFieldBase(this, _stats$1)[_stats$1].active.requests++;
    _classPrivateFieldBase(this, _stats$1)[_stats$1].total.bytesSent += body.length;
    try {
      const response = await fetch(_classPrivateFieldBase(this, _endpoint)[_endpoint], {
        body,
        headers: {
          Accept: 'application/json',
          'Content-Length': `${body.length}`,
          'Content-Type': 'application/json',
          ..._classPrivateFieldBase(this, _headers$1)[_headers$1]
        },
        method: 'POST'
      });
      if (!response.ok) {
        throw new Error(`[${response.status}]: ${response.statusText}`);
      }
      const result = await response.text();
      _classPrivateFieldBase(this, _stats$1)[_stats$1].total.bytesRecv += result.length;
      const decoded = _classPrivateFieldBase(this, _coder$1)[_coder$1].decodeResponse(JSON.parse(result));
      _classPrivateFieldBase(this, _stats$1)[_stats$1].active.requests--;
      return decoded;
    } catch (e) {
      _classPrivateFieldBase(this, _stats$1)[_stats$1].active.requests--;
      _classPrivateFieldBase(this, _stats$1)[_stats$1].total.errors++;
      throw e;
    }
  }

  var eventemitter3 = {exports: {}};

  (function (module) {
  	var has = Object.prototype.hasOwnProperty
  	  , prefix = '~';
  	function Events() {}
  	if (Object.create) {
  	  Events.prototype = Object.create(null);
  	  if (!new Events().__proto__) prefix = false;
  	}
  	function EE(fn, context, once) {
  	  this.fn = fn;
  	  this.context = context;
  	  this.once = once || false;
  	}
  	function addListener(emitter, event, fn, context, once) {
  	  if (typeof fn !== 'function') {
  	    throw new TypeError('The listener must be a function');
  	  }
  	  var listener = new EE(fn, context || emitter, once)
  	    , evt = prefix ? prefix + event : event;
  	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  	  else emitter._events[evt] = [emitter._events[evt], listener];
  	  return emitter;
  	}
  	function clearEvent(emitter, evt) {
  	  if (--emitter._eventsCount === 0) emitter._events = new Events();
  	  else delete emitter._events[evt];
  	}
  	function EventEmitter() {
  	  this._events = new Events();
  	  this._eventsCount = 0;
  	}
  	EventEmitter.prototype.eventNames = function eventNames() {
  	  var names = []
  	    , events
  	    , name;
  	  if (this._eventsCount === 0) return names;
  	  for (name in (events = this._events)) {
  	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  	  }
  	  if (Object.getOwnPropertySymbols) {
  	    return names.concat(Object.getOwnPropertySymbols(events));
  	  }
  	  return names;
  	};
  	EventEmitter.prototype.listeners = function listeners(event) {
  	  var evt = prefix ? prefix + event : event
  	    , handlers = this._events[evt];
  	  if (!handlers) return [];
  	  if (handlers.fn) return [handlers.fn];
  	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
  	    ee[i] = handlers[i].fn;
  	  }
  	  return ee;
  	};
  	EventEmitter.prototype.listenerCount = function listenerCount(event) {
  	  var evt = prefix ? prefix + event : event
  	    , listeners = this._events[evt];
  	  if (!listeners) return 0;
  	  if (listeners.fn) return 1;
  	  return listeners.length;
  	};
  	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  	  var evt = prefix ? prefix + event : event;
  	  if (!this._events[evt]) return false;
  	  var listeners = this._events[evt]
  	    , len = arguments.length
  	    , args
  	    , i;
  	  if (listeners.fn) {
  	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
  	    switch (len) {
  	      case 1: return listeners.fn.call(listeners.context), true;
  	      case 2: return listeners.fn.call(listeners.context, a1), true;
  	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
  	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
  	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
  	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
  	    }
  	    for (i = 1, args = new Array(len -1); i < len; i++) {
  	      args[i - 1] = arguments[i];
  	    }
  	    listeners.fn.apply(listeners.context, args);
  	  } else {
  	    var length = listeners.length
  	      , j;
  	    for (i = 0; i < length; i++) {
  	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
  	      switch (len) {
  	        case 1: listeners[i].fn.call(listeners[i].context); break;
  	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
  	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
  	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
  	        default:
  	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
  	            args[j - 1] = arguments[j];
  	          }
  	          listeners[i].fn.apply(listeners[i].context, args);
  	      }
  	    }
  	  }
  	  return true;
  	};
  	EventEmitter.prototype.on = function on(event, fn, context) {
  	  return addListener(this, event, fn, context, false);
  	};
  	EventEmitter.prototype.once = function once(event, fn, context) {
  	  return addListener(this, event, fn, context, true);
  	};
  	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  	  var evt = prefix ? prefix + event : event;
  	  if (!this._events[evt]) return this;
  	  if (!fn) {
  	    clearEvent(this, evt);
  	    return this;
  	  }
  	  var listeners = this._events[evt];
  	  if (listeners.fn) {
  	    if (
  	      listeners.fn === fn &&
  	      (!once || listeners.once) &&
  	      (!context || listeners.context === context)
  	    ) {
  	      clearEvent(this, evt);
  	    }
  	  } else {
  	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
  	      if (
  	        listeners[i].fn !== fn ||
  	        (once && !listeners[i].once) ||
  	        (context && listeners[i].context !== context)
  	      ) {
  	        events.push(listeners[i]);
  	      }
  	    }
  	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
  	    else clearEvent(this, evt);
  	  }
  	  return this;
  	};
  	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  	  var evt;
  	  if (event) {
  	    evt = prefix ? prefix + event : event;
  	    if (this._events[evt]) clearEvent(this, evt);
  	  } else {
  	    this._events = new Events();
  	    this._eventsCount = 0;
  	  }
  	  return this;
  	};
  	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  	EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  	EventEmitter.prefixed = prefix;
  	EventEmitter.EventEmitter = EventEmitter;
  	{
  	  module.exports = EventEmitter;
  	}
  } (eventemitter3));
  const EventEmitter = eventemitter3.exports;

  ({
    name: '@polkadot/x-ws',
    path: (({ url: (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href)) }) && (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))) ? new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.substring(0, new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '10.1.4'
  });

  const WebSocket$1 = xglobal.WebSocket;

  const known = {
    1000: 'Normal Closure',
    1001: 'Going Away',
    1002: 'Protocol Error',
    1003: 'Unsupported Data',
    1004: '(For future)',
    1005: 'No Status Received',
    1006: 'Abnormal Closure',
    1007: 'Invalid frame payload data',
    1008: 'Policy Violation',
    1009: 'Message too big',
    1010: 'Missing Extension',
    1011: 'Internal Error',
    1012: 'Service Restart',
    1013: 'Try Again Later',
    1014: 'Bad Gateway',
    1015: 'TLS Handshake'
  };
  function getUnmapped(code) {
    if (code <= 1999) {
      return '(For WebSocket standard)';
    } else if (code <= 2999) {
      return '(For WebSocket extensions)';
    } else if (code <= 3999) {
      return '(For libraries and frameworks)';
    } else if (code <= 4999) {
      return '(For applications)';
    }
  }
  function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
      return '(Unused)';
    }
    return known[code] || getUnmapped(code) || '(Unknown)';
  }

  const ALIASES = {
    chain_finalisedHead: 'chain_finalizedHead',
    chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
    chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
  };
  const RETRY_DELAY = 2500;
  const DEFAULT_TIMEOUT_MS = 60 * 1000;
  const TIMEOUT_INTERVAL = 5000;
  const MEGABYTE = 1024 * 1024;
  const l$6 = util.logger('api-ws');
  function eraseRecord(record, cb) {
    Object.keys(record).forEach(key => {
      if (cb) {
        cb(record[key]);
      }
      delete record[key];
    });
  }
  var _callCache = _classPrivateFieldKey("callCache");
  var _coder = _classPrivateFieldKey("coder");
  var _endpoints = _classPrivateFieldKey("endpoints");
  var _headers = _classPrivateFieldKey("headers");
  var _eventemitter = _classPrivateFieldKey("eventemitter");
  var _handlers = _classPrivateFieldKey("handlers");
  var _isReadyPromise = _classPrivateFieldKey("isReadyPromise");
  var _stats = _classPrivateFieldKey("stats");
  var _waitingForId = _classPrivateFieldKey("waitingForId");
  var _autoConnectMs = _classPrivateFieldKey("autoConnectMs");
  var _endpointIndex = _classPrivateFieldKey("endpointIndex");
  var _isConnected = _classPrivateFieldKey("isConnected");
  var _subscriptions = _classPrivateFieldKey("subscriptions");
  var _timeoutId = _classPrivateFieldKey("timeoutId");
  var _websocket = _classPrivateFieldKey("websocket");
  var _timeout = _classPrivateFieldKey("timeout");
  var _send = _classPrivateFieldKey("send");
  var _emit = _classPrivateFieldKey("emit");
  var _onSocketClose = _classPrivateFieldKey("onSocketClose");
  var _onSocketError = _classPrivateFieldKey("onSocketError");
  var _onSocketMessage = _classPrivateFieldKey("onSocketMessage");
  var _onSocketMessageResult = _classPrivateFieldKey("onSocketMessageResult");
  var _onSocketMessageSubscribe = _classPrivateFieldKey("onSocketMessageSubscribe");
  var _onSocketOpen = _classPrivateFieldKey("onSocketOpen");
  var _resubscribe = _classPrivateFieldKey("resubscribe");
  var _timeoutHandlers = _classPrivateFieldKey("timeoutHandlers");
  class WsProvider {
    constructor(endpoint = defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
      Object.defineProperty(this, _send, {
        value: _send2
      });
      Object.defineProperty(this, _callCache, {
        writable: true,
        value: new LRUCache()
      });
      Object.defineProperty(this, _coder, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpoints, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _headers, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _eventemitter, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _handlers, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _isReadyPromise, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _stats, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _waitingForId, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _autoConnectMs, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpointIndex, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isConnected, {
        writable: true,
        value: false
      });
      Object.defineProperty(this, _subscriptions, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _timeoutId, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _websocket, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _timeout, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _emit, {
        writable: true,
        value: (type, ...args) => {
          _classPrivateFieldBase(this, _eventemitter)[_eventemitter].emit(type, ...args);
        }
      });
      Object.defineProperty(this, _onSocketClose, {
        writable: true,
        value: event => {
          const error = new Error(`disconnected from ${_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
          if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
            l$6.error(error.message);
          }
          _classPrivateFieldBase(this, _isConnected)[_isConnected] = false;
          if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
            _classPrivateFieldBase(this, _websocket)[_websocket].onclose = null;
            _classPrivateFieldBase(this, _websocket)[_websocket].onerror = null;
            _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = null;
            _classPrivateFieldBase(this, _websocket)[_websocket].onopen = null;
            _classPrivateFieldBase(this, _websocket)[_websocket] = null;
          }
          if (_classPrivateFieldBase(this, _timeoutId)[_timeoutId]) {
            clearInterval(_classPrivateFieldBase(this, _timeoutId)[_timeoutId]);
            _classPrivateFieldBase(this, _timeoutId)[_timeoutId] = null;
          }
          _classPrivateFieldBase(this, _emit)[_emit]('disconnected');
          eraseRecord(_classPrivateFieldBase(this, _handlers)[_handlers], h => {
            try {
              h.callback(error, undefined);
            } catch (err) {
              l$6.error(err);
            }
          });
          eraseRecord(_classPrivateFieldBase(this, _waitingForId)[_waitingForId]);
          if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
            setTimeout(() => {
              this.connectWithRetry().catch(() => {
              });
            }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
          }
        }
      });
      Object.defineProperty(this, _onSocketError, {
        writable: true,
        value: error => {
          l$6.debug(() => ['socket error', error]);
          _classPrivateFieldBase(this, _emit)[_emit]('error', error);
        }
      });
      Object.defineProperty(this, _onSocketMessage, {
        writable: true,
        value: message => {
          l$6.debug(() => ['received', message.data]);
          _classPrivateFieldBase(this, _stats)[_stats].total.bytesRecv += message.data.length;
          const response = JSON.parse(message.data);
          return util.isUndefined(response.method) ? _classPrivateFieldBase(this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
        }
      });
      Object.defineProperty(this, _onSocketMessageResult, {
        writable: true,
        value: response => {
          const handler = _classPrivateFieldBase(this, _handlers)[_handlers][response.id];
          if (!handler) {
            l$6.debug(() => `Unable to find handler for id=${response.id}`);
            return;
          }
          try {
            const {
              method,
              params,
              subscription
            } = handler;
            const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response);
            handler.callback(null, result);
            if (subscription) {
              const subId = `${subscription.type}::${result}`;
              _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subId] = util.objectSpread({}, subscription, {
                method,
                params
              });
              if (_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]) {
                _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]);
              }
            }
          } catch (error) {
            _classPrivateFieldBase(this, _stats)[_stats].total.errors++;
            handler.callback(error, undefined);
          }
          delete _classPrivateFieldBase(this, _handlers)[_handlers][response.id];
        }
      });
      Object.defineProperty(this, _onSocketMessageSubscribe, {
        writable: true,
        value: response => {
          const method = ALIASES[response.method] || response.method || 'invalid';
          const subId = `${method}::${response.params.subscription}`;
          const handler = _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subId];
          if (!handler) {
            _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId] = response;
            l$6.debug(() => `Unable to find handler for subscription=${subId}`);
            return;
          }
          delete _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId];
          try {
            const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response);
            handler.callback(null, result);
          } catch (error) {
            _classPrivateFieldBase(this, _stats)[_stats].total.errors++;
            handler.callback(error, undefined);
          }
        }
      });
      Object.defineProperty(this, _onSocketOpen, {
        writable: true,
        value: () => {
          if (_classPrivateFieldBase(this, _websocket)[_websocket] === null) {
            throw new Error('WebSocket cannot be null in onOpen');
          }
          l$6.debug(() => ['connected to', _classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]]);
          _classPrivateFieldBase(this, _isConnected)[_isConnected] = true;
          _classPrivateFieldBase(this, _emit)[_emit]('connected');
          _classPrivateFieldBase(this, _resubscribe)[_resubscribe]();
          return true;
        }
      });
      Object.defineProperty(this, _resubscribe, {
        writable: true,
        value: () => {
          const subscriptions = _classPrivateFieldBase(this, _subscriptions)[_subscriptions];
          _classPrivateFieldBase(this, _subscriptions)[_subscriptions] = {};
          Promise.all(Object.keys(subscriptions).map(async id => {
            const {
              callback,
              method,
              params,
              type
            } = subscriptions[id];
            if (type.startsWith('author_')) {
              return;
            }
            try {
              await this.subscribe(type, method, params, callback);
            } catch (error) {
              l$6.error(error);
            }
          })).catch(l$6.error);
        }
      });
      Object.defineProperty(this, _timeoutHandlers, {
        writable: true,
        value: () => {
          const now = Date.now();
          const ids = Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]);
          for (let i = 0; i < ids.length; i++) {
            const handler = _classPrivateFieldBase(this, _handlers)[_handlers][ids[i]];
            if (now - handler.start > _classPrivateFieldBase(this, _timeout)[_timeout]) {
              try {
                handler.callback(new Error(`No response received from RPC endpoint in ${_classPrivateFieldBase(this, _timeout)[_timeout] / 1000}s`), undefined);
              } catch {
              }
              _classPrivateFieldBase(this, _stats)[_stats].total.timeout++;
              delete _classPrivateFieldBase(this, _handlers)[_handlers][ids[i]];
            }
          }
        }
      });
      const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
      if (endpoints.length === 0) {
        throw new Error('WsProvider requires at least one Endpoint');
      }
      endpoints.forEach(endpoint => {
        if (!/^(wss|ws):\/\//.test(endpoint)) {
          throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
        }
      });
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter] = new EventEmitter();
      _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
      _classPrivateFieldBase(this, _coder)[_coder] = new RpcCoder();
      _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = -1;
      _classPrivateFieldBase(this, _endpoints)[_endpoints] = endpoints;
      _classPrivateFieldBase(this, _headers)[_headers] = headers;
      _classPrivateFieldBase(this, _websocket)[_websocket] = null;
      _classPrivateFieldBase(this, _stats)[_stats] = {
        active: {
          requests: 0,
          subscriptions: 0
        },
        total: {
          bytesRecv: 0,
          bytesSent: 0,
          cached: 0,
          errors: 0,
          requests: 0,
          subscriptions: 0,
          timeout: 0
        }
      };
      _classPrivateFieldBase(this, _timeout)[_timeout] = timeout || DEFAULT_TIMEOUT_MS;
      if (autoConnectMs > 0) {
        this.connectWithRetry().catch(() => {
        });
      }
      _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
        _classPrivateFieldBase(this, _eventemitter)[_eventemitter].once('connected', () => {
          resolve(this);
        });
      });
    }
    get hasSubscriptions() {
      return true;
    }
    get isConnected() {
      return _classPrivateFieldBase(this, _isConnected)[_isConnected];
    }
    get isReady() {
      return _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise];
    }
    clone() {
      return new WsProvider(_classPrivateFieldBase(this, _endpoints)[_endpoints]);
    }
    async connect() {
      try {
        _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldBase(this, _endpoints)[_endpoints].length;
        _classPrivateFieldBase(this, _websocket)[_websocket] = typeof xglobal.WebSocket !== 'undefined' && util.isChildClass(xglobal.WebSocket, WebSocket$1) ? new WebSocket$1(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]])
        : new WebSocket$1(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]], undefined, undefined, _classPrivateFieldBase(this, _headers)[_headers], undefined, {
          fragmentOutgoingMessages: true,
          fragmentationThreshold: 1 * MEGABYTE,
          maxReceivedFrameSize: 24 * MEGABYTE,
          maxReceivedMessageSize: 24 * MEGABYTE
        });
        if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
          _classPrivateFieldBase(this, _websocket)[_websocket].onclose = _classPrivateFieldBase(this, _onSocketClose)[_onSocketClose];
          _classPrivateFieldBase(this, _websocket)[_websocket].onerror = _classPrivateFieldBase(this, _onSocketError)[_onSocketError];
          _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = _classPrivateFieldBase(this, _onSocketMessage)[_onSocketMessage];
          _classPrivateFieldBase(this, _websocket)[_websocket].onopen = _classPrivateFieldBase(this, _onSocketOpen)[_onSocketOpen];
        }
        _classPrivateFieldBase(this, _timeoutId)[_timeoutId] = setInterval(() => _classPrivateFieldBase(this, _timeoutHandlers)[_timeoutHandlers](), TIMEOUT_INTERVAL);
      } catch (error) {
        l$6.error(error);
        _classPrivateFieldBase(this, _emit)[_emit]('error', error);
        throw error;
      }
    }
    async connectWithRetry() {
      if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
        try {
          await this.connect();
        } catch (error) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {
            });
          }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
        }
      }
    }
    async disconnect() {
      _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = 0;
      try {
        if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
          _classPrivateFieldBase(this, _websocket)[_websocket].close(1000);
        }
      } catch (error) {
        l$6.error(error);
        _classPrivateFieldBase(this, _emit)[_emit]('error', error);
        throw error;
      }
    }
    get stats() {
      return {
        active: {
          requests: Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]).length,
          subscriptions: Object.keys(_classPrivateFieldBase(this, _subscriptions)[_subscriptions]).length
        },
        total: _classPrivateFieldBase(this, _stats)[_stats].total
      };
    }
    on(type, sub) {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].on(type, sub);
      return () => {
        _classPrivateFieldBase(this, _eventemitter)[_eventemitter].removeListener(type, sub);
      };
    }
    send(method, params, isCacheable, subscription) {
      _classPrivateFieldBase(this, _stats)[_stats].total.requests++;
      const [id, body] = _classPrivateFieldBase(this, _coder)[_coder].encodeJson(method, params);
      let resultPromise = isCacheable ? _classPrivateFieldBase(this, _callCache)[_callCache].get(body) : null;
      if (!resultPromise) {
        resultPromise = _classPrivateFieldBase(this, _send)[_send](id, body, method, params, subscription);
        if (isCacheable) {
          _classPrivateFieldBase(this, _callCache)[_callCache].set(body, resultPromise);
        }
      } else {
        _classPrivateFieldBase(this, _stats)[_stats].total.cached++;
      }
      return resultPromise;
    }
    subscribe(type, method, params, callback) {
      _classPrivateFieldBase(this, _stats)[_stats].total.subscriptions++;
      return this.send(method, params, false, {
        callback,
        type
      });
    }
    async unsubscribe(type, method, id) {
      const subscription = `${type}::${id}`;
      if (util.isUndefined(_classPrivateFieldBase(this, _subscriptions)[_subscriptions][subscription])) {
        l$6.debug(() => `Unable to find active subscription=${subscription}`);
        return false;
      }
      delete _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subscription];
      try {
        return this.isConnected && !util.isNull(_classPrivateFieldBase(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;
      } catch (error) {
        return false;
      }
    }
  }
  async function _send2(id, body, method, params, subscription) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.isConnected || _classPrivateFieldBase(this, _websocket)[_websocket] === null) {
          throw new Error('WebSocket is not connected');
        }
        const callback = (error, result) => {
          error ? reject(error) : resolve(result);
        };
        l$6.debug(() => ['calling', method, body]);
        _classPrivateFieldBase(this, _handlers)[_handlers][id] = {
          callback,
          method,
          params,
          start: Date.now(),
          subscription
        };
        _classPrivateFieldBase(this, _stats)[_stats].total.bytesSent += body.length;
        _classPrivateFieldBase(this, _websocket)[_websocket].send(body);
      } catch (error) {
        _classPrivateFieldBase(this, _stats)[_stats].total.errors++;
        reject(error);
      }
    });
  }

  var WellKnownChain;
  (function (WellKnownChain) {
      WellKnownChain["polkadot"] = "polkadot";
      WellKnownChain["ksmcc3"] = "ksmcc3";
      WellKnownChain["rococo_v2_2"] = "rococo_v2_2";
      WellKnownChain["westend2"] = "westend2";
  })(WellKnownChain || (WellKnownChain = {}));

  async function getSpec(chain) {
      if (chain.indexOf("..") !== -1)
          throw new Error("Invalid chain name");
      try {
          const specRaw = (await Promise.resolve().then(function () { return polkadot$1; }));
          return typeof specRaw === "string"
              ? specRaw
              : specRaw.default;
      }
      catch (error) {
          throw new Error("Invalid chain name");
      }
  }

  class AlreadyDestroyedError$1 extends Error {
      constructor() {
          super();
          this.name = "AlreadyDestroyedError";
      }
  }
  class CrashError$1 extends Error {
      constructor(message) {
          super(message);
          this.name = "CrashError";
      }
  }
  class JsonRpcDisabledError$1 extends Error {
      constructor() {
          super();
          this.name = "JsonRpcDisabledError";
      }
  }

  let startPromise = null;
  const getStart = () => {
      if (startPromise)
          return startPromise;
      startPromise = Promise.resolve().then(function () { return indexBrowser; }).then((sm) => sm.start);
      return startPromise;
  };
  const clientReferences = [];
  let clientPromise = null;
  let clientReferencesMaxLogLevel = 3;
  const getClientAndIncRef = (config) => {
      if (config.maxLogLevel && config.maxLogLevel > clientReferencesMaxLogLevel)
          clientReferencesMaxLogLevel = config.maxLogLevel;
      if (clientPromise) {
          clientReferences.push(config);
          if (clientPromise instanceof Promise)
              return clientPromise;
          else
              return Promise.resolve(clientPromise);
      }
      const newClientPromise = getStart().then((start) => start({
          forbidTcp: true,
          forbidNonLocalWs: true,
          maxLogLevel: 9999999,
          cpuRateLimit: 0.5,
          logCallback: (level, target, message) => {
              if (level > clientReferencesMaxLogLevel)
                  return;
              if (level <= 1) {
                  console.error("[%s] %s", target, message);
              }
              else if (level === 2) {
                  console.warn("[%s] %s", target, message);
              }
              else if (level === 3) {
                  console.info("[%s] %s", target, message);
              }
              else if (level === 4) {
                  console.debug("[%s] %s", target, message);
              }
              else {
                  console.trace("[%s] %s", target, message);
              }
          },
      }));
      clientPromise = newClientPromise;
      newClientPromise.then((client) => {
          if (clientPromise === newClientPromise)
              clientPromise = client;
          else
              client.terminate();
          return client;
      });
      clientReferences.push(config);
      return clientPromise;
  };
  const decRef = (config) => {
      const idx = clientReferences.indexOf(config);
      if (idx === -1)
          throw new Error("Internal error within smoldot-light");
      clientReferences.splice(idx, 1);
      clientReferencesMaxLogLevel = 3;
      for (const cfg of clientReferences.values()) {
          if (cfg.maxLogLevel && cfg.maxLogLevel > clientReferencesMaxLogLevel)
              clientReferencesMaxLogLevel = cfg.maxLogLevel;
      }
      if (clientReferences.length === 0) {
          if (clientPromise && !(clientPromise instanceof Promise))
              clientPromise.terminate();
          clientPromise = null;
      }
  };
  const transformErrors = (thunk) => {
      try {
          thunk();
      }
      catch (e) {
          const error = e;
          if ((error === null || error === void 0 ? void 0 : error.name) === "JsonRpcDisabledError")
              throw new JsonRpcDisabledError$1();
          if ((error === null || error === void 0 ? void 0 : error.name) === "CrashError")
              throw new CrashError$1(error.message);
          if ((error === null || error === void 0 ? void 0 : error.name) === "AlreadyDestroyedError")
              throw new AlreadyDestroyedError$1();
          throw new CrashError$1(e instanceof Error ? e.message : `Unexpected error ${e}`);
      }
  };
  const createScClient$2 = (config) => {
      const configOrDefault = config || { maxLogLevel: 3 };
      const chains = new Map();
      const addChain = async (chainSpec, jsonRpcCallback) => {
          const client = await getClientAndIncRef(configOrDefault);
          try {
              const internalChain = await client.addChain({
                  chainSpec,
                  potentialRelayChains: [...chains.values()],
                  jsonRpcCallback,
              });
              const chain = {
                  sendJsonRpc: (rpc) => {
                      transformErrors(() => {
                          internalChain.sendJsonRpc(rpc);
                      });
                  },
                  remove: () => {
                      try {
                          transformErrors(() => {
                              internalChain.remove();
                          });
                      }
                      finally {
                          chains.delete(chain);
                          decRef(configOrDefault);
                      }
                  },
              };
              chains.set(chain, internalChain);
              return chain;
          }
          catch (error) {
              decRef(configOrDefault);
              throw error;
          }
      };
      const addWellKnownChain = async (supposedChain, jsonRpcCallback) => {
          getClientAndIncRef(configOrDefault);
          try {
              const spec = await getSpec(supposedChain);
              return await addChain(spec, jsonRpcCallback);
          }
          finally {
              decRef(configOrDefault);
          }
      };
      return { addChain, addWellKnownChain };
  };

  const listeners = new Map();
  if (typeof window === "object") {
      window.addEventListener("message", ({ data }) => {
          var _a;
          if ((data === null || data === void 0 ? void 0 : data.origin) !== "substrate-connect-extension")
              return;
          (_a = listeners.get(data.chainId)) === null || _a === void 0 ? void 0 : _a(data);
      });
  }
  function getRandomChainId() {
      const arr = new BigUint64Array(2);
      crypto.getRandomValues(arr);
      const result = (arr[1] << BigInt(64)) | arr[0];
      return result.toString(36);
  }
  const createScClient$1 = () => {
      const chains = new Map();
      const internalAddChain = async (isWellKnown, chainSpecOrWellKnownName, jsonRpcCallback, potentialRelayChainIds = []) => {
          let resolve;
          const initFinished = new Promise((res) => {
              resolve = () => res(null);
          });
          const chainState = {
              id: getRandomChainId(),
              state: {
                  state: "pending",
                  waitFinished: resolve,
              },
          };
          if (listeners.has(chainState.id))
              throw new Error("Unexpectedly randomly generated the same chain ID twice despite 64bits of entropy");
          listeners.set(chainState.id, (msg) => {
              switch (chainState.state.state) {
                  case "pending": {
                      const waitFinished = chainState.state.waitFinished;
                      switch (msg.type) {
                          case "chain-ready": {
                              chainState.state = {
                                  state: "ok",
                              };
                              break;
                          }
                          case "error": {
                              chainState.state = {
                                  state: "dead",
                                  error: new CrashError$1("Error while creating the chain: " + msg.errorMessage),
                              };
                              break;
                          }
                          default: {
                              console.warn("Unexpected message of type `msg.type` received from substrate-connect extension");
                          }
                      }
                      waitFinished();
                      break;
                  }
                  case "ok": {
                      switch (msg.type) {
                          case "error": {
                              chainState.state = {
                                  state: "dead",
                                  error: new CrashError$1("Extension has killed the chain: " + msg.errorMessage),
                              };
                              break;
                          }
                          case "rpc": {
                              if (jsonRpcCallback) {
                                  jsonRpcCallback(msg.jsonRpcMessage);
                              }
                              else {
                                  console.warn("Unexpected message of type `msg.type` received from substrate-connect extension");
                              }
                              break;
                          }
                          default: {
                              console.warn("Unexpected message of type `msg.type` received from substrate-connect extension");
                          }
                      }
                      break;
                  }
              }
          });
          if (isWellKnown) {
              postToExtension({
                  origin: "substrate-connect-client",
                  chainId: chainState.id,
                  type: "add-well-known-chain",
                  chainName: chainSpecOrWellKnownName,
              });
          }
          else {
              postToExtension({
                  origin: "substrate-connect-client",
                  chainId: chainState.id,
                  type: "add-chain",
                  chainSpec: chainSpecOrWellKnownName,
                  potentialRelayChainIds,
              });
          }
          await initFinished;
          if (isWellKnown && chainState.state.state === "dead") {
              let resolve;
              const initFinished = new Promise((res) => {
                  resolve = () => res(null);
              });
              chainState.state = {
                  state: "pending",
                  waitFinished: resolve,
              };
              postToExtension({
                  origin: "substrate-connect-client",
                  chainId: chainState.id,
                  type: "add-chain",
                  chainSpec: await getSpec(chainSpecOrWellKnownName),
                  potentialRelayChainIds: [],
              });
              await initFinished;
          }
          if (chainState.state.state === "dead") {
              throw chainState.state.error;
          }
          const chain = {
              sendJsonRpc: (jsonRpcMessage) => {
                  if (chainState.state.state === "dead") {
                      throw chainState.state.error;
                  }
                  if (!jsonRpcCallback)
                      throw new JsonRpcDisabledError$1();
                  postToExtension({
                      origin: "substrate-connect-client",
                      chainId: chainState.id,
                      type: "rpc",
                      jsonRpcMessage,
                  });
              },
              remove: () => {
                  if (chainState.state.state === "dead") {
                      throw chainState.state.error;
                  }
                  chainState.state = {
                      state: "dead",
                      error: new AlreadyDestroyedError$1(),
                  };
                  listeners.delete(chainState.id);
                  chains.delete(chain);
                  postToExtension({
                      origin: "substrate-connect-client",
                      chainId: chainState.id,
                      type: "remove-chain",
                  });
              },
          };
          chains.set(chain, chainState.id);
          return chain;
      };
      return {
          addChain: (chainSpec, jsonRpcCallback) => internalAddChain(false, chainSpec, jsonRpcCallback, [...chains.values()]),
          addWellKnownChain: (name, jsonRpcCallback) => internalAddChain(true, name, jsonRpcCallback),
      };
  };
  function postToExtension(msg) {
      window.postMessage(msg, "*");
  }

  const DOM_ELEMENT_ID = "substrateConnectExtensionAvailable";

  const isExtensionPresent = typeof document === "object" &&
      typeof document.getElementById === "function" &&
      !!document.getElementById(DOM_ELEMENT_ID);
  function createScClient(config) {
      const forceEmbedded = config === null || config === void 0 ? void 0 : config.forceEmbeddedNode;
      if (!forceEmbedded && isExtensionPresent)
          return createScClient$1();
      return createScClient$2(config === null || config === void 0 ? void 0 : config.embeddedNodeConfig);
  }

  function healthChecker() {
    let checker = null;
    let sendJsonRpc = null;
    return {
      responsePassThrough: jsonRpcResponse => {
        if (checker === null) {
          return jsonRpcResponse;
        }
        return checker.responsePassThrough(jsonRpcResponse);
      },
      sendJsonRpc: request => {
        if (!sendJsonRpc) {
          throw new Error('setSendJsonRpc must be called before sending requests');
        }
        if (checker === null) {
          sendJsonRpc(request);
        } else {
          checker.sendJsonRpc(request);
        }
      },
      setSendJsonRpc: cb => {
        sendJsonRpc = cb;
      },
      start: healthCallback => {
        if (checker !== null) {
          throw new Error("Can't start the health checker multiple times in parallel");
        } else if (!sendJsonRpc) {
          throw new Error('setSendJsonRpc must be called before starting the health checks');
        }
        checker = new InnerChecker(healthCallback, sendJsonRpc);
        checker.update(true);
      },
      stop: () => {
        if (checker === null) {
          return;
        }
        checker.destroy();
        checker = null;
      }
    };
  }
  class InnerChecker {
    #healthCallback;
    #currentHealthCheckId = null;
    #currentHealthTimeout = null;
    #currentSubunsubRequestId = null;
    #currentSubscriptionId = null;
    #requestToSmoldot;
    #isSyncing = false;
    #nextRequestId = 0;
    constructor(healthCallback, requestToSmoldot) {
      this.#healthCallback = healthCallback;
      this.#requestToSmoldot = requestToSmoldot;
    }
    sendJsonRpc = request => {
      let parsedRequest;
      try {
        parsedRequest = JSON.parse(request);
      } catch (err) {
        return;
      }
      if (parsedRequest.id) {
        const newId = 'extern:' + JSON.stringify(parsedRequest.id);
        parsedRequest.id = newId;
      }
      this.#requestToSmoldot(JSON.stringify(parsedRequest));
    };
    responsePassThrough = jsonRpcResponse => {
      let parsedResponse;
      try {
        parsedResponse = JSON.parse(jsonRpcResponse);
      } catch (err) {
        return jsonRpcResponse;
      }
      if (parsedResponse.id && this.#currentHealthCheckId === parsedResponse.id) {
        this.#currentHealthCheckId = null;
        if (!parsedResponse.result) {
          this.update(false);
          return null;
        }
        this.#healthCallback(parsedResponse.result);
        this.#isSyncing = parsedResponse.result.isSyncing;
        this.update(false);
        return null;
      }
      if (parsedResponse.id && this.#currentSubunsubRequestId === parsedResponse.id) {
        this.#currentSubunsubRequestId = null;
        if (!parsedResponse.result) {
          this.update(false);
          return null;
        }
        if (this.#currentSubscriptionId) {
          this.#currentSubscriptionId = null;
        } else {
          this.#currentSubscriptionId = parsedResponse.result;
        }
        this.update(false);
        return null;
      }
      if (parsedResponse.params && this.#currentSubscriptionId && parsedResponse.params.subscription === this.#currentSubscriptionId) {
        this.update(true);
        return null;
      }
      if (parsedResponse.id) {
        const id = parsedResponse.id;
        if (!id.startsWith('extern:')) {
          throw new Error('State inconsistency in health checker');
        }
        const newId = JSON.parse(id.slice('extern:'.length));
        parsedResponse.id = newId;
      }
      return JSON.stringify(parsedResponse);
    };
    update = startNow => {
      if (startNow && this.#currentHealthTimeout) {
        clearTimeout(this.#currentHealthTimeout);
        this.#currentHealthTimeout = null;
      }
      if (!this.#currentHealthTimeout) {
        const startHealthRequest = () => {
          this.#currentHealthTimeout = null;
          if (this.#currentHealthCheckId) {
            return;
          }
          this.#currentHealthCheckId = 'health-checker:'.concat(this.#nextRequestId.toString());
          this.#nextRequestId += 1;
          this.#requestToSmoldot(JSON.stringify({
            id: this.#currentHealthCheckId,
            jsonrpc: '2.0',
            method: 'system_health',
            params: []
          }));
        };
        if (startNow) {
          startHealthRequest();
        } else {
          this.#currentHealthTimeout = setTimeout(startHealthRequest, 1000);
        }
      }
      if (this.#isSyncing && !this.#currentSubscriptionId && !this.#currentSubunsubRequestId) {
        this.startSubscription();
      }
      if (!this.#isSyncing && this.#currentSubscriptionId && !this.#currentSubunsubRequestId) {
        this.endSubscription();
      }
    };
    startSubscription = () => {
      if (this.#currentSubunsubRequestId || this.#currentSubscriptionId) {
        throw new Error('Internal error in health checker');
      }
      this.#currentSubunsubRequestId = 'health-checker:'.concat(this.#nextRequestId.toString());
      this.#nextRequestId += 1;
      this.#requestToSmoldot(JSON.stringify({
        id: this.#currentSubunsubRequestId,
        jsonrpc: '2.0',
        method: 'chain_subscribeNewHeads',
        params: []
      }));
    };
    endSubscription = () => {
      if (this.#currentSubunsubRequestId || !this.#currentSubscriptionId) {
        throw new Error('Internal error in health checker');
      }
      this.#currentSubunsubRequestId = 'health-checker:'.concat(this.#nextRequestId.toString());
      this.#nextRequestId += 1;
      this.#requestToSmoldot(JSON.stringify({
        id: this.#currentSubunsubRequestId,
        jsonrpc: '2.0',
        method: 'chain_unsubscribeNewHeads',
        params: [this.#currentSubscriptionId]
      }));
    };
    destroy = () => {
      if (this.#currentHealthTimeout) {
        clearTimeout(this.#currentHealthTimeout);
        this.#currentHealthTimeout = null;
      }
    };
  }

  const subscriptionUnsubscriptionMethods = new Map([['author_submitAndWatchExtrinsic', 'author_unwatchExtrinsic'], ['chain_subscribeAllHeads', 'chain_unsubscribeAllHeads'], ['chain_subscribeFinalizedHeads', 'chain_unsubscribeFinalizedHeads'], ['chain_subscribeFinalisedHeads', 'chain_subscribeFinalisedHeads'], ['chain_subscribeNewHeads', 'chain_unsubscribeNewHeads'], ['chain_subscribeNewHead', 'chain_unsubscribeNewHead'], ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'], ['subscribe_newHead', 'unsubscribe_newHead'], ['state_subscribeRuntimeVersion', 'state_unsubscribeRuntimeVersion'], ['state_subscribeStorage', 'state_unsubscribeStorage']]);
  const wellKnownChains = new Set(Object.values(WellKnownChain));
  const scClients = new WeakMap();
  class ScProvider {
    #coder = new RpcCoder();
    #spec;
    #sharedSandbox;
    #subscriptions = new Map();
    #requests = new Map();
    #eventemitter = new EventEmitter();
    #chain = null;
    #isChainReady = false;
    static WellKnownChain = WellKnownChain;
    constructor(spec, sharedSandbox) {
      this.#spec = spec;
      this.#sharedSandbox = sharedSandbox;
    }
    get hasSubscriptions() {
      return true;
    }
    get isConnected() {
      return !!this.#chain && this.#isChainReady;
    }
    clone() {
      throw new Error('clone() is not supported.');
    }
    async connect(config, checkerFactory = healthChecker) {
      if (this.isConnected) {
        throw new Error('Already connected!');
      }
      if (this.#chain) {
        await this.#chain;
        return;
      }
      if (this.#sharedSandbox && !this.#sharedSandbox.isConnected) {
        await this.#sharedSandbox.connect();
      }
      const client = this.#sharedSandbox ? scClients.get(this.#sharedSandbox) : createScClient(config);
      if (!client) {
        throw new Error('Unkown ScProvider!');
      }
      scClients.set(this, client);
      const hc = checkerFactory();
      const onResponse = res => {
        var _response$params, _this$subscriptions$g;
        const hcRes = hc.responsePassThrough(res);
        if (!hcRes) {
          return;
        }
        const response = JSON.parse(hcRes);
        let decodedResponse;
        try {
          decodedResponse = this.#coder.decodeResponse(response);
        } catch (e) {
          decodedResponse = e;
        }
        if (((_response$params = response.params) === null || _response$params === void 0 ? void 0 : _response$params.subscription) === undefined || !response.method) {
          var _this$requests$get;
          return (_this$requests$get = this.#requests.get(response.id)) === null || _this$requests$get === void 0 ? void 0 : _this$requests$get(decodedResponse);
        }
        const subscriptionId = `${response.method}::${response.params.subscription}`;
        const callback = (_this$subscriptions$g = this.#subscriptions.get(subscriptionId)) === null || _this$subscriptions$g === void 0 ? void 0 : _this$subscriptions$g[0];
        callback === null || callback === void 0 ? void 0 : callback(decodedResponse);
      };
      const addChain = wellKnownChains.has(this.#spec) ? client.addWellKnownChain : client.addChain;
      this.#chain = addChain(this.#spec, onResponse).then(chain => {
        hc.setSendJsonRpc(chain.sendJsonRpc);
        this.#isChainReady = false;
        const cleanup = () => {
          const disconnectionError = new Error('Disconnected');
          this.#requests.forEach(cb => cb(disconnectionError));
          this.#subscriptions.forEach(([cb]) => cb(disconnectionError));
          this.#subscriptions.clear();
        };
        const staleSubscriptions = [];
        const killStaleSubscriptions = () => {
          if (staleSubscriptions.length === 0) {
            return;
          }
          const stale = staleSubscriptions.pop();
          if (!stale) {
            throw new Error('Unable to get stale subscription');
          }
          const {
            id,
            unsubscribeMethod
          } = stale;
          Promise.race([this.send(unsubscribeMethod, [id]).catch(() => undefined), new Promise(resolve => setTimeout(resolve, 500))]).then(killStaleSubscriptions).catch(() => undefined);
        };
        hc.start(health => {
          const isReady = !health.isSyncing && (health.peers > 0 || !health.shouldHavePeers);
          if (this.#isChainReady === isReady) {
            return;
          }
          this.#isChainReady = isReady;
          if (!isReady) {
            [...this.#subscriptions.values()].forEach(s => {
              staleSubscriptions.push(s[1]);
            });
            cleanup();
          } else {
            killStaleSubscriptions();
          }
          this.#eventemitter.emit(isReady ? 'connected' : 'disconnected');
        });
        return util.objectSpread({}, chain, {
          remove: () => {
            hc.stop();
            chain.remove();
            cleanup();
          },
          sendJsonRpc: hc.sendJsonRpc.bind(hc)
        });
      });
      try {
        await this.#chain;
      } catch (e) {
        this.#chain = null;
        this.#eventemitter.emit('error', e);
        throw e;
      }
    }
    async disconnect() {
      if (!this.#chain) {
        return;
      }
      const chain = await this.#chain;
      this.#chain = null;
      this.#isChainReady = false;
      try {
        chain.remove();
      } catch (_) {}
      this.#eventemitter.emit('disconnected');
    }
    on(type, sub) {
      if (type === 'connected' && this.isConnected) {
        sub();
      }
      this.#eventemitter.on(type, sub);
      return () => {
        this.#eventemitter.removeListener(type, sub);
      };
    }
    async send(method, params) {
      if (!this.isConnected || !this.#chain) {
        throw new Error('Provider is not connected');
      }
      const chain = await this.#chain;
      const [id, json] = this.#coder.encodeJson(method, params);
      const result = new Promise((resolve, reject) => {
        this.#requests.set(id, response => {
          (util.isError(response) ? reject : resolve)(response);
        });
        try {
          chain.sendJsonRpc(json);
        } catch (e) {
          this.#chain = null;
          try {
            chain.remove();
          } catch (_) {}
          this.#eventemitter.emit('error', e);
        }
      });
      try {
        return await result;
      } finally {
        this.#requests.delete(id);
      }
    }
    async subscribe(type, method, params, callback) {
      if (!subscriptionUnsubscriptionMethods.has(method)) {
        throw new Error(`Unsupported subscribe method: ${method}`);
      }
      const id = await this.send(method, params);
      const subscriptionId = `${type}::${id}`;
      const cb = response => {
        if (response instanceof Error) {
          callback(response, undefined);
        } else {
          callback(null, response);
        }
      };
      const unsubscribeMethod = subscriptionUnsubscriptionMethods.get(method);
      if (!unsubscribeMethod) {
        throw new Error('Invalid unsubscribe method found');
      }
      this.#subscriptions.set(subscriptionId, [cb, {
        id,
        unsubscribeMethod
      }]);
      return id;
    }
    unsubscribe(type, method, id) {
      if (!this.isConnected) {
        throw new Error('Provider is not connected');
      }
      const subscriptionId = `${type}::${id}`;
      if (!this.#subscriptions.has(subscriptionId)) {
        return Promise.reject(new Error(`Unable to find active subscription=${subscriptionId}`));
      }
      this.#subscriptions.delete(subscriptionId);
      return this.send(method, [id]);
    }
  }

  const packageInfo = {
    name: '@polkadot/api',
    path: (({ url: (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href)) }) && (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))) ? new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.substring(0, new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.2.3-1-x'
  };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };
  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __awaiter$3(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }
  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }
  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }
  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
  }
  function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
  }

  function isFunction(value) {
      return typeof value === 'function';
  }

  function createErrorClass(createImpl) {
      var _super = function (instance) {
          Error.call(instance);
          instance.stack = new Error().stack;
      };
      var ctorFunc = createImpl(_super);
      ctorFunc.prototype = Object.create(Error.prototype);
      ctorFunc.prototype.constructor = ctorFunc;
      return ctorFunc;
  }

  var UnsubscriptionError = createErrorClass(function (_super) {
      return function UnsubscriptionErrorImpl(errors) {
          _super(this);
          this.message = errors
              ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
              : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
      };
  });

  function arrRemove(arr, item) {
      if (arr) {
          var index = arr.indexOf(item);
          0 <= index && arr.splice(index, 1);
      }
  }

  var Subscription = (function () {
      function Subscription(initialTeardown) {
          this.initialTeardown = initialTeardown;
          this.closed = false;
          this._parentage = null;
          this._finalizers = null;
      }
      Subscription.prototype.unsubscribe = function () {
          var e_1, _a, e_2, _b;
          var errors;
          if (!this.closed) {
              this.closed = true;
              var _parentage = this._parentage;
              if (_parentage) {
                  this._parentage = null;
                  if (Array.isArray(_parentage)) {
                      try {
                          for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                              var parent_1 = _parentage_1_1.value;
                              parent_1.remove(this);
                          }
                      }
                      catch (e_1_1) { e_1 = { error: e_1_1 }; }
                      finally {
                          try {
                              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                          }
                          finally { if (e_1) throw e_1.error; }
                      }
                  }
                  else {
                      _parentage.remove(this);
                  }
              }
              var initialFinalizer = this.initialTeardown;
              if (isFunction(initialFinalizer)) {
                  try {
                      initialFinalizer();
                  }
                  catch (e) {
                      errors = e instanceof UnsubscriptionError ? e.errors : [e];
                  }
              }
              var _finalizers = this._finalizers;
              if (_finalizers) {
                  this._finalizers = null;
                  try {
                      for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                          var finalizer = _finalizers_1_1.value;
                          try {
                              execFinalizer(finalizer);
                          }
                          catch (err) {
                              errors = errors !== null && errors !== void 0 ? errors : [];
                              if (err instanceof UnsubscriptionError) {
                                  errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                              }
                              else {
                                  errors.push(err);
                              }
                          }
                      }
                  }
                  catch (e_2_1) { e_2 = { error: e_2_1 }; }
                  finally {
                      try {
                          if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                      }
                      finally { if (e_2) throw e_2.error; }
                  }
              }
              if (errors) {
                  throw new UnsubscriptionError(errors);
              }
          }
      };
      Subscription.prototype.add = function (teardown) {
          var _a;
          if (teardown && teardown !== this) {
              if (this.closed) {
                  execFinalizer(teardown);
              }
              else {
                  if (teardown instanceof Subscription) {
                      if (teardown.closed || teardown._hasParent(this)) {
                          return;
                      }
                      teardown._addParent(this);
                  }
                  (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
              }
          }
      };
      Subscription.prototype._hasParent = function (parent) {
          var _parentage = this._parentage;
          return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
      };
      Subscription.prototype._addParent = function (parent) {
          var _parentage = this._parentage;
          this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription.prototype._removeParent = function (parent) {
          var _parentage = this._parentage;
          if (_parentage === parent) {
              this._parentage = null;
          }
          else if (Array.isArray(_parentage)) {
              arrRemove(_parentage, parent);
          }
      };
      Subscription.prototype.remove = function (teardown) {
          var _finalizers = this._finalizers;
          _finalizers && arrRemove(_finalizers, teardown);
          if (teardown instanceof Subscription) {
              teardown._removeParent(this);
          }
      };
      Subscription.EMPTY = (function () {
          var empty = new Subscription();
          empty.closed = true;
          return empty;
      })();
      return Subscription;
  }());
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
      return (value instanceof Subscription ||
          (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
  }
  function execFinalizer(finalizer) {
      if (isFunction(finalizer)) {
          finalizer();
      }
      else {
          finalizer.unsubscribe();
      }
  }

  var config = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: undefined,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false,
  };

  var timeoutProvider = {
      setTimeout: function (handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
          }
          return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearTimeout: function (handle) {
          return (clearTimeout)(handle);
      },
      delegate: undefined,
  };

  function reportUnhandledError(err) {
      timeoutProvider.setTimeout(function () {
          {
              throw err;
          }
      });
  }

  function noop() { }

  function errorContext(cb) {
      {
          cb();
      }
  }

  var Subscriber = (function (_super) {
      __extends(Subscriber, _super);
      function Subscriber(destination) {
          var _this = _super.call(this) || this;
          _this.isStopped = false;
          if (destination) {
              _this.destination = destination;
              if (isSubscription(destination)) {
                  destination.add(_this);
              }
          }
          else {
              _this.destination = EMPTY_OBSERVER;
          }
          return _this;
      }
      Subscriber.create = function (next, error, complete) {
          return new SafeSubscriber(next, error, complete);
      };
      Subscriber.prototype.next = function (value) {
          if (this.isStopped) ;
          else {
              this._next(value);
          }
      };
      Subscriber.prototype.error = function (err) {
          if (this.isStopped) ;
          else {
              this.isStopped = true;
              this._error(err);
          }
      };
      Subscriber.prototype.complete = function () {
          if (this.isStopped) ;
          else {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (!this.closed) {
              this.isStopped = true;
              _super.prototype.unsubscribe.call(this);
              this.destination = null;
          }
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          try {
              this.destination.error(err);
          }
          finally {
              this.unsubscribe();
          }
      };
      Subscriber.prototype._complete = function () {
          try {
              this.destination.complete();
          }
          finally {
              this.unsubscribe();
          }
      };
      return Subscriber;
  }(Subscription));
  var _bind = Function.prototype.bind;
  function bind(fn, thisArg) {
      return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = (function () {
      function ConsumerObserver(partialObserver) {
          this.partialObserver = partialObserver;
      }
      ConsumerObserver.prototype.next = function (value) {
          var partialObserver = this.partialObserver;
          if (partialObserver.next) {
              try {
                  partialObserver.next(value);
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
      };
      ConsumerObserver.prototype.error = function (err) {
          var partialObserver = this.partialObserver;
          if (partialObserver.error) {
              try {
                  partialObserver.error(err);
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
          else {
              handleUnhandledError(err);
          }
      };
      ConsumerObserver.prototype.complete = function () {
          var partialObserver = this.partialObserver;
          if (partialObserver.complete) {
              try {
                  partialObserver.complete();
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
      };
      return ConsumerObserver;
  }());
  var SafeSubscriber = (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          var partialObserver;
          if (isFunction(observerOrNext) || !observerOrNext) {
              partialObserver = {
                  next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                  error: error !== null && error !== void 0 ? error : undefined,
                  complete: complete !== null && complete !== void 0 ? complete : undefined,
              };
          }
          else {
              var context_1;
              if (_this && config.useDeprecatedNextContext) {
                  context_1 = Object.create(observerOrNext);
                  context_1.unsubscribe = function () { return _this.unsubscribe(); };
                  partialObserver = {
                      next: observerOrNext.next && bind(observerOrNext.next, context_1),
                      error: observerOrNext.error && bind(observerOrNext.error, context_1),
                      complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                  };
              }
              else {
                  partialObserver = observerOrNext;
              }
          }
          _this.destination = new ConsumerObserver(partialObserver);
          return _this;
      }
      return SafeSubscriber;
  }(Subscriber));
  function handleUnhandledError(error) {
      {
          reportUnhandledError(error);
      }
  }
  function defaultErrorHandler(err) {
      throw err;
  }
  var EMPTY_OBSERVER = {
      closed: true,
      next: noop,
      error: defaultErrorHandler,
      complete: noop,
  };

  var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

  function identity$2(x) {
      return x;
  }

  function pipeFromArray(fns) {
      if (fns.length === 0) {
          return identity$2;
      }
      if (fns.length === 1) {
          return fns[0];
      }
      return function piped(input) {
          return fns.reduce(function (prev, fn) { return fn(prev); }, input);
      };
  }

  var Observable = (function () {
      function Observable(subscribe) {
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      Observable.prototype.lift = function (operator) {
          var observable = new Observable();
          observable.source = this;
          observable.operator = operator;
          return observable;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var _this = this;
          var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
          errorContext(function () {
              var _a = _this, operator = _a.operator, source = _a.source;
              subscriber.add(operator
                  ?
                      operator.call(subscriber, source)
                  : source
                      ?
                          _this._subscribe(subscriber)
                      :
                          _this._trySubscribe(subscriber));
          });
          return subscriber;
      };
      Observable.prototype._trySubscribe = function (sink) {
          try {
              return this._subscribe(sink);
          }
          catch (err) {
              sink.error(err);
          }
      };
      Observable.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var subscriber = new SafeSubscriber({
                  next: function (value) {
                      try {
                          next(value);
                      }
                      catch (err) {
                          reject(err);
                          subscriber.unsubscribe();
                      }
                  },
                  error: reject,
                  complete: resolve,
              });
              _this.subscribe(subscriber);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          var _a;
          return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      };
      Observable.prototype[observable] = function () {
          return this;
      };
      Observable.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
          }
          return pipeFromArray(operations)(this);
      };
      Observable.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
          });
      };
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  function getPromiseCtor(promiseCtor) {
      var _a;
      return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
      return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
      return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
  }

  function hasLift(source) {
      return isFunction(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init) {
      return function (source) {
          if (hasLift(source)) {
              return source.lift(function (liftedSource) {
                  try {
                      return init(liftedSource, this);
                  }
                  catch (err) {
                      this.error(err);
                  }
              });
          }
          throw new TypeError('Unable to lift unknown Observable type');
      };
  }

  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
      return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber = (function (_super) {
      __extends(OperatorSubscriber, _super);
      function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
          var _this = _super.call(this, destination) || this;
          _this.onFinalize = onFinalize;
          _this.shouldUnsubscribe = shouldUnsubscribe;
          _this._next = onNext
              ? function (value) {
                  try {
                      onNext(value);
                  }
                  catch (err) {
                      destination.error(err);
                  }
              }
              : _super.prototype._next;
          _this._error = onError
              ? function (err) {
                  try {
                      onError(err);
                  }
                  catch (err) {
                      destination.error(err);
                  }
                  finally {
                      this.unsubscribe();
                  }
              }
              : _super.prototype._error;
          _this._complete = onComplete
              ? function () {
                  try {
                      onComplete();
                  }
                  catch (err) {
                      destination.error(err);
                  }
                  finally {
                      this.unsubscribe();
                  }
              }
              : _super.prototype._complete;
          return _this;
      }
      OperatorSubscriber.prototype.unsubscribe = function () {
          var _a;
          if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
              var closed_1 = this.closed;
              _super.prototype.unsubscribe.call(this);
              !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
          }
      };
      return OperatorSubscriber;
  }(Subscriber));

  function refCount() {
      return operate(function (source, subscriber) {
          var connection = null;
          source._refCount++;
          var refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
              if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                  connection = null;
                  return;
              }
              var sharedConnection = source._connection;
              var conn = connection;
              connection = null;
              if (sharedConnection && (!conn || sharedConnection === conn)) {
                  sharedConnection.unsubscribe();
              }
              subscriber.unsubscribe();
          });
          source.subscribe(refCounter);
          if (!refCounter.closed) {
              connection = source.connect();
          }
      });
  }

  var ConnectableObservable = (function (_super) {
      __extends(ConnectableObservable, _super);
      function ConnectableObservable(source, subjectFactory) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subjectFactory = subjectFactory;
          _this._subject = null;
          _this._refCount = 0;
          _this._connection = null;
          if (hasLift(source)) {
              _this.lift = source.lift;
          }
          return _this;
      }
      ConnectableObservable.prototype._subscribe = function (subscriber) {
          return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable.prototype.getSubject = function () {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
          }
          return this._subject;
      };
      ConnectableObservable.prototype._teardown = function () {
          this._refCount = 0;
          var _connection = this._connection;
          this._subject = this._connection = null;
          _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      };
      ConnectableObservable.prototype.connect = function () {
          var _this = this;
          var connection = this._connection;
          if (!connection) {
              connection = this._connection = new Subscription();
              var subject_1 = this.getSubject();
              connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {
                  _this._teardown();
                  subject_1.complete();
              }, function (err) {
                  _this._teardown();
                  subject_1.error(err);
              }, function () { return _this._teardown(); })));
              if (connection.closed) {
                  this._connection = null;
                  connection = Subscription.EMPTY;
              }
          }
          return connection;
      };
      ConnectableObservable.prototype.refCount = function () {
          return refCount()(this);
      };
      return ConnectableObservable;
  }(Observable));

  var performanceTimestampProvider = {
      now: function () {
          return (performanceTimestampProvider.delegate || performance).now();
      },
      delegate: undefined,
  };

  var animationFrameProvider = {
      schedule: function (callback) {
          var request = requestAnimationFrame;
          var cancel = cancelAnimationFrame;
          var handle = request(function (timestamp) {
              cancel = undefined;
              callback(timestamp);
          });
          return new Subscription(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
      },
      requestAnimationFrame: function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          var delegate = animationFrameProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      cancelAnimationFrame: function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          return (cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      delegate: undefined,
  };

  function animationFramesFactory(timestampProvider) {
      var schedule = animationFrameProvider.schedule;
      return new Observable(function (subscriber) {
          var subscription = new Subscription();
          var provider = timestampProvider || performanceTimestampProvider;
          var start = provider.now();
          var run = function (timestamp) {
              var now = provider.now();
              subscriber.next({
                  timestamp: timestampProvider ? now : timestamp,
                  elapsed: now - start,
              });
              if (!subscriber.closed) {
                  subscription.add(schedule(run));
              }
          };
          subscription.add(schedule(run));
          return subscription;
      });
  }
  animationFramesFactory();

  var ObjectUnsubscribedError = createErrorClass(function (_super) {
      return function ObjectUnsubscribedErrorImpl() {
          _super(this);
          this.name = 'ObjectUnsubscribedError';
          this.message = 'object unsubscribed';
      };
  });

  var Subject = (function (_super) {
      __extends(Subject, _super);
      function Subject() {
          var _this = _super.call(this) || this;
          _this.closed = false;
          _this.currentObservers = null;
          _this.observers = [];
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
      }
      Subject.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
      };
      Subject.prototype._throwIfClosed = function () {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
      };
      Subject.prototype.next = function (value) {
          var _this = this;
          errorContext(function () {
              var e_1, _a;
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  if (!_this.currentObservers) {
                      _this.currentObservers = Array.from(_this.observers);
                  }
                  try {
                      for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var observer = _c.value;
                          observer.next(value);
                      }
                  }
                  catch (e_1_1) { e_1 = { error: e_1_1 }; }
                  finally {
                      try {
                          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                      }
                      finally { if (e_1) throw e_1.error; }
                  }
              }
          });
      };
      Subject.prototype.error = function (err) {
          var _this = this;
          errorContext(function () {
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  _this.hasError = _this.isStopped = true;
                  _this.thrownError = err;
                  var observers = _this.observers;
                  while (observers.length) {
                      observers.shift().error(err);
                  }
              }
          });
      };
      Subject.prototype.complete = function () {
          var _this = this;
          errorContext(function () {
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  _this.isStopped = true;
                  var observers = _this.observers;
                  while (observers.length) {
                      observers.shift().complete();
                  }
              }
          });
      };
      Subject.prototype.unsubscribe = function () {
          this.isStopped = this.closed = true;
          this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject.prototype, "observed", {
          get: function () {
              var _a;
              return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
          },
          enumerable: false,
          configurable: true
      });
      Subject.prototype._trySubscribe = function (subscriber) {
          this._throwIfClosed();
          return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject.prototype._subscribe = function (subscriber) {
          this._throwIfClosed();
          this._checkFinalizedStatuses(subscriber);
          return this._innerSubscribe(subscriber);
      };
      Subject.prototype._innerSubscribe = function (subscriber) {
          var _this = this;
          var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
          if (hasError || isStopped) {
              return EMPTY_SUBSCRIPTION;
          }
          this.currentObservers = null;
          observers.push(subscriber);
          return new Subscription(function () {
              _this.currentObservers = null;
              arrRemove(observers, subscriber);
          });
      };
      Subject.prototype._checkFinalizedStatuses = function (subscriber) {
          var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
          if (hasError) {
              subscriber.error(thrownError);
          }
          else if (isStopped) {
              subscriber.complete();
          }
      };
      Subject.prototype.asObservable = function () {
          var observable = new Observable();
          observable.source = this;
          return observable;
      };
      Subject.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
      };
      return Subject;
  }(Observable));
  var AnonymousSubject = (function (_super) {
      __extends(AnonymousSubject, _super);
      function AnonymousSubject(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
      }
      AnonymousSubject.prototype.next = function (value) {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      };
      AnonymousSubject.prototype.error = function (err) {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      };
      AnonymousSubject.prototype.complete = function () {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      };
      AnonymousSubject.prototype._subscribe = function (subscriber) {
          var _a, _b;
          return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject;
  }(Subject));

  var BehaviorSubject = (function (_super) {
      __extends(BehaviorSubject, _super);
      function BehaviorSubject(_value) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          return _this;
      }
      Object.defineProperty(BehaviorSubject.prototype, "value", {
          get: function () {
              return this.getValue();
          },
          enumerable: false,
          configurable: true
      });
      BehaviorSubject.prototype._subscribe = function (subscriber) {
          var subscription = _super.prototype._subscribe.call(this, subscriber);
          !subscription.closed && subscriber.next(this._value);
          return subscription;
      };
      BehaviorSubject.prototype.getValue = function () {
          var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
          if (hasError) {
              throw thrownError;
          }
          this._throwIfClosed();
          return _value;
      };
      BehaviorSubject.prototype.next = function (value) {
          _super.prototype.next.call(this, (this._value = value));
      };
      return BehaviorSubject;
  }(Subject));

  var dateTimestampProvider = {
      now: function () {
          return (dateTimestampProvider.delegate || Date).now();
      },
      delegate: undefined,
  };

  var ReplaySubject = (function (_super) {
      __extends(ReplaySubject, _super);
      function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
          if (_bufferSize === void 0) { _bufferSize = Infinity; }
          if (_windowTime === void 0) { _windowTime = Infinity; }
          if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
          var _this = _super.call(this) || this;
          _this._bufferSize = _bufferSize;
          _this._windowTime = _windowTime;
          _this._timestampProvider = _timestampProvider;
          _this._buffer = [];
          _this._infiniteTimeWindow = true;
          _this._infiniteTimeWindow = _windowTime === Infinity;
          _this._bufferSize = Math.max(1, _bufferSize);
          _this._windowTime = Math.max(1, _windowTime);
          return _this;
      }
      ReplaySubject.prototype.next = function (value) {
          var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
          if (!isStopped) {
              _buffer.push(value);
              !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
          }
          this._trimBuffer();
          _super.prototype.next.call(this, value);
      };
      ReplaySubject.prototype._subscribe = function (subscriber) {
          this._throwIfClosed();
          this._trimBuffer();
          var subscription = this._innerSubscribe(subscriber);
          var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
          var copy = _buffer.slice();
          for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
              subscriber.next(copy[i]);
          }
          this._checkFinalizedStatuses(subscriber);
          return subscription;
      };
      ReplaySubject.prototype._trimBuffer = function () {
          var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
          var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
          _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
          if (!_infiniteTimeWindow) {
              var now = _timestampProvider.now();
              var last = 0;
              for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                  last = i;
              }
              last && _buffer.splice(0, last + 1);
          }
      };
      return ReplaySubject;
  }(Subject));

  ((function (_super) {
      __extends(AsyncSubject, _super);
      function AsyncSubject() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this._value = null;
          _this._hasValue = false;
          _this._isComplete = false;
          return _this;
      }
      AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
          var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
          if (hasError) {
              subscriber.error(thrownError);
          }
          else if (isStopped || _isComplete) {
              _hasValue && subscriber.next(_value);
              subscriber.complete();
          }
      };
      AsyncSubject.prototype.next = function (value) {
          if (!this.isStopped) {
              this._value = value;
              this._hasValue = true;
          }
      };
      AsyncSubject.prototype.complete = function () {
          var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
          if (!_isComplete) {
              this._isComplete = true;
              _hasValue && _super.prototype.next.call(this, _value);
              _super.prototype.complete.call(this);
          }
      };
      return AsyncSubject;
  })(Subject));

  var Action = (function (_super) {
      __extends(Action, _super);
      function Action(scheduler, work) {
          return _super.call(this) || this;
      }
      Action.prototype.schedule = function (state, delay) {
          return this;
      };
      return Action;
  }(Subscription));

  var intervalProvider = {
      setInterval: function (handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
          }
          return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearInterval: function (handle) {
          return (clearInterval)(handle);
      },
      delegate: undefined,
  };

  var AsyncAction = (function (_super) {
      __extends(AsyncAction, _super);
      function AsyncAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
      }
      AsyncAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) { delay = 0; }
          if (this.closed) {
              return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
          }
          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
      };
      AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
          if (delay === void 0) { delay = 0; }
          return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay != null && this.delay === delay && this.pending === false) {
              return id;
          }
          intervalProvider.clearInterval(id);
          return undefined;
      };
      AsyncAction.prototype.execute = function (state, delay) {
          if (this.closed) {
              return new Error('executing a cancelled action');
          }
          this.pending = false;
          var error = this._execute(state, delay);
          if (error) {
              return error;
          }
          else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
      };
      AsyncAction.prototype._execute = function (state, _delay) {
          var errored = false;
          var errorValue;
          try {
              this.work(state);
          }
          catch (e) {
              errored = true;
              errorValue = e ? e : new Error('Scheduled action threw falsy error');
          }
          if (errored) {
              this.unsubscribe();
              return errorValue;
          }
      };
      AsyncAction.prototype.unsubscribe = function () {
          if (!this.closed) {
              var _a = this, id = _a.id, scheduler = _a.scheduler;
              var actions = scheduler.actions;
              this.work = this.state = this.scheduler = null;
              this.pending = false;
              arrRemove(actions, this);
              if (id != null) {
                  this.id = this.recycleAsyncId(scheduler, id, null);
              }
              this.delay = null;
              _super.prototype.unsubscribe.call(this);
          }
      };
      return AsyncAction;
  }(Action));

  var nextHandle = 1;
  var resolved;
  var activeHandles = {};
  function findAndClearHandle(handle) {
      if (handle in activeHandles) {
          delete activeHandles[handle];
          return true;
      }
      return false;
  }
  var Immediate = {
      setImmediate: function (cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          if (!resolved) {
              resolved = Promise.resolve();
          }
          resolved.then(function () { return findAndClearHandle(handle) && cb(); });
          return handle;
      },
      clearImmediate: function (handle) {
          findAndClearHandle(handle);
      },
  };

  var setImmediate$1 = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
  var immediateProvider = {
      setImmediate: function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          var delegate = immediateProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$1).apply(void 0, __spreadArray([], __read(args)));
      },
      clearImmediate: function (handle) {
          return (clearImmediate)(handle);
      },
      delegate: undefined,
  };

  var AsapAction = (function (_super) {
      __extends(AsapAction, _super);
      function AsapAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
      };
      AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (!scheduler.actions.some(function (action) { return action.id === id; })) {
              immediateProvider.clearImmediate(id);
              scheduler._scheduled = undefined;
          }
          return undefined;
      };
      return AsapAction;
  }(AsyncAction));

  var Scheduler = (function () {
      function Scheduler(schedulerActionCtor, now) {
          if (now === void 0) { now = Scheduler.now; }
          this.schedulerActionCtor = schedulerActionCtor;
          this.now = now;
      }
      Scheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) { delay = 0; }
          return new this.schedulerActionCtor(this, work).schedule(state, delay);
      };
      Scheduler.now = dateTimestampProvider.now;
      return Scheduler;
  }());

  var AsyncScheduler = (function (_super) {
      __extends(AsyncScheduler, _super);
      function AsyncScheduler(SchedulerAction, now) {
          if (now === void 0) { now = Scheduler.now; }
          var _this = _super.call(this, SchedulerAction, now) || this;
          _this.actions = [];
          _this._active = false;
          _this._scheduled = undefined;
          return _this;
      }
      AsyncScheduler.prototype.flush = function (action) {
          var actions = this.actions;
          if (this._active) {
              actions.push(action);
              return;
          }
          var error;
          this._active = true;
          do {
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          } while ((action = actions.shift()));
          this._active = false;
          if (error) {
              while ((action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsyncScheduler;
  }(Scheduler));

  var AsapScheduler = (function (_super) {
      __extends(AsapScheduler, _super);
      function AsapScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler.prototype.flush = function (action) {
          this._active = true;
          var flushId = this._scheduled;
          this._scheduled = undefined;
          var actions = this.actions;
          var error;
          action = action || actions.shift();
          do {
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          } while ((action = actions[0]) && action.id === flushId && actions.shift());
          this._active = false;
          if (error) {
              while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsapScheduler;
  }(AsyncScheduler));

  var asapScheduler = new AsapScheduler(AsapAction);

  new AsyncScheduler(AsyncAction);

  var QueueAction = (function (_super) {
      __extends(QueueAction, _super);
      function QueueAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      QueueAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay > 0) {
              return _super.prototype.schedule.call(this, state, delay);
          }
          this.delay = delay;
          this.state = state;
          this.scheduler.flush(this);
          return this;
      };
      QueueAction.prototype.execute = function (state, delay) {
          return (delay > 0 || this.closed) ?
              _super.prototype.execute.call(this, state, delay) :
              this._execute(state, delay);
      };
      QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          return scheduler.flush(this);
      };
      return QueueAction;
  }(AsyncAction));

  var QueueScheduler = (function (_super) {
      __extends(QueueScheduler, _super);
      function QueueScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler;
  }(AsyncScheduler));

  new QueueScheduler(QueueAction);

  var AnimationFrameAction = (function (_super) {
      __extends(AnimationFrameAction, _super);
      function AnimationFrameAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
      };
      AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (!scheduler.actions.some(function (action) { return action.id === id; })) {
              animationFrameProvider.cancelAnimationFrame(id);
              scheduler._scheduled = undefined;
          }
          return undefined;
      };
      return AnimationFrameAction;
  }(AsyncAction));

  var AnimationFrameScheduler = (function (_super) {
      __extends(AnimationFrameScheduler, _super);
      function AnimationFrameScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler.prototype.flush = function (action) {
          this._active = true;
          var flushId = this._scheduled;
          this._scheduled = undefined;
          var actions = this.actions;
          var error;
          action = action || actions.shift();
          do {
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          } while ((action = actions[0]) && action.id === flushId && actions.shift());
          this._active = false;
          if (error) {
              while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AnimationFrameScheduler;
  }(AsyncScheduler));

  new AnimationFrameScheduler(AnimationFrameAction);

  ((function (_super) {
      __extends(VirtualTimeScheduler, _super);
      function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
          if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction; }
          if (maxFrames === void 0) { maxFrames = Infinity; }
          var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
          _this.maxFrames = maxFrames;
          _this.frame = 0;
          _this.index = -1;
          return _this;
      }
      VirtualTimeScheduler.prototype.flush = function () {
          var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
          var error;
          var action;
          while ((action = actions[0]) && action.delay <= maxFrames) {
              actions.shift();
              this.frame = action.delay;
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          }
          if (error) {
              while ((action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      VirtualTimeScheduler.frameTimeFactor = 10;
      return VirtualTimeScheduler;
  })(AsyncScheduler));
  var VirtualAction = (function (_super) {
      __extends(VirtualAction, _super);
      function VirtualAction(scheduler, work, index) {
          if (index === void 0) { index = (scheduler.index += 1); }
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.index = index;
          _this.active = true;
          _this.index = scheduler.index = index;
          return _this;
      }
      VirtualAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) { delay = 0; }
          if (Number.isFinite(delay)) {
              if (!this.id) {
                  return _super.prototype.schedule.call(this, state, delay);
              }
              this.active = false;
              var action = new VirtualAction(this.scheduler, this.work);
              this.add(action);
              return action.schedule(state, delay);
          }
          else {
              return Subscription.EMPTY;
          }
      };
      VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          this.delay = scheduler.frame + delay;
          var actions = scheduler.actions;
          actions.push(this);
          actions.sort(VirtualAction.sortActions);
          return true;
      };
      VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          return undefined;
      };
      VirtualAction.prototype._execute = function (state, delay) {
          if (this.active === true) {
              return _super.prototype._execute.call(this, state, delay);
          }
      };
      VirtualAction.sortActions = function (a, b) {
          if (a.delay === b.delay) {
              if (a.index === b.index) {
                  return 0;
              }
              else if (a.index > b.index) {
                  return 1;
              }
              else {
                  return -1;
              }
          }
          else if (a.delay > b.delay) {
              return 1;
          }
          else {
              return -1;
          }
      };
      return VirtualAction;
  }(AsyncAction));

  var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });

  function isScheduler(value) {
      return value && isFunction(value.schedule);
  }

  function last(arr) {
      return arr[arr.length - 1];
  }
  function popResultSelector(args) {
      return isFunction(last(args)) ? args.pop() : undefined;
  }
  function popScheduler(args) {
      return isScheduler(last(args)) ? args.pop() : undefined;
  }

  var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

  function isPromise(value) {
      return isFunction(value === null || value === void 0 ? void 0 : value.then);
  }

  function isInteropObservable(input) {
      return isFunction(input[observable]);
  }

  function isAsyncIterable(obj) {
      return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }

  function createInvalidObservableTypeError(input) {
      return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }

  function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
      }
      return Symbol.iterator;
  }
  var iterator = getSymbolIterator();

  function isIterable(input) {
      return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
  }

  function readableStreamLikeToAsyncGenerator(readableStream) {
      return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
          var reader, _a, value, done;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      reader = readableStream.getReader();
                      _b.label = 1;
                  case 1:
                      _b.trys.push([1, , 9, 10]);
                      _b.label = 2;
                  case 2:
                      return [4, __await(reader.read())];
                  case 3:
                      _a = _b.sent(), value = _a.value, done = _a.done;
                      if (!done) return [3, 5];
                      return [4, __await(void 0)];
                  case 4: return [2, _b.sent()];
                  case 5: return [4, __await(value)];
                  case 6: return [4, _b.sent()];
                  case 7:
                      _b.sent();
                      return [3, 2];
                  case 8: return [3, 10];
                  case 9:
                      reader.releaseLock();
                      return [7];
                  case 10: return [2];
              }
          });
      });
  }
  function isReadableStreamLike(obj) {
      return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }

  function innerFrom(input) {
      if (input instanceof Observable) {
          return input;
      }
      if (input != null) {
          if (isInteropObservable(input)) {
              return fromInteropObservable(input);
          }
          if (isArrayLike(input)) {
              return fromArrayLike(input);
          }
          if (isPromise(input)) {
              return fromPromise(input);
          }
          if (isAsyncIterable(input)) {
              return fromAsyncIterable(input);
          }
          if (isIterable(input)) {
              return fromIterable(input);
          }
          if (isReadableStreamLike(input)) {
              return fromReadableStreamLike(input);
          }
      }
      throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
      return new Observable(function (subscriber) {
          var obs = obj[observable]();
          if (isFunction(obs.subscribe)) {
              return obs.subscribe(subscriber);
          }
          throw new TypeError('Provided object does not correctly implement Symbol.observable');
      });
  }
  function fromArrayLike(array) {
      return new Observable(function (subscriber) {
          for (var i = 0; i < array.length && !subscriber.closed; i++) {
              subscriber.next(array[i]);
          }
          subscriber.complete();
      });
  }
  function fromPromise(promise) {
      return new Observable(function (subscriber) {
          promise
              .then(function (value) {
              if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
              }
          }, function (err) { return subscriber.error(err); })
              .then(null, reportUnhandledError);
      });
  }
  function fromIterable(iterable) {
      return new Observable(function (subscriber) {
          var e_1, _a;
          try {
              for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                  var value = iterable_1_1.value;
                  subscriber.next(value);
                  if (subscriber.closed) {
                      return;
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
          subscriber.complete();
      });
  }
  function fromAsyncIterable(asyncIterable) {
      return new Observable(function (subscriber) {
          process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
      });
  }
  function fromReadableStreamLike(readableStream) {
      return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process(asyncIterable, subscriber) {
      var asyncIterable_1, asyncIterable_1_1;
      var e_2, _a;
      return __awaiter$3(this, void 0, void 0, function () {
          var value, e_2_1;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      _b.trys.push([0, 5, 6, 11]);
                      asyncIterable_1 = __asyncValues(asyncIterable);
                      _b.label = 1;
                  case 1: return [4, asyncIterable_1.next()];
                  case 2:
                      if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                      value = asyncIterable_1_1.value;
                      subscriber.next(value);
                      if (subscriber.closed) {
                          return [2];
                      }
                      _b.label = 3;
                  case 3: return [3, 1];
                  case 4: return [3, 11];
                  case 5:
                      e_2_1 = _b.sent();
                      e_2 = { error: e_2_1 };
                      return [3, 11];
                  case 6:
                      _b.trys.push([6, , 9, 10]);
                      if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                      return [4, _a.call(asyncIterable_1)];
                  case 7:
                      _b.sent();
                      _b.label = 8;
                  case 8: return [3, 10];
                  case 9:
                      if (e_2) throw e_2.error;
                      return [7];
                  case 10: return [7];
                  case 11:
                      subscriber.complete();
                      return [2];
              }
          });
      });
  }

  function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
      if (delay === void 0) { delay = 0; }
      if (repeat === void 0) { repeat = false; }
      var scheduleSubscription = scheduler.schedule(function () {
          work();
          if (repeat) {
              parentSubscription.add(this.schedule(null, delay));
          }
          else {
              this.unsubscribe();
          }
      }, delay);
      parentSubscription.add(scheduleSubscription);
      if (!repeat) {
          return scheduleSubscription;
      }
  }

  function observeOn(scheduler, delay) {
      if (delay === void 0) { delay = 0; }
      return operate(function (source, subscriber) {
          source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
      });
  }

  function subscribeOn(scheduler, delay) {
      if (delay === void 0) { delay = 0; }
      return operate(function (source, subscriber) {
          subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
      });
  }

  function scheduleObservable(input, scheduler) {
      return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  function schedulePromise(input, scheduler) {
      return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  function scheduleArray(input, scheduler) {
      return new Observable(function (subscriber) {
          var i = 0;
          return scheduler.schedule(function () {
              if (i === input.length) {
                  subscriber.complete();
              }
              else {
                  subscriber.next(input[i++]);
                  if (!subscriber.closed) {
                      this.schedule();
                  }
              }
          });
      });
  }

  function scheduleIterable(input, scheduler) {
      return new Observable(function (subscriber) {
          var iterator$1;
          executeSchedule(subscriber, scheduler, function () {
              iterator$1 = input[iterator]();
              executeSchedule(subscriber, scheduler, function () {
                  var _a;
                  var value;
                  var done;
                  try {
                      (_a = iterator$1.next(), value = _a.value, done = _a.done);
                  }
                  catch (err) {
                      subscriber.error(err);
                      return;
                  }
                  if (done) {
                      subscriber.complete();
                  }
                  else {
                      subscriber.next(value);
                  }
              }, 0, true);
          });
          return function () { return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
      });
  }

  function scheduleAsyncIterable(input, scheduler) {
      if (!input) {
          throw new Error('Iterable cannot be null');
      }
      return new Observable(function (subscriber) {
          executeSchedule(subscriber, scheduler, function () {
              var iterator = input[Symbol.asyncIterator]();
              executeSchedule(subscriber, scheduler, function () {
                  iterator.next().then(function (result) {
                      if (result.done) {
                          subscriber.complete();
                      }
                      else {
                          subscriber.next(result.value);
                      }
                  });
              }, 0, true);
          });
      });
  }

  function scheduleReadableStreamLike(input, scheduler) {
      return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
  }

  function scheduled(input, scheduler) {
      if (input != null) {
          if (isInteropObservable(input)) {
              return scheduleObservable(input, scheduler);
          }
          if (isArrayLike(input)) {
              return scheduleArray(input, scheduler);
          }
          if (isPromise(input)) {
              return schedulePromise(input, scheduler);
          }
          if (isAsyncIterable(input)) {
              return scheduleAsyncIterable(input, scheduler);
          }
          if (isIterable(input)) {
              return scheduleIterable(input, scheduler);
          }
          if (isReadableStreamLike(input)) {
              return scheduleReadableStreamLike(input, scheduler);
          }
      }
      throw createInvalidObservableTypeError(input);
  }

  function from(input, scheduler) {
      return scheduler ? scheduled(input, scheduler) : innerFrom(input);
  }

  function of() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = popScheduler(args);
      return from(args, scheduler);
  }

  var NotificationKind;
  (function (NotificationKind) {
      NotificationKind["NEXT"] = "N";
      NotificationKind["ERROR"] = "E";
      NotificationKind["COMPLETE"] = "C";
  })(NotificationKind || (NotificationKind = {}));

  var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
      _super(this);
      this.name = 'EmptyError';
      this.message = 'no elements in sequence';
  }; });

  function firstValueFrom(source, config) {
      var hasConfig = typeof config === 'object';
      return new Promise(function (resolve, reject) {
          var subscriber = new SafeSubscriber({
              next: function (value) {
                  resolve(value);
                  subscriber.unsubscribe();
              },
              error: reject,
              complete: function () {
                  if (hasConfig) {
                      resolve(config.defaultValue);
                  }
                  else {
                      reject(new EmptyError());
                  }
              },
          });
          source.subscribe(subscriber);
      });
  }

  createErrorClass(function (_super) {
      return function ArgumentOutOfRangeErrorImpl() {
          _super(this);
          this.name = 'ArgumentOutOfRangeError';
          this.message = 'argument out of range';
      };
  });

  createErrorClass(function (_super) {
      return function NotFoundErrorImpl(message) {
          _super(this);
          this.name = 'NotFoundError';
          this.message = message;
      };
  });

  createErrorClass(function (_super) {
      return function SequenceErrorImpl(message) {
          _super(this);
          this.name = 'SequenceError';
          this.message = message;
      };
  });

  createErrorClass(function (_super) {
      return function TimeoutErrorImpl(info) {
          if (info === void 0) { info = null; }
          _super(this);
          this.message = 'Timeout has occurred';
          this.name = 'TimeoutError';
          this.info = info;
      };
  });

  function map(project, thisArg) {
      return operate(function (source, subscriber) {
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              subscriber.next(project.call(thisArg, value, index++));
          }));
      });
  }

  var isArray$1 = Array.isArray;
  function callOrApply(fn, args) {
      return isArray$1(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
  }
  function mapOneOrManyArgs(fn) {
      return map(function (args) { return callOrApply(fn, args); });
  }

  var isArray = Array.isArray;
  var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
  function argsArgArrayOrObject(args) {
      if (args.length === 1) {
          var first_1 = args[0];
          if (isArray(first_1)) {
              return { args: first_1, keys: null };
          }
          if (isPOJO(first_1)) {
              var keys = getKeys(first_1);
              return {
                  args: keys.map(function (key) { return first_1[key]; }),
                  keys: keys,
              };
          }
      }
      return { args: args, keys: null };
  }
  function isPOJO(obj) {
      return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
  }

  function createObject(keys, values) {
      return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
  }

  function combineLatest() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = popScheduler(args);
      var resultSelector = popResultSelector(args);
      var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
      if (observables.length === 0) {
          return from([], scheduler);
      }
      var result = new Observable(combineLatestInit(observables, scheduler, keys
          ?
              function (values) { return createObject(keys, values); }
          :
              identity$2));
      return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  function combineLatestInit(observables, scheduler, valueTransform) {
      if (valueTransform === void 0) { valueTransform = identity$2; }
      return function (subscriber) {
          maybeSchedule(scheduler, function () {
              var length = observables.length;
              var values = new Array(length);
              var active = length;
              var remainingFirstValues = length;
              var _loop_1 = function (i) {
                  maybeSchedule(scheduler, function () {
                      var source = from(observables[i], scheduler);
                      var hasFirstValue = false;
                      source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                          values[i] = value;
                          if (!hasFirstValue) {
                              hasFirstValue = true;
                              remainingFirstValues--;
                          }
                          if (!remainingFirstValues) {
                              subscriber.next(valueTransform(values.slice()));
                          }
                      }, function () {
                          if (!--active) {
                              subscriber.complete();
                          }
                      }));
                  }, subscriber);
              };
              for (var i = 0; i < length; i++) {
                  _loop_1(i);
              }
          }, subscriber);
      };
  }
  function maybeSchedule(scheduler, execute, subscription) {
      if (scheduler) {
          executeSchedule(subscription, scheduler, execute);
      }
      else {
          execute();
      }
  }

  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
      var buffer = [];
      var active = 0;
      var index = 0;
      var isComplete = false;
      var checkComplete = function () {
          if (isComplete && !buffer.length && !active) {
              subscriber.complete();
          }
      };
      var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
      var doInnerSub = function (value) {
          expand && subscriber.next(value);
          active++;
          var innerComplete = false;
          innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
              onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
              if (expand) {
                  outerNext(innerValue);
              }
              else {
                  subscriber.next(innerValue);
              }
          }, function () {
              innerComplete = true;
          }, undefined, function () {
              if (innerComplete) {
                  try {
                      active--;
                      var _loop_1 = function () {
                          var bufferedValue = buffer.shift();
                          if (innerSubScheduler) {
                              executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                          }
                          else {
                              doInnerSub(bufferedValue);
                          }
                      };
                      while (buffer.length && active < concurrent) {
                          _loop_1();
                      }
                      checkComplete();
                  }
                  catch (err) {
                      subscriber.error(err);
                  }
              }
          }));
      };
      source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
          isComplete = true;
          checkComplete();
      }));
      return function () {
          additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
      };
  }

  function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) { concurrent = Infinity; }
      if (isFunction(resultSelector)) {
          return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
      }
      else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
      }
      return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
  }

  function mergeAll(concurrent) {
      if (concurrent === void 0) { concurrent = Infinity; }
      return mergeMap(identity$2, concurrent);
  }

  function concatAll() {
      return mergeAll(1);
  }

  function concat() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      return concatAll()(from(args, popScheduler(args)));
  }

  new Observable(noop);

  function filter(predicate, thisArg) {
      return operate(function (source, subscriber) {
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
      });
  }

  function catchError(selector) {
      return operate(function (source, subscriber) {
          var innerSub = null;
          var syncUnsub = false;
          var handledResult;
          innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
              handledResult = innerFrom(selector(err, catchError(selector)(source)));
              if (innerSub) {
                  innerSub.unsubscribe();
                  innerSub = null;
                  handledResult.subscribe(subscriber);
              }
              else {
                  syncUnsub = true;
              }
          }));
          if (syncUnsub) {
              innerSub.unsubscribe();
              innerSub = null;
              handledResult.subscribe(subscriber);
          }
      });
  }

  function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
      return function (source, subscriber) {
          var hasState = hasSeed;
          var state = seed;
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              var i = index++;
              state = hasState
                  ?
                      accumulator(state, value, i)
                  :
                      ((hasState = true), value);
              emitOnNext && subscriber.next(state);
          }, emitBeforeComplete &&
              (function () {
                  hasState && subscriber.next(state);
                  subscriber.complete();
              })));
      };
  }

  function reduce(accumulator, seed) {
      return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
  }

  var arrReducer = function (arr, value) { return (arr.push(value), arr); };
  function toArray() {
      return operate(function (source, subscriber) {
          reduce(arrReducer, [])(source).subscribe(subscriber);
      });
  }

  function fromSubscribable(subscribable) {
      return new Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
  }

  var DEFAULT_CONFIG = {
      connector: function () { return new Subject(); },
  };
  function connect$1(selector, config) {
      if (config === void 0) { config = DEFAULT_CONFIG; }
      var connector = config.connector;
      return operate(function (source, subscriber) {
          var subject = connector();
          innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
          subscriber.add(source.subscribe(subject));
      });
  }

  function defaultIfEmpty(defaultValue) {
      return operate(function (source, subscriber) {
          var hasValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              hasValue = true;
              subscriber.next(value);
          }, function () {
              if (!hasValue) {
                  subscriber.next(defaultValue);
              }
              subscriber.complete();
          }));
      });
  }

  function take(count) {
      return count <= 0
          ?
              function () { return EMPTY; }
          : operate(function (source, subscriber) {
              var seen = 0;
              source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                  if (++seen <= count) {
                      subscriber.next(value);
                      if (count <= seen) {
                          subscriber.complete();
                      }
                  }
              }));
          });
  }

  function mapTo(value) {
      return map(function () { return value; });
  }

  function distinctUntilChanged(comparator, keySelector) {
      if (keySelector === void 0) { keySelector = identity$2; }
      comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
      return operate(function (source, subscriber) {
          var previousKey;
          var first = true;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              var currentKey = keySelector(value);
              if (first || !comparator(previousKey, currentKey)) {
                  first = false;
                  previousKey = currentKey;
                  subscriber.next(value);
              }
          }));
      });
  }
  function defaultCompare(a, b) {
      return a === b;
  }

  function throwIfEmpty(errorFactory) {
      if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
      return operate(function (source, subscriber) {
          var hasValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              hasValue = true;
              subscriber.next(value);
          }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
      });
  }
  function defaultErrorFactory() {
      return new EmptyError();
  }

  function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function (source) {
          return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
      };
  }

  function multicast(subjectOrSubjectFactory, selector) {
      var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
      if (isFunction(selector)) {
          return connect$1(selector, {
              connector: subjectFactory,
          });
      }
      return function (source) { return new ConnectableObservable(source, subjectFactory); };
  }

  function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
      if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {
          timestampProvider = selectorOrScheduler;
      }
      var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
      return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
  }

  function startWith() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          values[_i] = arguments[_i];
      }
      var scheduler = popScheduler(values);
      return operate(function (source, subscriber) {
          (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
      });
  }

  function switchMap(project, resultSelector) {
      return operate(function (source, subscriber) {
          var innerSubscriber = null;
          var index = 0;
          var isComplete = false;
          var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
              var innerIndex = 0;
              var outerIndex = index++;
              innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                  innerSubscriber = null;
                  checkComplete();
              })));
          }, function () {
              isComplete = true;
              checkComplete();
          }));
      });
  }

  function tap(observerOrNext, error, complete) {
      var tapObserver = isFunction(observerOrNext) || error || complete
          ?
              { next: observerOrNext, error: error, complete: complete }
          : observerOrNext;
      return tapObserver
          ? operate(function (source, subscriber) {
              var _a;
              (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
              var isUnsub = true;
              source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                  var _a;
                  (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                  subscriber.next(value);
              }, function () {
                  var _a;
                  isUnsub = false;
                  (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                  subscriber.complete();
              }, function (err) {
                  var _a;
                  isUnsub = false;
                  (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                  subscriber.error(err);
              }, function () {
                  var _a, _b;
                  if (isUnsub) {
                      (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                  }
                  (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
              }));
          })
          :
              identity$2;
  }

  function refCountDelay(delay = 1750) {
    return source => {
      let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
      return new Observable(ob => {
        source.subscribe(ob);
        if (refCount++ === 0) {
          if (state === 1) {
            scheduler.unsubscribe();
          } else {
            connection = source.connect();
          }
          state = 3;
        }
        return () => {
          if (--refCount === 0) {
            if (state === 2) {
              state = 0;
              scheduler.unsubscribe();
            } else {
              state = 1;
              scheduler = asapScheduler.schedule(() => {
                state = 0;
                connection.unsubscribe();
              }, delay);
            }
          }
        };
      });
    };
  }

  const l$5 = util.logger('drr');
  const CMP = (a, b) => util.stringify({
    t: a
  }) === util.stringify({
    t: b
  });
  const ERR = error => {
    l$5.error(error.message);
    throw error;
  };
  const NOOP = () => undefined;
  const drr = ({
    delay,
    skipChange = false,
    skipTimeout = false
  } = {}) => source$ => source$.pipe(catchError(ERR), skipChange ? tap(NOOP) : distinctUntilChanged(CMP), publishReplay(1), skipTimeout ? refCount() : refCountDelay(delay));

  function memo(instanceId, inner) {
    const options = {
      getInstanceId: () => instanceId
    };
    const cached = util.memoize((...params) => new Observable(observer => {
      const subscription = inner(...params).subscribe(observer);
      return () => {
        cached.unmemoize(...params);
        subscription.unsubscribe();
      };
    }).pipe(drr()), options);
    return cached;
  }

  ({
    name: '@polkadot/rpc-core',
    path: (({ url: (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href)) }) && (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))) ? new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.substring(0, new URL((typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('bundle-polkadot-api.js', document.baseURI).href))).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.2.3-1-x'
  });

  const l$4 = util.logger('rpc-core');
  const EMPTY_META = {
    fallback: undefined,
    modifier: {
      isOptional: true
    },
    type: {
      asMap: {
        linked: {
          isTrue: false
        }
      },
      isMap: false
    }
  };
  function logErrorMessage(method, {
    noErrorLog,
    params,
    type
  }, error) {
    if (noErrorLog) {
      return;
    }
    const inputs = params.map(({
      isOptional,
      name,
      type
    }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
    l$4.error(`${method}(${inputs}): ${type}:: ${error.message}`);
  }
  function isTreatAsHex(key) {
    return ['0x3a636f6465'].includes(key.toHex());
  }
  class RpcCore {
    #instanceId;
    #registryDefault;
    #getBlockRegistry;
    #getBlockHash;
    #storageCache = new Map();
    mapping = new Map();
    sections = [];
    constructor(instanceId, registry, provider, userRpc = {}) {
      if (!provider || !util.isFunction(provider.send)) {
        throw new Error('Expected Provider to API create');
      }
      this.#instanceId = instanceId;
      this.#registryDefault = registry;
      this.provider = provider;
      const sectionNames = Object.keys(types.rpcDefinitions);
      this.sections.push(...sectionNames);
      this.addUserInterfaces(userRpc);
    }
    get isConnected() {
      return this.provider.isConnected;
    }
    connect() {
      return this.provider.connect();
    }
    disconnect() {
      return this.provider.disconnect();
    }
    setRegistrySwap(registrySwap) {
      this.#getBlockRegistry = util.memoize(registrySwap, {
        getInstanceId: () => this.#instanceId
      });
    }
    setResolveBlockHash(resolveBlockHash) {
      this.#getBlockHash = util.memoize(resolveBlockHash, {
        getInstanceId: () => this.#instanceId
      });
    }
    addUserInterfaces(userRpc) {
      this.sections.push(...Object.keys(userRpc).filter(k => !this.sections.includes(k)));
      for (let s = 0; s < this.sections.length; s++) {
        const section = this.sections[s];
        const defs = util.objectSpread({}, types.rpcDefinitions[section], userRpc[section]);
        const methods = Object.keys(defs);
        for (let m = 0; m < methods.length; m++) {
          const method = methods[m];
          const def = defs[method];
          const jsonrpc = def.endpoint || `${section}_${method}`;
          if (!this.mapping.has(jsonrpc)) {
            const isSubscription = !!def.pubsub;
            if (!this[section]) {
              this[section] = {};
            }
            this.mapping.set(jsonrpc, util.objectSpread({}, def, {
              isSubscription,
              jsonrpc,
              method,
              section
            }));
            util.lazyMethod(this[section], method, () => isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def));
          }
        }
      }
    }
    _memomize(creator, def) {
      const memoOpts = {
        getInstanceId: () => this.#instanceId
      };
      const memoized = util.memoize(creator(true), memoOpts);
      memoized.raw = util.memoize(creator(false), memoOpts);
      memoized.meta = def;
      return memoized;
    }
    _formatResult(isScale, registry, blockHash, method, def, params, result) {
      return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
    }
    _createMethodSend(section, method, def) {
      const rpcName = def.endpoint || `${section}_${method}`;
      const hashIndex = def.params.findIndex(({
        isHistoric
      }) => isHistoric);
      let memoized = null;
      const callWithRegistry = async (isScale, values) => {
        var _this$getBlockHash;
        const blockId = hashIndex === -1 ? null : values[hashIndex];
        const blockHash = blockId && def.params[hashIndex].type === 'BlockNumber' ? await ((_this$getBlockHash = this.#getBlockHash) === null || _this$getBlockHash === void 0 ? void 0 : _this$getBlockHash.call(this, blockId)) : blockId;
        const {
          registry
        } = isScale && blockHash && this.#getBlockRegistry ? await this.#getBlockRegistry(util.u8aToU8a(blockHash)) : {
          registry: this.#registryDefault
        };
        const params = this._formatInputs(registry, null, def, values);
        const result = await this.provider.send(rpcName, params.map(p => p.toJSON()), !!blockHash);
        return this._formatResult(isScale, registry, blockHash, method, def, params, result);
      };
      const creator = isScale => (...values) => {
        const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
        return new Observable(observer => {
          callWithRegistry(isScale, values).then(value => {
            observer.next(value);
            observer.complete();
          }).catch(error => {
            logErrorMessage(method, def, error);
            observer.error(error);
            observer.complete();
          });
          return () => {
            if (isScale) {
              var _memoized;
              (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);
            } else {
              var _memoized2;
              (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.raw.unmemoize(...values);
            }
          };
        }).pipe(publishReplay(1),
        isDelayed ? refCountDelay()
        : refCount());
      };
      memoized = this._memomize(creator, def);
      return memoized;
    }
    _createSubscriber({
      paramsJson,
      subName,
      subType,
      update
    }, errorHandler) {
      return new Promise((resolve, reject) => {
        this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {
          errorHandler(error);
          reject(error);
        });
      });
    }
    _createMethodSubscribe(section, method, def) {
      const [updateType, subMethod, unsubMethod] = def.pubsub;
      const subName = `${section}_${subMethod}`;
      const unsubName = `${section}_${unsubMethod}`;
      const subType = `${section}_${updateType}`;
      let memoized = null;
      const creator = isScale => (...values) => {
        return new Observable(observer => {
          let subscriptionPromise = Promise.resolve(null);
          const registry = this.#registryDefault;
          const errorHandler = error => {
            logErrorMessage(method, def, error);
            observer.error(error);
          };
          try {
            const params = this._formatInputs(registry, null, def, values);
            const paramsJson = params.map(p => p.toJSON());
            const update = (error, result) => {
              if (error) {
                logErrorMessage(method, def, error);
                return;
              }
              try {
                observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
              } catch (error) {
                observer.error(error);
              }
            };
            subscriptionPromise = this._createSubscriber({
              paramsJson,
              subName,
              subType,
              update
            }, errorHandler);
          } catch (error) {
            errorHandler(error);
          }
          return () => {
            if (isScale) {
              var _memoized3;
              (_memoized3 = memoized) === null || _memoized3 === void 0 ? void 0 : _memoized3.unmemoize(...values);
            } else {
              var _memoized4;
              (_memoized4 = memoized) === null || _memoized4 === void 0 ? void 0 : _memoized4.raw.unmemoize(...values);
            }
            subscriptionPromise.then(subscriptionId => util.isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));
          };
        }).pipe(drr());
      };
      memoized = this._memomize(creator, def);
      return memoized;
    }
    _formatInputs(registry, blockHash, def, inputs) {
      const reqArgCount = def.params.filter(({
        isOptional
      }) => !isOptional).length;
      const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;
      if (inputs.length < reqArgCount || inputs.length > def.params.length) {
        throw new Error(`Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
      }
      return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {
        blockHash
      }));
    }
    _formatOutput(registry, blockHash, method, rpc, params, result) {
      if (rpc.type === 'StorageData') {
        const key = params[0];
        return this._formatStorageData(registry, blockHash, key, result);
      } else if (rpc.type === 'StorageChangeSet') {
        const keys = params[0];
        return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);
      } else if (rpc.type === 'Vec<StorageChangeSet>') {
        const mapped = result.map(({
          block,
          changes
        }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]);
        return method === 'queryStorageAt' ? mapped[0][1] : mapped;
      }
      return registry.createTypeUnsafe(rpc.type, [result], {
        blockHash
      });
    }
    _formatStorageData(registry, blockHash, key, value) {
      const isEmpty = util.isNull(value);
      const input = isEmpty ? null : isTreatAsHex(key) ? value : util.u8aToU8a(value);
      return this._newType(registry, blockHash, key, input, isEmpty);
    }
    _formatStorageSet(registry, blockHash, keys, changes) {
      const withCache = keys.length !== 1;
      return keys.reduce((results, key, index) => {
        results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
        return results;
      }, []);
    }
    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
      const hexKey = key.toHex();
      const found = changes.find(([key]) => key === hexKey);
      const isNotFound = util.isUndefined(found);
      if (isNotFound && withCache) {
        const cached = this.#storageCache.get(hexKey);
        if (cached) {
          return cached;
        }
      }
      const value = isNotFound ? null : found[1];
      const isEmpty = util.isNull(value);
      const input = isEmpty || isTreatAsHex(key) ? value : util.u8aToU8a(value);
      const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
      this.#storageCache.set(hexKey, codec);
      return codec;
    }
    _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
      const type = key.outputType || 'Raw';
      const meta = key.meta || EMPTY_META;
      const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;
      try {
        return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback
        ? type.includes('Linkage<') ? util.u8aConcat(util.hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : util.hexToU8a(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {
          blockHash,
          isPedantic: true
        }) : input], {
          blockHash,
          isOptional: meta.modifier.isOptional,
          isPedantic: !meta.modifier.isOptional
        });
      } catch (error) {
        throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
      }
    }
  }

  function unwrapBlockNumber(hdr) {
    return util.isCompact(hdr.number) ? hdr.number.unwrap() : hdr.number;
  }

  const deriveNoopCache = {
    del: () => undefined,
    forEach: () => undefined,
    get: () => undefined,
    set: (_, value) => value
  };

  const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
  let deriveCache;
  function wrapCache(keyStart, cache) {
    return {
      del: partial => cache.del(`${keyStart}${partial}`),
      forEach: cache.forEach,
      get: partial => {
        const key = `${keyStart}${partial}`;
        const cached = cache.get(key);
        if (cached) {
          cached.x = Date.now();
          cache.set(key, cached);
          return cached.v;
        }
        return undefined;
      },
      set: (partial, v) => {
        cache.set(`${keyStart}${partial}`, {
          v,
          x: Date.now()
        });
      }
    };
  }
  function clearCache(cache) {
    const now = Date.now();
    const all = [];
    cache.forEach((key, {
      x
    }) => {
      now - x > CHACHE_EXPIRY && all.push(key);
    });
    all.forEach(key => cache.del(key));
  }
  function setDeriveCache(prefix = '', cache) {
    deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : deriveNoopCache;
    if (cache) {
      clearCache(cache);
    }
  }
  setDeriveCache();

  function firstObservable(obs) {
    return obs.pipe(map(([a]) => a));
  }
  function firstMemo(fn) {
    return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
  }

  function lazyDeriveSection(result, section, getKeys, creator) {
    util.lazyMethod(result, section, () => util.lazyMethods({}, getKeys(section), method => creator(section, method)));
  }

  function accountId(instanceId, api) {
    return memo(instanceId, address => {
      const decoded = util.isU8a(address) ? address : utilCrypto.decodeAddress((address || '').toString());
      if (decoded.length > 8) {
        return of(api.registry.createType('AccountId', decoded));
      }
      const accountIndex = api.registry.createType('AccountIndex', decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(a => util.assertReturn(a, 'Unable to retrieve accountId')));
    });
  }

  function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address && address.toString();
    const isIncluded = id => id.toString() === addrStr;
    return {
      isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(r => Array.isArray(r) ? r[0] : r.who)) || councilMembers || []).some(isIncluded),
      isSociety: (societyMembers || []).some(isIncluded),
      isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === addrStr,
      isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
  }
  function _flags(instanceId, api) {
    return memo(instanceId, () => {
      var _ref, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;
      const results = [undefined, [], [], [], undefined];
      const calls = [(_ref = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections) === null || _ref === void 0 ? void 0 : _ref.members, (_api$query$council = api.query.council) === null || _api$query$council === void 0 ? void 0 : _api$query$council.members, (_api$query$technicalC = api.query.technicalCommittee) === null || _api$query$technicalC === void 0 ? void 0 : _api$query$technicalC.members, (_api$query$society = api.query.society) === null || _api$query$society === void 0 ? void 0 : _api$query$society.members, (_api$query$sudo = api.query.sudo) === null || _api$query$sudo === void 0 ? void 0 : _api$query$sudo.key];
      const filtered = calls.filter(c => c);
      if (!filtered.length) {
        return of(results);
      }
      return api.queryMulti(filtered).pipe(map(values => {
        let resultIndex = -1;
        for (let i = 0; i < calls.length; i++) {
          if (util.isFunction(calls[i])) {
            results[i] = values[++resultIndex];
          }
        }
        return results;
      }));
    });
  }
  function flags(instanceId, api) {
    return memo(instanceId, address => api.derive.accounts._flags().pipe(map(r => parseFlags(address, r))));
  }

  function idAndIndex(instanceId, api) {
    return memo(instanceId, address => {
      try {
        const decoded = util.isU8a(address) ? address : utilCrypto.decodeAddress((address || '').toString());
        if (decoded.length > 8) {
          const accountId = api.registry.createType('AccountId', decoded);
          return api.derive.accounts.idToIndex(accountId).pipe(map(accountIndex => [accountId, accountIndex]));
        }
        const accountIndex = api.registry.createType('AccountIndex', decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => [accountId, accountIndex]));
      } catch (error) {
        return of([undefined, undefined]);
      }
    });
  }

  function idToIndex(instanceId, api) {
    return memo(instanceId, accountId => api.derive.accounts.indexes().pipe(map(indexes => (indexes || {})[accountId.toString()])));
  }

  const UNDEF_HEX = {
    toHex: () => undefined
  };
  function dataAsString(data) {
    return data.isRaw ? util.u8aToString(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
  }
  function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
      const key = dataAsString(_key);
      const value = dataAsString(_value);
      if (key && value) {
        other[key] = value;
      }
      return other;
    }, {});
  }
  function extractIdentity(identityOfOpt, superOf) {
    if (!(identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome)) {
      return {
        judgements: []
      };
    }
    const {
      info,
      judgements
    } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info.display);
    return {
      display: superOf && dataAsString(superOf[1]) || topDisplay,
      displayParent: superOf && topDisplay,
      email: dataAsString(info.email),
      image: dataAsString(info.image),
      judgements,
      legal: dataAsString(info.legal),
      other: extractOther(info.additional),
      parent: superOf && superOf[0],
      pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
      riot: dataAsString(info.riot),
      twitter: dataAsString(info.twitter),
      web: dataAsString(info.web)
    };
  }
  function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome) {
      return of([identityOfOpt, undefined]);
    } else if (superOfOpt !== null && superOfOpt !== void 0 && superOfOpt.isSome) {
      const superOf = superOfOpt.unwrap();
      return combineLatest([api.derive.accounts._identity(superOf[0]).pipe(map(([info]) => info)), of(superOf)]);
    }
    return of([undefined, undefined]);
  }
  function _identity(instanceId, api) {
    return memo(instanceId, accountId => {
      var _api$query$identity;
      return accountId && (_api$query$identity = api.query.identity) !== null && _api$query$identity !== void 0 && _api$query$identity.identityOf ? combineLatest([api.query.identity.identityOf(accountId), api.query.identity.superOf(accountId)]) : of([undefined, undefined]);
    });
  }
  function identity$1(instanceId, api) {
    return memo(instanceId, accountId => api.derive.accounts._identity(accountId).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
  }
  const hasIdentity = firstMemo((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
  function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, accountIds => {
      var _api$query$identity2;
      return (_api$query$identity2 = api.query.identity) !== null && _api$query$identity2 !== void 0 && _api$query$identity2.identityOf ? combineLatest([api.query.identity.identityOf.multi(accountIds), api.query.identity.superOf.multi(accountIds)]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
        const superOfOpt = supers[index];
        const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
        let display;
        if (identityOfOpt && identityOfOpt.isSome) {
          const value = dataAsString(identityOfOpt.unwrap().info.display);
          if (value && !util.isHex(value)) {
            display = value;
          }
        }
        return {
          display,
          hasIdentity: !!(display || parentId),
          parentId
        };
      }))) : of(accountIds.map(() => ({
        hasIdentity: false
      })));
    });
  }

  function indexToId(instanceId, api) {
    return memo(instanceId, accountIndex => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map(optResult => optResult.unwrapOr([])[0])) : of(undefined));
  }

  let indicesCache = null;
  function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe(map(entries => entries.reduce((indexes, [key, idOpt]) => {
      if (idOpt.isSome) {
        indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
      }
      return indexes;
    }, {})));
  }
  function indexes$1(instanceId, api) {
    return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map(indices => {
      indicesCache = indices;
      return indices;
    })));
  }

  function retrieveNick(api, accountId) {
    var _api$query$nicks;
    return (accountId && (_api$query$nicks = api.query.nicks) !== null && _api$query$nicks !== void 0 && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId) : of(undefined)).pipe(map(nameOf => nameOf !== null && nameOf !== void 0 && nameOf.isSome ? util.u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber()) : undefined));
  }
  function info$4(instanceId, api) {
    return memo(instanceId, address => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([of({
      accountId,
      accountIndex
    }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)])), map(([{
      accountId,
      accountIndex
    }, identity, nickname]) => ({
      accountId,
      accountIndex,
      identity,
      nickname
    }))));
  }

  const accounts$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accountId: accountId,
    _flags: _flags,
    flags: flags,
    idAndIndex: idAndIndex,
    idToIndex: idToIndex,
    _identity: _identity,
    identity: identity$1,
    hasIdentity: hasIdentity,
    hasIdentityMulti: hasIdentityMulti,
    indexToId: indexToId,
    indexes: indexes$1,
    info: info$4
  });

  function getInstance(api, section) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section);
    const name = instances && instances.length ? instances[0] : section;
    return api.query[name];
  }
  function withSection(section, fn) {
    return (instanceId, api) => memo(instanceId, fn(getInstance(api, section), api, instanceId));
  }
  function callMethod(method, empty) {
    return section => withSection(section, query => () => util.isFunction(query === null || query === void 0 ? void 0 : query[method]) ? query[method]() : of(empty));
  }

  const members$5 = callMethod('members', []);

  function prime$4(section) {
    return withSection(section, query => () => util.isFunction(query === null || query === void 0 ? void 0 : query.prime) ? query.prime().pipe(map(o => o.unwrapOr(null))) : of(null));
  }

  function parse$4(api, [hashes, proposals, votes]) {
    return proposals.map((o, index) => ({
      hash: api.registry.createType('Hash', hashes[index]),
      proposal: o && o.isSome ? o.unwrap() : null,
      votes: votes[index].unwrapOr(null)
    }));
  }
  function _proposalsFrom(api, query, hashes) {
    return (util.isFunction(query === null || query === void 0 ? void 0 : query.proposals) && hashes.length ? combineLatest([of(hashes),
    query.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))), query.voting.multi(hashes)]) : of([[], [], []])).pipe(map(r => parse$4(api, r)));
  }
  function hasProposals$4(section) {
    return withSection(section, query => () => of(util.isFunction(query === null || query === void 0 ? void 0 : query.proposals)));
  }
  function proposals$6(section) {
    return withSection(section, (query, api) => () => api.derive[section].proposalHashes().pipe(switchMap(all => _proposalsFrom(api, query, all))));
  }
  function proposal$4(section) {
    return withSection(section, (query, api) => hash => util.isFunction(query === null || query === void 0 ? void 0 : query.proposals) ? firstObservable(_proposalsFrom(api, query, [hash])) : of(null));
  }
  const proposalCount$4 = callMethod('proposalCount', null);
  const proposalHashes$4 = callMethod('proposals', []);

  const members$4 = members$5('allianceMotion');
  const hasProposals$3 = hasProposals$4('allianceMotion');
  const proposal$3 = proposal$4('allianceMotion');
  const proposalCount$3 = proposalCount$4('allianceMotion');
  const proposalHashes$3 = proposalHashes$4('allianceMotion');
  const proposals$5 = proposals$6('allianceMotion');
  const prime$3 = prime$4('allianceMotion');

  const alliance = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members$4,
    hasProposals: hasProposals$3,
    proposal: proposal$3,
    proposalCount: proposalCount$3,
    proposalHashes: proposalHashes$3,
    proposals: proposals$5,
    prime: prime$3
  });

  function orderBags(ids, bags) {
    const sorted = ids.map((id, index) => ({
      bag: bags[index].unwrapOr(null),
      id,
      key: id.toString()
    })).sort((a, b) => b.id.cmp(a.id));
    const max = sorted.length - 1;
    return sorted.map((entry, index) => util.objectSpread(entry, {
      bagLower: index === max ? util.BN_ZERO : sorted[index + 1].id,
      bagUpper: entry.id,
      index
    }));
  }
  function _getIds(instanceId, api) {
    return memo(instanceId, _ids => {
      const ids = _ids.map(id => util.bnToBn(id));
      return ids.length ? (api.query.voterList || api.query.bagsList).listBags.multi(ids).pipe(map(bags => orderBags(ids, bags))) : of([]);
    });
  }
  function all$1(instanceId, api) {
    return memo(instanceId, () => (api.query.voterList || api.query.bagsList).listBags.keys().pipe(switchMap(keys => api.derive.bagsList._getIds(keys.map(({
      args: [id]
    }) => id))), map(list => list.filter(({
      bag
    }) => bag))));
  }
  function get(instanceId, api) {
    return memo(instanceId, id => api.derive.bagsList._getIds([util.bnToBn(id)]).pipe(map(bags => bags[0])));
  }

  function expand(instanceId, api) {
    return memo(instanceId, bag => api.derive.bagsList.listNodes(bag.bag).pipe(map(nodes => util.objectSpread({
      nodes
    }, bag))));
  }
  function getExpanded(instanceId, api) {
    return memo(instanceId, id => api.derive.bagsList.get(id).pipe(switchMap(bag => api.derive.bagsList.expand(bag))));
  }

  function traverseLinks(api, head) {
    const subject = new BehaviorSubject(head);
    return subject.pipe(switchMap(account => (api.query.voterList || api.query.bagsList).listNodes(account)), tap(node => {
      util.nextTick(() => {
        node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
      });
    }), toArray(),
    map(all => all.map(o => o.unwrap())));
  }
  function listNodes(instanceId, api) {
    return memo(instanceId, bag => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
  }

  const bagsList = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _getIds: _getIds,
    all: all$1,
    get: get,
    expand: expand,
    getExpanded: getExpanded,
    listNodes: listNodes
  });

  const VESTING_ID = '0x76657374696e6720';
  function calcLocked(api, bestNumber, locks) {
    let lockedBalance = api.registry.createType('Balance');
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType('Balance');
    let allLocked = false;
    if (Array.isArray(locks)) {
      lockedBreakdown = locks.filter(({
        until
      }) => !until || bestNumber && until.gt(bestNumber));
      allLocked = lockedBreakdown.some(({
        amount
      }) => amount && amount.isMax());
      vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({
        id
      }) => id.eq(VESTING_ID)).reduce((result, {
        amount
      }) => result.iadd(amount), new util.BN(0)));
      const notAll = lockedBreakdown.filter(({
        amount
      }) => amount && !amount.isMax());
      if (notAll.length) {
        lockedBalance = api.registry.createType('Balance', util.bnMax(...notAll.map(({
          amount
        }) => amount)));
      }
    }
    return {
      allLocked,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    };
  }
  function calcShared(api, bestNumber, data, locks) {
    const {
      allLocked,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    } = calcLocked(api, bestNumber, locks);
    return util.objectSpread({}, data, {
      availableBalance: api.registry.createType('Balance', allLocked ? 0 : util.bnMax(new util.BN(0), data.freeBalance.sub(lockedBalance))),
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    });
  }
  function calcVesting(bestNumber, shared, _vesting) {
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({
      locked,
      perBlock,
      startingBlock
    }) => bestNumber.gt(startingBlock) ? util.bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock))) : util.BN_ZERO);
    const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new util.BN(0));
    const vestingTotal = vesting.reduce((all, {
      locked
    }) => all.iadd(locked), new util.BN(0));
    return {
      isVesting,
      vestedBalance,
      vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : util.BN_ZERO,
      vesting: vesting.map(({
        locked,
        perBlock,
        startingBlock
      }, index) => ({
        endBlock: locked.div(perBlock).iadd(startingBlock),
        locked,
        perBlock,
        startingBlock,
        vested: vestedBalances[index]
      })).filter(({
        locked
      }) => !locked.isZero()),
      vestingTotal
    };
  }
  function calcBalances$1(api, [data, [vesting, allLocks, namedReserves], bestNumber]) {
    const shared = calcShared(api, bestNumber, data, allLocks[0]);
    return util.objectSpread(shared, calcVesting(bestNumber, shared, vesting), {
      accountId: data.accountId,
      accountNonce: data.accountNonce,
      additional: allLocks.slice(1).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
      namedReserves
    });
  }
  function queryOld(api, accountId) {
    return combineLatest([api.query.balances.locks(accountId), api.query.balances.vesting(accountId)]).pipe(map(([locks, optVesting]) => {
      let vestingNew = null;
      if (optVesting.isSome) {
        const {
          offset: locked,
          perBlock,
          startingBlock
        } = optVesting.unwrap();
        vestingNew = api.registry.createType('VestingInfo', {
          locked,
          perBlock,
          startingBlock
        });
      }
      return [vestingNew ? [vestingNew] : null, [locks], []];
    }));
  }
  const isNonNullable = nullable => !!nullable;
  function createCalls(calls) {
    return [calls.map(c => !c), calls.filter(isNonNullable)];
  }
  function queryCurrent(api, accountId, balanceInstances = ['balances']) {
    var _api$query$vesting;
    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map(m => {
      var _m, _api$query;
      return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customLocks) || ((_api$query = api.query[m]) === null || _api$query === void 0 ? void 0 : _api$query.locks);
    }));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map(m => {
      var _api$query2;
      return (_api$query2 = api.query[m]) === null || _api$query2 === void 0 ? void 0 : _api$query2.reserves;
    }));
    return combineLatest([(_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.query.vesting.vesting(accountId) : of(api.registry.createType('Option<VestingInfo>')), lockQueries.length ? combineLatest(lockQueries.map(c => c(accountId))) : of([]), reserveQueries.length ? combineLatest(reserveQueries.map(c => c(accountId))) : of([])]).pipe(map(([opt, locks, reserves]) => {
      let offsetLock = -1;
      let offsetReserve = -1;
      const vesting = opt.unwrapOr(null);
      return [vesting ? Array.isArray(vesting) ? vesting : [vesting] : null, lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]), reserveEmpty.map(e => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])];
    }));
  }
  function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
    return memo(instanceId, address => {
      var _api$query$system, _api$query$balances;
      return combineLatest([api.derive.balances.account(address), util.isFunction((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) || util.isFunction((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)]).pipe(switchMap(([account, locks]) => combineLatest([of(account), of(locks), api.derive.chain.bestNumber()])), map(result => calcBalances$1(api, result)));
    });
  }

  function zeroBalance(api) {
    return api.registry.createType('Balance');
  }
  function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
    return {
      freeBalance,
      frozenFee,
      frozenMisc,
      reservedBalance,
      votingBalance
    };
  }
  function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
    return util.objectSpread({
      accountId,
      accountNonce,
      additional: additional.map(b => getBalance(api, b))
    }, getBalance(api, primary));
  }
  function queryBalancesFree(api, accountId) {
    return combineLatest([api.query.balances.freeBalance(accountId), api.query.balances.reservedBalance(accountId), api.query.system.accountNonce(accountId)]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]]));
  }
  function queryNonceOnly(api, accountId) {
    const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];
    return util.isFunction(api.query.system.account) ? api.query.system.account(accountId).pipe(map(({
      nonce
    }) => fill(nonce))) : util.isFunction(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId).pipe(map(nonce => fill(nonce))) : of(fill(api.registry.createType('Index')));
  }
  function queryBalancesAccount(api, accountId, modules = ['balances']) {
    const balances = modules.map(m => {
      var _m, _api$query$m;
      return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customAccount) || ((_api$query$m = api.query[m]) === null || _api$query$m === void 0 ? void 0 : _api$query$m.account);
    }).filter(q => util.isFunction(q));
    const extract = (nonce, data) => [nonce, data.map(({
      feeFrozen,
      free,
      miscFrozen,
      reserved
    }) => [free, reserved, feeFrozen, miscFrozen])];
    return balances.length ? util.isFunction(api.query.system.account) ? combineLatest([api.query.system.account(accountId), ...balances.map(c => c(accountId))]).pipe(map(([{
      nonce
    }, ...balances]) => extract(nonce, balances))) : combineLatest([api.query.system.accountNonce(accountId), ...balances.map(c => c(accountId))]).pipe(map(([nonce, ...balances]) => extract(nonce, balances))) : queryNonceOnly(api, accountId);
  }
  function querySystemAccount(api, accountId) {
    return api.query.system.account(accountId).pipe(map(infoOrTuple => {
      const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
      const nonce = infoOrTuple.nonce || infoOrTuple[0];
      if (!data || data.isEmpty) {
        return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];
      }
      const {
        feeFrozen,
        free,
        miscFrozen,
        reserved
      } = data;
      return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];
    }));
  }
  function account$1(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
    const nonDefaultBalances = balanceInstances && (balanceInstances.length !== 1 || balanceInstances[0] !== 'balances');
    return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => {
      var _api$query$system, _api$query$balances, _api$query$balances2;
      return accountId ? combineLatest([of(accountId), nonDefaultBalances ? queryBalancesAccount(api, accountId, balanceInstances) : util.isFunction((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) ? querySystemAccount(api, accountId) : util.isFunction((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryBalancesAccount(api, accountId) : util.isFunction((_api$query$balances2 = api.query.balances) === null || _api$query$balances2 === void 0 ? void 0 : _api$query$balances2.freeBalance) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]]);
    }), map(result => calcBalances(api, result))));
  }

  function votingBalances(instanceId, api) {
    return memo(instanceId, addresses => !addresses || !addresses.length ? of([]) : combineLatest(addresses.map(accountId => api.derive.balances.account(accountId))));
  }

  const votingBalance = all;

  const balances = /*#__PURE__*/Object.freeze({
    __proto__: null,
    all: all,
    votingBalance: votingBalance,
    account: account$1,
    votingBalances: votingBalances
  });

  function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter(proposal => bountyProposalCalls.find(bountyCall => proposal.proposal && bountyCall.is(proposal.proposal)));
  }

  function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties = [];
    maybeBounties.forEach((bounty, index) => {
      if (bounty.isSome) {
        bounties.push({
          bounty: bounty.unwrap(),
          description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
          index: ids[index],
          proposals: bountyProposals.filter(bountyProposal => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
        });
      }
    });
    return bounties;
  }
  function bounties$1(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, () => bountyBase.bounties ? combineLatest([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : of(0)]).pipe(switchMap(() => combineLatest([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : of([])])), switchMap(([keys, proposals]) => {
      const ids = keys.map(({
        args: [id]
      }) => id);
      return combineLatest([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), of(ids), of(filterBountiesProposals(api, proposals))]);
    }), map(parseResult$2)) : of(parseResult$2([[], [], [], []])));
  }

  const bounties = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bounties: bounties$1
  });

  function createBlockNumberDerive(fn) {
    return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(unwrapBlockNumber)));
  }
  function getAuthorDetails(header, queryAt) {
    if (queryAt.authorMapping && queryAt.authorMapping.mappingWithDeposit) {
      const mapId = header.digest.logs[0] && (header.digest.logs[0].isConsensus && header.digest.logs[0].asConsensus[1] || header.digest.logs[0].isPreRuntime && header.digest.logs[0].asPreRuntime[1]);
      if (mapId) {
        return combineLatest([of(header), queryAt.session ? queryAt.session.validators() : of(null), queryAt.authorMapping.mappingWithDeposit(mapId).pipe(map(opt => opt.unwrapOr({
          account: null
        }).account))]);
      }
    }
    return combineLatest([of(header), queryAt.session ? queryAt.session.validators() : of(null), of(null)]);
  }

  const bestNumber = createBlockNumberDerive(api => api.rpc.chain.subscribeNewHeads());

  const bestNumberFinalized = createBlockNumberDerive(api => api.rpc.chain.subscribeFinalizedHeads());

  function bestNumberLag(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.derive.chain.bestNumber(), api.derive.chain.bestNumberFinalized()]).pipe(map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
  }

  function extractAuthor(digest, sessionValidators = []) {
    const [citem] = digest.logs.filter(e => e.isConsensus);
    const [pitem] = digest.logs.filter(e => e.isPreRuntime);
    const [sitem] = digest.logs.filter(e => e.isSeal);
    let accountId;
    try {
      if (pitem) {
        const [engine, data] = pitem.asPreRuntime;
        accountId = engine.extractAuthor(data, sessionValidators);
      }
      if (!accountId && citem) {
        const [engine, data] = citem.asConsensus;
        accountId = engine.extractAuthor(data, sessionValidators);
      }
      if (!accountId && sitem) {
        const [engine, data] = sitem.asSeal;
        accountId = engine.extractAuthor(data, sessionValidators);
      }
    } catch {
    }
    return accountId;
  }

  function createHeaderExtended(registry, header, validators, author) {
    const HeaderBase = registry.createClass('Header');
    class Implementation extends HeaderBase {
      #author;
      constructor(registry, header, validators, author) {
        super(registry, header);
        this.#author = author || extractAuthor(this.digest, validators || []);
        this.createdAtHash = header === null || header === void 0 ? void 0 : header.createdAtHash;
      }
      get author() {
        return this.#author;
      }
    }
    return new Implementation(registry, header, validators, author);
  }

  function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
      let dispatchError;
      let dispatchInfo;
      const events = records.filter(({
        phase
      }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({
        event
      }) => {
        if (event.section === 'system') {
          if (event.method === 'ExtrinsicSuccess') {
            dispatchInfo = event.data[0];
          } else if (event.method === 'ExtrinsicFailed') {
            dispatchError = event.data[0];
            dispatchInfo = event.data[1];
          }
        }
        return event;
      });
      return {
        dispatchError,
        dispatchInfo,
        events,
        extrinsic
      };
    });
  }
  function createSignedBlockExtended(registry, block, events, validators, author) {
    const SignedBlockBase = registry.createClass('SignedBlock');
    class Implementation extends SignedBlockBase {
      #author;
      #events;
      #extrinsics;
      constructor(registry, block, events, validators, author) {
        super(registry, block);
        this.#author = author || extractAuthor(this.block.header.digest, validators || []);
        this.#events = events || [];
        this.#extrinsics = mapExtrinsics(this.block.extrinsics, this.#events);
        this.createdAtHash = block === null || block === void 0 ? void 0 : block.createdAtHash;
      }
      get author() {
        return this.#author;
      }
      get events() {
        return this.#events;
      }
      get extrinsics() {
        return this.#extrinsics;
      }
    }
    return new Implementation(registry, block, events, validators, author);
  }

  function getHeader(instanceId, api) {
    return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getHeader(blockHash), api.queryAt(blockHash)]).pipe(switchMap(([header, queryAt]) => getAuthorDetails(header, queryAt)), map(([header, validators, author]) => createHeaderExtended((validators || header).registry, header, validators, author))));
  }

  function getBlock(instanceId, api) {
    return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash)]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([of(signedBlock), queryAt.system.events(), getAuthorDetails(signedBlock.block.header, queryAt)])), map(([signedBlock, events, [, validators, author]]) => createSignedBlockExtended(events.registry, signedBlock, events, validators, author))));
  }

  function getBlockByNumber(instanceId, api) {
    return memo(instanceId, blockNumber => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap(h => api.derive.chain.getBlock(h))));
  }

  function _getHeaderRange(instanceId, api) {
    return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap(header => header.parentHash.eq(endHash) ? of([header, ...prev]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
  }
  function subscribeFinalizedHeads(instanceId, api) {
    return memo(instanceId, () => {
      let prevHash = null;
      return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap(header => {
        const endHash = prevHash;
        const startHash = header.parentHash;
        prevHash = header.createdAtHash = header.hash;
        return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap(headers => from(headers)));
      }));
    });
  }

  function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap(header => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
  }

  function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap(header => combineLatest([of(header), api.queryAt(header.hash)])), switchMap(([header, queryAt]) => getAuthorDetails(header, queryAt)), map(([header, validators, author]) => {
      header.createdAtHash = header.hash;
      return createHeaderExtended(header.registry, header, validators, author);
    })));
  }

  const chain = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bestNumber: bestNumber,
    bestNumberFinalized: bestNumberFinalized,
    bestNumberLag: bestNumberLag,
    getHeader: getHeader,
    getBlock: getBlock,
    getBlockByNumber: getBlockByNumber,
    _getHeaderRange: _getHeaderRange,
    subscribeFinalizedHeads: subscribeFinalizedHeads,
    subscribeNewBlocks: subscribeNewBlocks,
    subscribeNewHeads: subscribeNewHeads
  });

  function queryConstants(api) {
    return of([
    api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'),
    api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);
  }
  function fees(instanceId, api) {
    return memo(instanceId, () => {
      return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
        callBaseFee,
        contractFee,
        creationFee,
        rentByteFee,
        rentDepositOffset,
        surchargeReward,
        tombstoneDeposit,
        transactionBaseFee,
        transactionByteFee,
        transferFee
      })));
    });
  }

  const contracts = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fees: fees
  });

  function isVoter(value) {
    return !Array.isArray(value);
  }
  function retrieveStakeOf(elections) {
    return elections.stakeOf.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, stake]) => [accountId, stake])));
  }
  function retrieveVoteOf(elections) {
    return elections.votesOf.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, votes]) => [accountId, votes])));
  }
  function retrievePrev(api, elections) {
    return combineLatest([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe(map(([stakes, votes]) => {
      const result = [];
      votes.forEach(([voter, votes]) => {
        result.push([voter, {
          stake: api.registry.createType('Balance'),
          votes
        }]);
      });
      stakes.forEach(([staker, stake]) => {
        const entry = result.find(([voter]) => voter.eq(staker));
        if (entry) {
          entry[1].stake = stake;
        } else {
          result.push([staker, {
            stake,
            votes: []
          }]);
        }
      });
      return result;
    }));
  }
  function retrieveCurrent(elections) {
    return elections.voting.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, value]) => [accountId, isVoter(value) ? {
      stake: value.stake,
      votes: value.votes
    } : {
      stake: value[0],
      votes: value[1]
    }])));
  }
  function votes(instanceId, api) {
    const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return memo(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
  }

  function votesOf(instanceId, api) {
    return memo(instanceId, accountId => api.derive.council.votes().pipe(map(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {
      stake: api.registry.createType('Balance'),
      votes: []
    }])[1])));
  }

  const members$3 = members$5('council');
  const hasProposals$2 = hasProposals$4('council');
  const proposal$2 = proposal$4('council');
  const proposalCount$2 = proposalCount$4('council');
  const proposalHashes$2 = proposalHashes$4('council');
  const proposals$4 = proposals$6('council');
  const prime$2 = prime$4('council');

  const council = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members$3,
    hasProposals: hasProposals$2,
    proposal: proposal$2,
    proposalCount: proposalCount$2,
    proposalHashes: proposalHashes$2,
    proposals: proposals$4,
    prime: prime$2,
    votes: votes,
    votesOf: votesOf
  });

  function createChildKey(info) {
    return util.u8aToHex(util.u8aConcat(':child_storage:default:', utilCrypto.blake2AsU8a(util.u8aConcat('crowdloan', (info.fundIndex || info.trieIndex).toU8a()))));
  }
  function childKey(instanceId, api) {
    return memo(instanceId, paraId => api.query.crowdloan.funds(paraId).pipe(map(optInfo => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
  }

  function extractContributed(paraId, events) {
    var _events$createdAtHash;
    const added = [];
    const removed = [];
    return events.filter(({
      event: {
        data: [, eventParaId],
        method,
        section
      }
    }) => section === 'crowdloan' && ['Contributed', 'Withdrew'].includes(method) && eventParaId.eq(paraId)).reduce((result, {
      event: {
        data: [accountId],
        method
      }
    }) => {
      if (method === 'Contributed') {
        result.added.push(accountId.toHex());
      } else {
        result.removed.push(accountId.toHex());
      }
      return result;
    }, {
      added,
      blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
      removed
    });
  }

  const PAGE_SIZE_K$1 = 1000;
  function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe(switchMap(events => {
      const changes = extractContributed(paraId, events);
      if (changes.added.length || changes.removed.length) {
        var _events$createdAtHash;
        added = added.concat(...changes.added);
        removed = removed.concat(...changes.removed);
        return of({
          added,
          addedDelta: changes.added,
          blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
          removed,
          removedDelta: changes.removed
        });
      }
      return EMPTY;
    }), startWith({
      added,
      addedDelta: [],
      blockHash: '-',
      removed,
      removedDelta: []
    }));
  }
  function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe(switchMap(events => {
      var _events$createdAtHash2;
      const items = events.filter(({
        event: {
          data: [eventParaId],
          method,
          section
        }
      }) => section === 'crowdloan' && ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) && eventParaId.eq(paraId));
      return items.length ? of(((_events$createdAtHash2 = events.createdAtHash) === null || _events$createdAtHash2 === void 0 ? void 0 : _events$createdAtHash2.toHex()) || '-') : EMPTY;
    }), startWith('-'));
  }
  function _getKeysPaged(api, childKey) {
    const subject = new BehaviorSubject(undefined);
    return subject.pipe(switchMap(startKey => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K$1, startKey)), tap(keys => {
      util.nextTick(() => {
        keys.length === PAGE_SIZE_K$1 ? subject.next(keys[PAGE_SIZE_K$1 - 1].toHex()) : subject.complete();
      });
    }), toArray(),
    map(keyArr => util.arrayFlatten(keyArr)));
  }
  function _getAll(api, paraId, childKey) {
    return _eventTriggerAll(api, paraId).pipe(switchMap(() => util.isFunction(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey) : api.rpc.childstate.getKeys(childKey, '0x')), map(keys => keys.map(k => k.toHex())));
  }
  function _contributions$1(api, paraId, childKey) {
    return combineLatest([_getAll(api, paraId, childKey), _getUpdates(api, paraId)]).pipe(map(([keys, {
      added,
      blockHash,
      removed
    }]) => {
      const contributorsMap = {};
      keys.forEach(k => {
        contributorsMap[k] = true;
      });
      added.forEach(k => {
        contributorsMap[k] = true;
      });
      removed.forEach(k => {
        delete contributorsMap[k];
      });
      return {
        blockHash,
        contributorsHex: Object.keys(contributorsMap)
      };
    }));
  }
  function contributions(instanceId, api) {
    return memo(instanceId, paraId => api.derive.crowdloan.childKey(paraId).pipe(switchMap(childKey => childKey ? _contributions$1(api, paraId, childKey) : of({
      blockHash: '-',
      contributorsHex: []
    }))));
  }

  function _getValues(api, childKey, keys) {
    return combineLatest(keys.map(k => api.rpc.childstate.getStorage(childKey, k))).pipe(map(values => values.map(v => api.registry.createType('Option<StorageData>', v)).map(o => o.isSome ? api.registry.createType('Balance', o.unwrap()) : api.registry.createType('Balance')).reduce((all, b, index) => util.objectSpread(all, {
      [keys[index]]: b
    }), {})));
  }
  function _watchOwnChanges(api, paraId, childkey, keys) {
    return api.query.system.events().pipe(switchMap(events => {
      const changes = extractContributed(paraId, events);
      const filtered = keys.filter(k => changes.added.includes(k) || changes.removed.includes(k));
      return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
    }), startWith({}));
  }
  function _contributions(api, paraId, childKey, keys) {
    return combineLatest([_getValues(api, childKey, keys), _watchOwnChanges(api, paraId, childKey, keys)]).pipe(map(([all, latest]) => util.objectSpread({}, all, latest)));
  }
  function ownContributions(instanceId, api) {
    return memo(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe(switchMap(childKey => childKey && keys.length ? _contributions(api, paraId, childKey, keys) : of({}))));
  }

  const crowdloan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    childKey: childKey,
    contributions: contributions,
    ownContributions: ownContributions
  });

  const DEMOCRACY_ID = util.stringToHex('democrac');
  function isMaybeHashed(call) {
    return call instanceof types.Enum;
  }
  function queryQueue(api) {
    return api.query.democracy.dispatchQueue().pipe(switchMap(dispatches => combineLatest([of(dispatches), api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
      at,
      image: images[dispatchIndex],
      imageHash,
      index
    }))));
  }
  function schedulerEntries(api) {
    return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap(keys => {
      const blockNumbers = keys.map(({
        args: [blockNumber]
      }) => blockNumber);
      return blockNumbers.length ? combineLatest([of(blockNumbers),
      api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))]) : of([[], []]);
    }));
  }
  function queryScheduler(api) {
    return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
      const result = [];
      blockNumbers.forEach((at, index) => {
        (agendas[index] || []).filter(o => o.isSome).forEach(o => {
          const scheduled = o.unwrap();
          if (scheduled.maybeId.isSome) {
            const id = scheduled.maybeId.unwrap().toHex();
            if (id.startsWith(DEMOCRACY_ID)) {
              const imageHash = isMaybeHashed(scheduled.call) ? scheduled.call.isHash ? scheduled.call.asHash : scheduled.call.asValue.args[0] : scheduled.call.args[0];
              result.push({
                at,
                imageHash,
                index: api.registry.createType('(u64, ReferendumIndex)', id)[1]
              });
            }
          }
        });
      });
      return combineLatest([of(result), result.length ? api.derive.democracy.preimages(result.map(({
        imageHash
      }) => imageHash)) : of([])]);
    }), map(([infos, images]) => infos.map((info, index) => util.objectSpread({
      image: images[index]
    }, info))));
  }
  function dispatchQueue(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$scheduler;
      return util.isFunction((_api$query$scheduler = api.query.scheduler) === null || _api$query$scheduler === void 0 ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : of([]);
    });
  }

  const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
  function parseEnd(api, vote, {
    approved,
    end
  }) {
    return [end, approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : util.BN_ZERO];
  }
  function parseLock(api, [referendumId, accountVote], referendum) {
    const {
      balance,
      vote
    } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [util.BN_ZERO, util.BN_ZERO];
    return {
      balance,
      isDelegated: false,
      isFinished: referendum.isFinished,
      referendumEnd,
      referendumId,
      unlockAt,
      vote
    };
  }
  function delegateLocks(api, {
    balance,
    conviction,
    target
  }) {
    return api.derive.democracy.locks(target).pipe(map(available => available.map(({
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt,
      vote
    }) => ({
      balance,
      isDelegated: true,
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
      vote: api.registry.createType('Vote', {
        aye: vote.isAye,
        conviction
      })
    }))));
  }
  function directLocks(api, {
    votes
  }) {
    if (!votes.length) {
      return of([]);
    }
    return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(map(referendums => votes.map((vote, index) => [vote, referendums[index].unwrapOr(null)]).filter(item => !!item[1] && util.isUndefined(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
  }
  function locks(instanceId, api) {
    return memo(instanceId, accountId => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe(switchMap(voting => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
  }

  function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
      return of(null);
    }
    const [imageHash, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(imageHash).pipe(map(image => ({
      image,
      imageHash,
      threshold
    })));
  }
  function nextExternal(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy;
      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap(nextOpt => withImage(api, nextOpt))) : of(null);
    });
  }

  function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy.dispatchQueue;
  }
  function constructProposal(api, [bytes, proposer, balance, at]) {
    let proposal;
    try {
      proposal = api.registry.createType('Proposal', bytes.toU8a(true));
    } catch (error) {
      console.error(error);
    }
    return {
      at,
      balance,
      proposal,
      proposer
    };
  }
  function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
      return;
    }
    if (isDemocracyPreimage(api, imageOpt)) {
      const status = imageOpt.unwrap();
      if (status.isMissing) {
        return;
      }
      const {
        data,
        deposit,
        provider,
        since
      } = status.asAvailable;
      return constructProposal(api, [data, provider, deposit, since]);
    }
    return constructProposal(api, imageOpt.unwrap());
  }
  function getDemocracyImages(api, hashes) {
    return api.query.democracy.preimages.multi(hashes).pipe(map(images => images.map(imageOpt => parseDemocracy(api, imageOpt))));
  }
  function preimages(instanceId, api) {
    return memo(instanceId, hashes => hashes.length ? util.isFunction(api.query.democracy.preimages) ? getDemocracyImages(api, hashes) : of([]) : of([]));
  }
  const preimage = firstMemo((api, hash) => api.derive.democracy.preimages([hash]));

  function isNewDepositors(depositors) {
    return util.isFunction(depositors[1].mul);
  }
  function parse$3([proposals, images, optDepositors]) {
    return proposals.filter(([,, proposer], index) => {
      var _optDepositors$index;
      return !!((_optDepositors$index = optDepositors[index]) !== null && _optDepositors$index !== void 0 && _optDepositors$index.isSome) && !proposer.isEmpty;
    }).map(([index, imageHash, proposer], proposalIndex) => {
      const depositors = optDepositors[proposalIndex].unwrap();
      return util.objectSpread({
        image: images[proposalIndex],
        imageHash,
        index,
        proposer
      }, isNewDepositors(depositors) ? {
        balance: depositors[1],
        seconds: depositors[0]
      } : {
        balance: depositors[0],
        seconds: depositors[1]
      });
    });
  }
  function proposals$3(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy, _api$query$democracy2;
      return util.isFunction((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) && util.isFunction((_api$query$democracy2 = api.query.democracy) === null || _api$query$democracy2 === void 0 ? void 0 : _api$query$democracy2.preimages) ? api.query.democracy.publicProps().pipe(switchMap(proposals => proposals.length ? combineLatest([of(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))]) : of([[], [], []])), map(parse$3)) : of([]);
    });
  }

  function referendumIds(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy;
      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.lowestUnbaked ? api.queryMulti([api.query.democracy.lowestUnbaked, api.query.democracy.referendumCount]).pipe(map(([first, total]) => total.gt(first)
      ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i)) : [])) : of([]);
    });
  }

  function referendums(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap(referendums => referendums.length ? combineLatest([of(referendums), api.derive.democracy._referendumsVotes(referendums)]) : of([[], []])), map(([referendums, votes]) => referendums.map((referendum, index) => util.objectSpread({}, referendum, votes[index])))));
  }

  function referendumsActive(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
  }

  function referendumsFinished(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => api.query.democracy.referendumInfoOf.multi(ids)), map(infos => infos.map(o => o.unwrapOr(null)).filter(info => !!info && info.isFinished).map(info => info.asFinished))));
  }

  function isOldInfo(info) {
    return !!info.proposalHash;
  }
  function isCurrentStatus(status) {
    return !!status.tally;
  }
  function compareRationals(n1, d1, n2, d2) {
    while (true) {
      const q1 = n1.div(d1);
      const q2 = n2.div(d2);
      if (q1.lt(q2)) {
        return true;
      } else if (q2.lt(q1)) {
        return false;
      }
      const r1 = n1.mod(d1);
      const r2 = n2.mod(d2);
      if (r2.isZero()) {
        return false;
      } else if (r1.isZero()) {
        return true;
      }
      n1 = d2;
      n2 = d1;
      d1 = r2;
      d2 = r1;
    }
  }
  function calcPassingOther(threshold, sqrtElectorate, {
    votedAye,
    votedNay,
    votedTotal
  }) {
    const sqrtVoters = util.bnSqrt(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
  }
  function calcPassing(threshold, sqrtElectorate, state) {
    return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
  }
  function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
      const {
        balance,
        vote
      } = derived;
      const isDefault = vote.conviction.index === 0;
      const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
      if (vote.isAye) {
        state.allAye.push(derived);
        state.voteCountAye++;
        state.votedAye.iadd(counted);
      } else {
        state.allNay.push(derived);
        state.voteCountNay++;
        state.votedNay.iadd(counted);
      }
      state.voteCount++;
      state.votedTotal.iadd(counted);
      return state;
    }, {
      allAye: [],
      allNay: [],
      voteCount: 0,
      voteCountAye: 0,
      voteCountNay: 0,
      votedAye: new util.BN(0),
      votedNay: new util.BN(0),
      votedTotal: new util.BN(0)
    });
  }
  function calcVotesCurrent(tally, votes) {
    const allAye = [];
    const allNay = [];
    votes.forEach(derived => {
      if (derived.vote.isAye) {
        allAye.push(derived);
      } else {
        allNay.push(derived);
      }
    });
    return {
      allAye,
      allNay,
      voteCount: allAye.length + allNay.length,
      voteCountAye: allAye.length,
      voteCountNay: allNay.length,
      votedAye: tally.ayes,
      votedNay: tally.nays,
      votedTotal: tally.turnout
    };
  }
  function calcVotes(sqrtElectorate, referendum, votes) {
    const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
    return util.objectSpread({}, state, {
      isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
      votes
    });
  }
  function getStatus(info) {
    if (info.isNone) {
      return null;
    }
    const unwrapped = info.unwrap();
    return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing
    : null;
  }

  function votesPrev(api, referendumId) {
    return api.query.democracy.votersFor(referendumId).pipe(switchMap(votersFor => combineLatest([of(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : of([]), api.derive.balances.votingBalances(votersFor)])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
      accountId,
      balance: balances[index].votingBalance || api.registry.createType('Balance'),
      isDelegating: false,
      vote: votes[index] || api.registry.createType('Vote')
    }))));
  }
  function extractVotes(mapped, referendumId) {
    return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) =>
    votes.reduce((result, [, vote]) => {
      if (vote.isStandard) {
        result.push(util.objectSpread({
          accountId,
          isDelegating: false
        }, vote.asStandard));
      }
      return result;
    }, result), []);
  }
  function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe(map(allVoting => {
      const mapped = allVoting.map(([{
        args: [accountId]
      }, voting]) => [accountId, voting]);
      const votes = extractVotes(mapped, referendumId);
      const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]);
      delegations.forEach(([accountId, {
        balance,
        conviction,
        target
      }]) => {
        const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
        const to = votes.find(({
          accountId
        }) => accountId.eq(toDelegator ? toDelegator[0] : target));
        if (to) {
          votes.push({
            accountId,
            balance,
            isDelegating: true,
            vote: api.registry.createType('Vote', {
              aye: to.vote.isAye,
              conviction
            })
          });
        }
      });
      return votes;
    }));
  }
  function _referendumVotes(instanceId, api) {
    return memo(instanceId, referendum => combineLatest([api.derive.democracy.sqrtElectorate(), util.isFunction(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));
  }
  function _referendumsVotes(instanceId, api) {
    return memo(instanceId, referendums => referendums.length ? combineLatest(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : of([]));
  }
  function _referendumInfo(instanceId, api) {
    return memo(instanceId, (index, info) => {
      const status = getStatus(info);
      return status ? api.derive.democracy.preimage(status.proposalHash).pipe(map(image => ({
        image,
        imageHash: status.proposalHash,
        index: api.registry.createType('ReferendumIndex', index),
        status
      }))) : of(null);
    });
  }
  function referendumsInfo(instanceId, api) {
    return memo(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap(infos => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map(infos => infos.filter(referendum => !!referendum))) : of([]));
  }

  function sqrtElectorate(instanceId, api) {
    return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(util.bnSqrt)));
  }

  const democracy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    dispatchQueue: dispatchQueue,
    locks: locks,
    nextExternal: nextExternal,
    preimages: preimages,
    preimage: preimage,
    proposals: proposals$3,
    referendumIds: referendumIds,
    referendums: referendums,
    referendumsActive: referendumsActive,
    referendumsFinished: referendumsFinished,
    _referendumVotes: _referendumVotes,
    _referendumsVotes: _referendumsVotes,
    _referendumInfo: _referendumInfo,
    referendumsInfo: referendumsInfo,
    sqrtElectorate: sqrtElectorate
  });

  function isSeatHolder(value) {
    return !Array.isArray(value);
  }
  function isCandidateTuple(value) {
    return Array.isArray(value);
  }
  function getAccountTuple(value) {
    return isSeatHolder(value) ? [value.who, value.stake] : value;
  }
  function getCandidate(value) {
    return isCandidateTuple(value) ? value[0] : value;
  }
  function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
  }
  function getConstants(api, elections) {
    return elections ? {
      candidacyBond: api.consts[elections].candidacyBond,
      desiredRunnersUp: api.consts[elections].desiredRunnersUp,
      desiredSeats: api.consts[elections].desiredMembers,
      termDuration: api.consts[elections].termDuration,
      votingBond: api.consts[elections].votingBond
    } : {};
  }
  function getModules(api) {
    const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, 'council') || ['council'];
    const elections = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : api.query.elections ? 'elections' : null;
    return [council, elections];
  }
  function queryAll(api, council, elections) {
    return api.queryMulti([api.query[council].members, api.query[elections].candidates, api.query[elections].members, api.query[elections].runnersUp]);
  }
  function queryCouncil(api, council) {
    return combineLatest([api.query[council].members(), of([]), of([]), of([])]);
  }
  function info$3(instanceId, api) {
    return memo(instanceId, () => {
      const [council, elections] = getModules(api);
      return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe(map(([councilMembers, candidates, members, runnersUp]) => util.objectSpread({}, getConstants(api, elections), {
        candidateCount: api.registry.createType('u32', candidates.length),
        candidates: candidates.map(getCandidate),
        members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(a => [a, api.registry.createType('Balance')]),
        runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
      })));
    });
  }

  const elections = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$3
  });

  function mapResult([result, validators, heartbeats, numBlocks]) {
    validators.forEach((validator, index) => {
      const validatorId = validator.toString();
      const blockCount = numBlocks[index];
      const hasMessage = !heartbeats[index].isEmpty;
      const prev = result[validatorId];
      if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
        result[validatorId] = {
          blockCount,
          hasMessage,
          isOnline: hasMessage || blockCount.gt(util.BN_ZERO)
        };
      }
    });
    return result;
  }
  function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$imOnline;
      return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({
        currentIndex,
        validators
      }) => combineLatest([of({}), of(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))])), map(mapResult)) : of({});
    });
  }

  const imOnline = /*#__PURE__*/Object.freeze({
    __proto__: null,
    receivedHeartbeats: receivedHeartbeats
  });

  const members$2 = members$5('membership');
  const hasProposals$1 = hasProposals$4('membership');
  const proposal$1 = proposal$4('membership');
  const proposalCount$1 = proposalCount$4('membership');
  const proposalHashes$1 = proposalHashes$4('membership');
  const proposals$2 = proposals$6('membership');
  const prime$1 = prime$4('membership');

  const membership = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members$2,
    hasProposals: hasProposals$1,
    proposal: proposal$1,
    proposalCount: proposalCount$1,
    proposalHashes: proposalHashes$1,
    proposals: proposals$2,
    prime: prime$1
  });

  function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome ? didUpdate.unwrap().some(paraId => paraId.eq(id)) : false;
  }

  function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);
    if (found && found[1].isSome) {
      const [collatorId, retriable] = found[1].unwrap();
      return util.objectSpread({
        collatorId
      }, retriable.isWithRetries ? {
        isRetriable: true,
        retries: retriable.asWithRetries.toNumber()
      } : {
        isRetriable: false,
        retries: 0
      });
    }
    return null;
  }
  function parseCollators(id, collatorQueue) {
    return collatorQueue.map(queue => {
      const found = queue.find(([paraId]) => paraId === id);
      return found ? found[1] : null;
    });
  }
  function parse$2(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
    if (info.isNone) {
      return null;
    }
    return {
      active: parseActive(id, active),
      didUpdate: didUpdateToBool(didUpdate, id),
      heads,
      id,
      info: util.objectSpread({
        id
      }, info.unwrap()),
      pendingSwapId: pendingSwap.unwrapOr(null),
      relayDispatchQueue,
      retryCollators: parseCollators(id, retryQueue),
      selectedCollators: parseCollators(id, selectedThreads)
    };
  }
  function info$2(instanceId, api) {
    return memo(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe(map(result => parse$2(api.registry.createType('ParaId', id), result))) : of(null));
  }

  function parse$1([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
    return ids.map((id, index) => ({
      didUpdate: didUpdateToBool(didUpdate, id),
      id,
      info: util.objectSpread({
        id
      }, infos[index].unwrapOr(null)),
      pendingSwapId: pendingSwaps[index].unwrapOr(null),
      relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
    }));
  }
  function overview$1(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$registrar;
      return (_api$query$registrar = api.query.registrar) !== null && _api$query$registrar !== void 0 && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe(switchMap(paraIds => combineLatest([of(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), map(parse$1)) : of([]);
    });
  }

  const parachains = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$2,
    overview: overview$1
  });

  function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
      activeEra,
      activeEraStart,
      currentEra,
      currentIndex,
      validatorCount
    };
  }
  function queryStaking(api) {
    return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
      const {
        index,
        start
      } = activeOpt.unwrapOrDefault();
      return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);
    }));
  }
  function querySession(api) {
    return api.query.session.currentIndex().pipe(map(currentIndex => parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));
  }
  function empty(api) {
    return of(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));
  }
  function indexes(instanceId, api) {
    return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
  }

  function info$1(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(map(indexes => {
      var _api$consts, _api$consts$babe, _api$consts2, _api$consts2$staking;
      const sessionLength = ((_api$consts = api.consts) === null || _api$consts === void 0 ? void 0 : (_api$consts$babe = _api$consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.epochDuration) || api.registry.createType('u64', 1);
      const sessionsPerEra = ((_api$consts2 = api.consts) === null || _api$consts2 === void 0 ? void 0 : (_api$consts2$staking = _api$consts2.staking) === null || _api$consts2$staking === void 0 ? void 0 : _api$consts2$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1);
      return util.objectSpread({
        eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
        isEpoch: !!api.query.babe,
        sessionLength,
        sessionsPerEra
      }, indexes);
    })));
  }

  function withProgressField(field) {
    return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map(info => info[field])));
  }
  function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress = currentSlot.sub(epochStartSlot);
    const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
    return util.objectSpread({
      eraProgress: api.registry.createType('BlockNumber', eraProgress),
      sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
    }, info);
  }
  function queryAura(api) {
    return api.derive.session.info().pipe(map(info => util.objectSpread({
      eraProgress: api.registry.createType('BlockNumber'),
      sessionProgress: api.registry.createType('BlockNumber')
    }, info)));
  }
  function queryBabe(api) {
    return api.derive.session.info().pipe(switchMap(info => {
      var _api$query$staking;
      return combineLatest([of(info),
      (_api$query$staking = api.query.staking) !== null && _api$query$staking !== void 0 && _api$query$staking.erasStartSessionIndex ? api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot, [api.query.staking.erasStartSessionIndex, info.activeEra]]) : api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot])]);
    }), map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]]));
  }
  function progress(instanceId, api) {
    return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map(([info, slots]) => createDerive(api, info, slots))) : queryAura(api));
  }
  const eraLength = withProgressField('eraLength');
  const eraProgress = withProgressField('eraProgress');
  const sessionProgress = withProgressField('sessionProgress');

  const session = /*#__PURE__*/Object.freeze({
    __proto__: null,
    indexes: indexes,
    info: info$1,
    progress: progress,
    eraLength: eraLength,
    eraProgress: eraProgress,
    sessionProgress: sessionProgress
  });

  function candidates(instanceId, api) {
    return memo(instanceId, () => api.query.society.candidates().pipe(switchMap(candidates => combineLatest([of(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({
      who
    }) => who))])), map(([candidates, suspended]) => candidates.map(({
      kind,
      value,
      who
    }, index) => ({
      accountId: who,
      isSuspended: suspended[index].isSome,
      kind,
      value
    })))));
  }

  function info(instanceId, api) {
    return memo(instanceId, () => api.queryMulti([api.query.society.bids, api.query.society.defender, api.query.society.founder, api.query.society.head, api.query.society.maxMembers, api.query.society.pot]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
      bids,
      defender: defender.unwrapOr(undefined),
      founder: founder.unwrapOr(undefined),
      hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
      head: head.unwrapOr(undefined),
      maxMembers,
      pot
    }))));
  }

  function member(instanceId, api) {
    return memo(instanceId, accountId => api.derive.society._members([accountId]).pipe(map(([result]) => result)));
  }

  function _members(instanceId, api) {
    return memo(instanceId, accountIds => combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
      accountId,
      isDefenderVoter: defenderVotes[index].isSome,
      isSuspended: suspended[index].isTrue,
      payouts: payouts[index],
      strikes: strikes[index],
      vote: defenderVotes[index].unwrapOr(undefined),
      vouching: vouching[index].unwrapOr(undefined)
    })))));
  }
  function members$1(instanceId, api) {
    return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));
  }

  const society = /*#__PURE__*/Object.freeze({
    __proto__: null,
    candidates: candidates,
    info: info,
    member: member,
    _members: _members,
    members: members$1
  });

  const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
  };
  function groupByEra(list) {
    return list.reduce((map, {
      era,
      value
    }) => {
      const key = era.toString();
      map[key] = (map[key] || util.BN_ZERO).add(value.unwrap());
      return map;
    }, {});
  }
  function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({
      era
    }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
      remainingEras: new util.BN(eraString).isub(sessionInfo.activeEra),
      value: api.registry.createType('Balance', value)
    }));
    return results.length ? results : undefined;
  }
  function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {
      era,
      value
    }) => {
      return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;
    }, new util.BN(0)));
  }
  function parseResult$1(api, sessionInfo, keys, query) {
    return util.objectSpread({}, keys, query, {
      redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
      unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
    });
  }
  function accounts(instanceId, api) {
    return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, opts)]).pipe(map(([keys, queries]) => queries.map((q, index) => parseResult$1(api, sessionInfo, keys[index], q)))))));
  }
  const account = firstMemo((api, accountId, opts) => api.derive.staking.accounts([accountId], opts));

  function currentPoints(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({
      activeEra
    }) => api.query.staking.erasRewardPoints(activeEra))));
  }

  function getEraCache(CACHE_KEY, era, withActive) {
    const cacheKey = `${CACHE_KEY}-${era.toString()}`;
    return [cacheKey, withActive ? undefined : deriveCache.get(cacheKey)];
  }
  function getEraMultiCache(CACHE_KEY, eras, withActive) {
    const cached = withActive ? [] : eras.map(e => deriveCache.get(`${CACHE_KEY}-${e.toString()}`)).filter(v => !!v);
    return cached;
  }
  function setEraCache(cacheKey, withActive, value) {
    !withActive && deriveCache.set(cacheKey, value);
    return value;
  }
  function setEraMultiCache(CACHE_KEY, withActive, values) {
    !withActive && values.forEach(v => deriveCache.set(`${CACHE_KEY}-${v.era.toString()}`, v));
    return values;
  }
  function filterCachedEras(eras, cached, query) {
    return eras.map(e => cached.find(({
      era
    }) => e.eq(era)) || query.find(({
      era
    }) => e.eq(era)));
  }

  const ERA_CHUNK_SIZE = 14;
  function chunkEras(eras, fn) {
    const chunked = util.arrayChunk(eras, ERA_CHUNK_SIZE);
    let index = 0;
    const subject = new BehaviorSubject(chunked[index]);
    return subject.pipe(switchMap(fn), tap(() => {
      util.nextTick(() => {
        index++;
        index === chunked.length ? subject.complete() : subject.next(chunked[index]);
      });
    }), toArray(), map(util.arrayFlatten));
  }
  function filterEras(eras, list) {
    return eras.filter(e => !list.some(({
      era
    }) => e.eq(era)));
  }
  function erasHistoricApply(fn) {
    return (instanceId, api) =>
    memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](e, withActive))));
  }
  function erasHistoricApplyAccount(fn) {
    return (instanceId, api) =>
    memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](accountId, e, withActive))));
  }
  function singleEra(fn) {
    return (instanceId, api) =>
    memo(instanceId, era => api.derive.staking[fn](era, true));
  }
  function combineEras(fn) {
    return (instanceId, api) =>
    memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, eras => combineLatest(eras.map(e => api.derive.staking[fn](e, withActive)))));
  }

  const CACHE_KEY$4 = 'eraExposure';
  function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure]) => {
      const validatorId = key.args[1].toString();
      validators[validatorId] = exposure;
      exposure.others.forEach(({
        who
      }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({
          validatorId,
          validatorIndex
        });
      });
    });
    return {
      era,
      nominators,
      validators
    };
  }
  function _eraExposure(instanceId, api) {
    return memo(instanceId, (era, withActive = false) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY$4, era, withActive);
      return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapStakers(era, r))));
    });
  }
  const eraExposure = singleEra('_eraExposure');
  const _erasExposure = combineEras('_eraExposure');
  const erasExposure = erasHistoricApply('_erasExposure');

  function erasHistoric(instanceId, api) {
    return memo(instanceId, withActive => api.queryMulti([api.query.staking.activeEra, api.query.staking.historyDepth]).pipe(map(([activeEraOpt, historyDepth]) => {
      const result = [];
      const max = historyDepth.toNumber();
      const activeEra = activeEraOpt.unwrapOrDefault().index;
      let lastEra = activeEra;
      while (lastEra.gte(util.BN_ZERO) && result.length < max) {
        if (lastEra !== activeEra || withActive === true) {
          result.push(api.registry.createType('EraIndex', lastEra));
        }
        lastEra = lastEra.sub(util.BN_ONE);
      }
      return result.reverse();
    })));
  }

  const CACHE_KEY$3 = 'eraPoints';
  function mapValidators({
    individual
  }) {
    return [...individual.entries()].filter(([, points]) => points.gt(util.BN_ZERO)).reduce((result, [validatorId, points]) => {
      result[validatorId.toString()] = points;
      return result;
    }, {});
  }
  function mapPoints(eras, points) {
    return eras.map((era, index) => ({
      era,
      eraPoints: points[index].total,
      validators: mapValidators(points[index])
    }));
  }
  function _erasPoints(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }
      const cached = getEraMultiCache(CACHE_KEY$3, eras, withActive);
      const remaining = filterEras(eras, cached);
      return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map(p => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$3, withActive, mapPoints(remaining, p)))));
    });
  }
  const erasPoints = erasHistoricApply('_erasPoints');

  const CACHE_KEY$2 = 'eraPrefs';
  function mapPrefs(era, all) {
    const validators = {};
    all.forEach(([key, prefs]) => {
      validators[key.args[1].toString()] = prefs;
    });
    return {
      era,
      validators
    };
  }
  function _eraPrefs(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY$2, era, withActive);
      return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
    });
  }
  const eraPrefs = singleEra('_eraPrefs');
  const _erasPrefs = combineEras('_eraPrefs');
  const erasPrefs = erasHistoricApply('_erasPrefs');

  const CACHE_KEY$1 = 'eraRewards';
  function mapRewards(eras, optRewards) {
    return eras.map((era, index) => ({
      era,
      eraReward: optRewards[index].unwrapOrDefault()
    }));
  }
  function _erasRewards(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }
      const cached = getEraMultiCache(CACHE_KEY$1, eras, withActive);
      const remaining = filterEras(eras, cached);
      if (!remaining.length) {
        return of(cached);
      }
      return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(r => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$1, withActive, mapRewards(remaining, r)))));
    });
  }
  const erasRewards = erasHistoricApply('_erasRewards');

  const CACHE_KEY = 'eraSlashes';
  function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators = {};
    noms.forEach(([key, optBalance]) => {
      nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
      validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return {
      era,
      nominators,
      validators
    };
  }
  function _eraSlashes(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
      return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
    });
  }
  const eraSlashes = singleEra('_eraSlashes');
  const _erasSlashes = combineEras('_eraSlashes');
  const erasSlashes = erasHistoricApply('_erasSlashes');

  const DEFAULT_FLAGS$1 = {
    withController: true,
    withExposure: true,
    withPrefs: true
  };
  function combineAccounts(nextElected, validators) {
    return util.arrayFlatten([nextElected, validators.filter(v => !nextElected.find(n => n.eq(v)))]);
  }
  function electedInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe(switchMap(({
      nextElected,
      validators
    }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(map(info => ({
      info,
      nextElected,
      validators
    }))))));
  }

  function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
      nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
      sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
    };
  }
  const keys = firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
  function keysMulti(instanceId, api) {
    return memo(instanceId, stashIds => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap(queuedKeys => {
      var _api$consts$session;
      return combineLatest([of(queuedKeys), (_api$consts$session = api.consts.session) !== null && _api$consts$session !== void 0 && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(s => [api.consts.session.dedupKeyPrefix, s])) : combineLatest(stashIds.map(s => api.query.session.nextKeys(s)))]);
    }), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
  }

  function overview(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.derive.session.indexes(), api.derive.staking.validators()]).pipe(map(([indexes, {
      nextElected,
      validators
    }]) => util.objectSpread({}, indexes, {
      nextElected,
      validators
    }))));
  }

  function _ownExposures(instanceId, api) {
    return memo(instanceId, (accountId, eras, _withActive) => eras.length ? combineLatest([combineLatest(eras.map(e => api.query.staking.erasStakersClipped(e, accountId))), combineLatest(eras.map(e => api.query.staking.erasStakers(e, accountId)))]).pipe(map(([clp, exp]) => eras.map((era, index) => ({
      clipped: clp[index],
      era,
      exposure: exp[index]
    })))) : of([]));
  }
  const ownExposure = firstMemo((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
  const ownExposures = erasHistoricApplyAccount('_ownExposures');

  function _ownSlashes(instanceId, api) {
    return memo(instanceId, (accountId, eras, _withActive) => eras.length ? combineLatest([combineLatest(eras.map(e => api.query.staking.validatorSlashInEra(e, accountId))), combineLatest(eras.map(e => api.query.staking.nominatorSlashInEra(e, accountId)))]).pipe(map(([vals, noms]) => eras.map((era, index) => ({
      era,
      total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
    })))) : of([]));
  }
  const ownSlash = firstMemo((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
  const ownSlashes = erasHistoricApplyAccount('_ownSlashes');

  function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
      accountId: stashId,
      controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
      exposure,
      nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
      rewardDestination,
      stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
      stashId,
      validatorPrefs
    };
  }
  function getLedgers(api, optIds, {
    withLedger = false
  }) {
    const ids = optIds.filter(o => withLedger && !!o && o.isSome).map(o => o.unwrap());
    const emptyLed = api.registry.createType('Option<StakingLedger>');
    return (ids.length ? combineLatest(ids.map(s => api.query.staking.ledger(s))) : of([])).pipe(map(optLedgers => {
      let offset = -1;
      return optIds.map(o => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
    }));
  }
  function getStashInfo(api, stashIds, activeEra, {
    withController,
    withDestination,
    withExposure,
    withLedger,
    withNominations,
    withPrefs
  }) {
    const emptyNoms = api.registry.createType('Option<Nominations>');
    const emptyRewa = api.registry.createType('RewardDestination');
    const emptyExpo = api.registry.createType('Exposure');
    const emptyPrefs = api.registry.createType('ValidatorPrefs');
    return combineLatest([withController || withLedger ? combineLatest(stashIds.map(s => api.query.staking.bonded(s))) : of(stashIds.map(() => null)), withNominations ? combineLatest(stashIds.map(s => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)), withDestination ? combineLatest(stashIds.map(s => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)), withPrefs ? combineLatest(stashIds.map(s => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)), withExposure ? combineLatest(stashIds.map(s => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))]);
  }
  function getBatch(api, activeEra, stashIds, flags) {
    return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
  }
  const query = firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
  function queryMulti(instanceId, api) {
    return memo(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe(switchMap(({
      activeEra
    }) => {
      const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));
      return getBatch(api, activeEra, stashIds, flags);
    })) : of([]));
  }

  function _stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => {
      const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());
      return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({
        era,
        nominators: allNominators,
        validators: allValidators
      }) => {
        const isValidator = !!allValidators[stakerId];
        const validators = {};
        const nominating = allNominators[stakerId] || [];
        if (isValidator) {
          validators[stakerId] = allValidators[stakerId];
        } else if (nominating) {
          nominating.forEach(({
            validatorId
          }) => {
            validators[validatorId] = allValidators[validatorId];
          });
        }
        return {
          era,
          isEmpty: !Object.keys(validators).length,
          isValidator,
          nominating,
          validators
        };
      }))));
    });
  }
  function stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
  }
  const stakerExposure = firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));

  function _stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
      const stakerId = api.registry.createType('AccountId', accountId).toString();
      return api.derive.staking._erasPoints(eras, withActive).pipe(map(points => points.map(({
        era,
        eraPoints,
        validators
      }) => ({
        era,
        eraPoints,
        points: validators[stakerId] || api.registry.createType('RewardPoint')
      }))));
    });
  }
  const stakerPoints = erasHistoricApplyAccount('_stakerPoints');

  function _stakerPrefs(instanceId, api) {
    return memo(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map(e => [e, accountId])).pipe(map(all => all.map((validatorPrefs, index) => ({
      era: eras[index],
      validatorPrefs
    })))));
  }
  const stakerPrefs = erasHistoricApplyAccount('_stakerPrefs');

  function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
    return exposures.map(({
      era,
      isEmpty,
      isValidator,
      nominating,
      validators: eraValidators
    }) => {
      const {
        eraPoints,
        validators: allValPoints
      } = erasPoints.find(p => p.era.eq(era)) || {
        eraPoints: util.BN_ZERO,
        validators: {}
      };
      const {
        eraReward
      } = erasRewards.find(r => r.era.eq(era)) || {
        eraReward: api.registry.createType('Balance')
      };
      const {
        validators: allValPrefs
      } = erasPrefs.find(p => p.era.eq(era)) || {
        validators: {}
      };
      const validators = {};
      const stakerId = stashId.toString();
      Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
        var _allValPrefs$validato, _exposure$total;
        const valPoints = allValPoints[validatorId] || util.BN_ZERO;
        const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || util.BN_ZERO;
        const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || util.BN_ZERO;
        let avail = util.BN_ZERO;
        let value;
        if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
          avail = eraReward.mul(valPoints).div(eraPoints);
          const valCut = valComm.mul(avail).div(util.BN_BILLION);
          let staked;
          if (validatorId === stakerId) {
            staked = exposure.own.unwrap();
          } else {
            const stakerExp = exposure.others.find(({
              who
            }) => who.eq(stakerId));
            staked = stakerExp ? stakerExp.value.unwrap() : util.BN_ZERO;
          }
          value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : util.BN_ZERO);
        }
        validators[validatorId] = {
          total: api.registry.createType('Balance', avail),
          value: api.registry.createType('Balance', value)
        };
      });
      return {
        era,
        eraReward,
        isEmpty,
        isValidator,
        nominating,
        validators
      };
    });
  }
  function allUniqValidators(rewards) {
    return rewards.reduce(([all, perStash], rewards) => {
      const uniq = [];
      perStash.push(uniq);
      rewards.forEach(({
        validators
      }) => Object.keys(validators).forEach(validatorId => {
        if (!uniq.includes(validatorId)) {
          uniq.push(validatorId);
          if (!all.includes(validatorId)) {
            all.push(validatorId);
          }
        }
      }));
      return [all, perStash];
    }, [[], []]);
  }
  function removeClaimed(validators, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach(validatorId => {
      const index = validators.indexOf(validatorId);
      if (index !== -1) {
        const valLedger = queryValidators[index].stakingLedger;
        if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(e => reward.era.eq(e))) {
          rm.push(validatorId);
        }
      }
    });
    rm.forEach(validatorId => {
      delete reward.validators[validatorId];
    });
  }
  function filterRewards(eras, valInfo, {
    rewards,
    stakingLedger
  }) {
    const filter = eras.filter(e => !stakingLedger.claimedRewards.some(s => s.eq(e)));
    const validators = valInfo.map(([v]) => v);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards.filter(({
      isEmpty
    }) => !isEmpty).filter(reward => {
      if (!filter.some(e => reward.era.eq(e))) {
        return false;
      }
      removeClaimed(validators, queryValidators, reward);
      return true;
    }).filter(({
      validators
    }) => Object.keys(validators).length !== 0).map(reward => util.objectSpread({}, reward, {
      nominators: reward.nominating.filter(n => reward.validators[n.validatorId])
    }));
  }
  function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, (eras, withActive = false) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));
  }
  function _stakerRewards(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([api.derive.staking.queryMulti(accountIds, {
      withLedger: true
    }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {
      const allRewards = queries.map(({
        stakingLedger,
        stashId
      }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));
      if (withActive) {
        return of(allRewards);
      }
      const [allValidators, stashValidators] = allUniqValidators(allRewards);
      return api.derive.staking.queryMulti(allValidators, {
        withLedger: true
      }).pipe(map(queriedVals => queries.map(({
        stakingLedger
      }, index) => filterRewards(eras, stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]), {
        rewards: allRewards[index],
        stakingLedger
      }))));
    })));
  }
  const stakerRewards = firstMemo((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive))));
  function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
  }
  function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
  }

  function _stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
      const stakerId = api.registry.createType('AccountId', accountId).toString();
      return api.derive.staking._erasSlashes(eras, withActive).pipe(map(slashes => slashes.map(({
        era,
        nominators,
        validators
      }) => ({
        era,
        total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
      }))));
    });
  }
  const stakerSlashes = erasHistoricApplyAccount('_stakerSlashes');

  function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe(map(events => {
      current = events.filter(({
        event,
        phase
      }) => {
        try {
          return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';
        } catch {
          return false;
        }
      }) ? Date.now() : current;
      return current;
    }), startWith(current), drr({
      skipTimeout: true
    }));
  }
  function stashes(instanceId, api) {
    return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map(keys => keys.map(({
      args: [v]
    }) => v).filter(a => a))));
  }

  function nextElected(instanceId, api) {
    return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe(
    switchMap(({
      currentEra
    }) => api.query.staking.erasStakers.keys(currentEra)), map(keys => keys.map(({
      args: [, accountId]
    }) => accountId))) : api.query.staking.currentElected());
  }
  function validators(instanceId, api) {
    return memo(instanceId, () =>
    combineLatest([api.query.session ? api.query.session.validators() : of([]), api.query.staking ? api.derive.staking.nextElected() : of([])]).pipe(map(([validators, nextElected]) => ({
      nextElected: nextElected.length ? nextElected : validators,
      validators
    }))));
  }

  const DEFAULT_FLAGS = {
    withController: true,
    withPrefs: true
  };
  function waitingInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS) => combineLatest([api.derive.staking.validators(), api.derive.staking.stashes()]).pipe(switchMap(([{
      nextElected
    }, stashes]) => {
      const elected = nextElected.map(a => a.toString());
      const waiting = stashes.filter(v => !elected.includes(v.toString()));
      return api.derive.staking.queryMulti(waiting, flags).pipe(map(info => ({
        info,
        waiting
      })));
    })));
  }

  const staking = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accounts: accounts,
    account: account,
    currentPoints: currentPoints,
    _eraExposure: _eraExposure,
    eraExposure: eraExposure,
    _erasExposure: _erasExposure,
    erasExposure: erasExposure,
    erasHistoric: erasHistoric,
    _erasPoints: _erasPoints,
    erasPoints: erasPoints,
    _eraPrefs: _eraPrefs,
    eraPrefs: eraPrefs,
    _erasPrefs: _erasPrefs,
    erasPrefs: erasPrefs,
    _erasRewards: _erasRewards,
    erasRewards: erasRewards,
    _eraSlashes: _eraSlashes,
    eraSlashes: eraSlashes,
    _erasSlashes: _erasSlashes,
    erasSlashes: erasSlashes,
    electedInfo: electedInfo,
    keys: keys,
    keysMulti: keysMulti,
    overview: overview,
    _ownExposures: _ownExposures,
    ownExposure: ownExposure,
    ownExposures: ownExposures,
    _ownSlashes: _ownSlashes,
    ownSlash: ownSlash,
    ownSlashes: ownSlashes,
    query: query,
    queryMulti: queryMulti,
    _stakerExposures: _stakerExposures,
    stakerExposures: stakerExposures,
    stakerExposure: stakerExposure,
    _stakerPoints: _stakerPoints,
    stakerPoints: stakerPoints,
    _stakerPrefs: _stakerPrefs,
    stakerPrefs: stakerPrefs,
    _stakerRewardsEras: _stakerRewardsEras,
    _stakerRewards: _stakerRewards,
    stakerRewards: stakerRewards,
    stakerRewardsMultiEras: stakerRewardsMultiEras,
    stakerRewardsMulti: stakerRewardsMulti,
    _stakerSlashes: _stakerSlashes,
    stakerSlashes: stakerSlashes,
    stashes: stashes,
    nextElected: nextElected,
    validators: validators,
    waitingInfo: waitingInfo
  });

  const members = members$5('technicalCommittee');
  const hasProposals = hasProposals$4('technicalCommittee');
  const proposal = proposal$4('technicalCommittee');
  const proposalCount = proposalCount$4('technicalCommittee');
  const proposalHashes = proposalHashes$4('technicalCommittee');
  const proposals$1 = proposals$6('technicalCommittee');
  const prime = prime$4('technicalCommittee');

  const technicalCommittee = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members,
    hasProposals: hasProposals,
    proposal: proposal,
    proposalCount: proposalCount,
    proposalHashes: proposalHashes,
    proposals: proposals$1,
    prime: prime
  });

  function parseResult(api, {
    allIds,
    allProposals,
    approvalIds,
    councilProposals,
    proposalCount
  }) {
    const approvals = [];
    const proposals = [];
    const councilTreasury = councilProposals.filter(({
      proposal
    }) => proposal && (api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal)));
    allIds.forEach((id, index) => {
      if (allProposals[index].isSome) {
        const council = councilTreasury.filter(({
          proposal
        }) => proposal && id.eq(proposal.args[0])).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
        const isApproval = approvalIds.some(approvalId => approvalId.eq(id));
        const derived = {
          council,
          id,
          proposal: allProposals[index].unwrap()
        };
        if (isApproval) {
          approvals.push(derived);
        } else {
          proposals.push(derived);
        }
      }
    });
    return {
      approvals,
      proposalCount,
      proposals
    };
  }
  function retrieveProposals(api, proposalCount, approvalIds) {
    const proposalIds = [];
    const count = proposalCount.toNumber();
    for (let index = 0; index < count; index++) {
      if (!approvalIds.some(id => id.eqn(index))) {
        proposalIds.push(api.registry.createType('ProposalIndex', index));
      }
    }
    const allIds = [...proposalIds, ...approvalIds];
    return combineLatest([api.query.treasury.proposals.multi(allIds), api.derive.council ? api.derive.council.proposals() : of([])]).pipe(map(([allProposals, councilProposals]) => parseResult(api, {
      allIds,
      allProposals,
      approvalIds,
      councilProposals,
      proposalCount
    })));
  }
  function proposals(instanceId, api) {
    return memo(instanceId, () => api.query.treasury ? combineLatest([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : of({
      approvals: [],
      proposalCount: api.registry.createType('ProposalIndex'),
      proposals: []
    }));
  }

  const treasury = /*#__PURE__*/Object.freeze({
    __proto__: null,
    proposals: proposals
  });

  function events(instanceId, api) {
    return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.system.events()))]).pipe(map(([block, events]) => ({
      block,
      events
    }))));
  }

  const FALLBACK_MAX_HASH_COUNT = 250;
  const FALLBACK_PERIOD = new util.BN(6 * 1000);
  const MAX_FINALITY_LAG = new util.BN(5);
  const MORTAL_PERIOD = new util.BN(5 * 60 * 1000);

  function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe(map(({
      accountNonce
    }) => accountNonce));
  }
  function nextNonce(api, address) {
    var _api$rpc$system;
    return (_api$rpc$system = api.rpc.system) !== null && _api$rpc$system !== void 0 && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
  }
  function signingHeader(api) {
    return combineLatest([api.rpc.chain.getHeader().pipe(switchMap(header =>
    header.parentHash.isEmpty ? of(header)
    : api.rpc.chain.getHeader(header.parentHash))), api.rpc.chain.getFinalizedHead().pipe(switchMap(hash => api.rpc.chain.getHeader(hash)))]).pipe(map(([current, finalized]) =>
    unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized));
  }
  function signingInfo(_instanceId, api) {
    return (address, nonce, era) => combineLatest([
    util.isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType('Index', nonce)),
    util.isUndefined(era) || util.isNumber(era) && era > 0 ? signingHeader(api) : of(null)]).pipe(map(([nonce, header]) => {
      var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;
      return {
        header,
        mortalLength: Math.min(((_api$consts$system = api.consts.system) === null || _api$consts$system === void 0 ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) === null || _api$consts$system$bl === void 0 ? void 0 : _api$consts$system$bl.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
        nonce
      };
    }));
  }

  const tx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    events: events,
    signingInfo: signingInfo
  });

  const derive = {
    accounts: accounts$1,
    alliance,
    bagsList,
    balances,
    bounties,
    chain,
    contracts,
    council,
    crowdloan,
    democracy,
    elections,
    imOnline,
    membership,
    parachains,
    session,
    society,
    staking,
    technicalCommittee,
    treasury,
    tx
  };

  const checks = {
    allianceMotion: {
      instances: ['allianceMotion'],
      methods: []
    },
    bagsList: {
      instances: ['voterList', 'bagsList'],
      methods: [],
      withDetect: true
    },
    contracts: {
      instances: ['contracts'],
      methods: []
    },
    council: {
      instances: ['council'],
      methods: [],
      withDetect: true
    },
    crowdloan: {
      instances: ['crowdloan'],
      methods: []
    },
    democracy: {
      instances: ['democracy'],
      methods: []
    },
    elections: {
      instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
      methods: [],
      withDetect: true
    },
    imOnline: {
      instances: ['imOnline'],
      methods: []
    },
    membership: {
      instances: ['membership'],
      methods: []
    },
    parachains: {
      instances: ['parachains', 'registrar'],
      methods: []
    },
    session: {
      instances: ['session'],
      methods: []
    },
    society: {
      instances: ['society'],
      methods: []
    },
    staking: {
      instances: ['staking'],
      methods: ['erasRewardPoints']
    },
    technicalCommittee: {
      instances: ['technicalCommittee'],
      methods: [],
      withDetect: true
    },
    treasury: {
      instances: ['treasury'],
      methods: []
    }
  };
  function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
  }
  function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys = Object.keys(api.query);
    const specName = api.runtimeVersion.specName;
    const filterKeys = q => keys.includes(q);
    const filterInstances = q => getModuleInstances(api, specName, q).some(filterKeys);
    const filterMethods = all => m => all.some(q => keys.includes(q) && api.query[q][m]);
    const getKeys = s => Object.keys(derives[s]);
    const creator = (s, m) => derives[s][m](instanceId, api);
    const isIncluded = c => !checks[c] || checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances);
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      isIncluded(name) && lazyDeriveSection(result, name, getKeys, creator);
    }
    return result;
  }
  function getAvailableDerives(instanceId, api, custom = {}) {
    return { ...injectFunctions(instanceId, api, derive),
      ...injectFunctions(instanceId, api, custom)
    };
  }

  function decorateDeriveSections(decorateMethod, derives) {
    const getKeys = s => Object.keys(derives[s]);
    const creator = (s, m) => decorateMethod(derives[s][m]);
    const result = {};
    const names = Object.keys(derives);
    for (let i = 0; i < names.length; i++) {
      lazyDeriveSection(result, names[i], getKeys, creator);
    }
    return result;
  }

  const l$3 = util.logger('api/util');

  function filterEvents(txHash, {
    block: {
      extrinsics,
      header
    }
  }, allEvents, status) {
    for (const [txIndex, x] of extrinsics.entries()) {
      if (x.hash.eq(txHash)) {
        return {
          events: allEvents.filter(({
            phase
          }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
          txIndex
        };
      }
    }
    if (status.isInBlock) {
      const allHashes = extrinsics.map(x => x.hash.toHex());
      l$3.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);
    }
    return {};
  }

  function isKeyringPair(account) {
    return util.isFunction(account.sign);
  }

  const recordIdentity = record => record;
  function filterAndApply(events, section, methods, onFound) {
    return events.filter(({
      event
    }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));
  }
  function getDispatchError({
    event: {
      data: [dispatchError]
    }
  }) {
    return dispatchError;
  }
  function getDispatchInfo({
    event: {
      data,
      method
    }
  }) {
    return method === 'ExtrinsicSuccess' ? data[0] : data[1];
  }
  function extractError(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
  }
  function extractInfo(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
  }
  class SubmittableResult {
    constructor({
      dispatchError,
      dispatchInfo,
      events,
      internalError,
      status,
      txHash,
      txIndex
    }) {
      this.dispatchError = dispatchError || extractError(events);
      this.dispatchInfo = dispatchInfo || extractInfo(events);
      this.events = events || [];
      this.internalError = internalError;
      this.status = status;
      this.txHash = txHash;
      this.txIndex = txIndex;
    }
    get isCompleted() {
      return this.isError || this.status.isInBlock || this.status.isFinalized;
    }
    get isError() {
      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }
    get isFinalized() {
      return this.status.isFinalized;
    }
    get isInBlock() {
      return this.status.isInBlock;
    }
    get isWarning() {
      return this.status.isRetracted;
    }
    filterRecords(section, method) {
      return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
    }
    findRecord(section, method) {
      return this.filterRecords(section, method)[0];
    }
    toHuman(isExtended) {
      var _this$dispatchError, _this$dispatchInfo, _this$internalError;
      return {
        dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),
        dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),
        events: this.events.map(e => e.toHuman(isExtended)),
        internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),
        status: this.status.toHuman(isExtended)
      };
    }
  }

  const identity = input => input;
  function makeEraOptions(api, registry, partialOptions, {
    header,
    mortalLength,
    nonce
  }) {
    if (!header) {
      if (partialOptions.era && !partialOptions.blockHash) {
        throw new Error('Expected blockHash to be passed alongside non-immortal era options');
      }
      if (util.isNumber(partialOptions.era)) {
        delete partialOptions.era;
        delete partialOptions.blockHash;
      }
      return makeSignOptions(api, partialOptions, {
        nonce
      });
    }
    return makeSignOptions(api, partialOptions, {
      blockHash: header.hash,
      era: registry.createTypeUnsafe('ExtrinsicEra', [{
        current: header.number,
        period: partialOptions.era || mortalLength
      }]),
      nonce
    });
  }
  function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};
    if (util.isFunction(partialOptions)) {
      statusCb = partialOptions;
    } else {
      options = util.objectSpread({}, partialOptions);
    }
    return [options, statusCb];
  }
  function makeSignOptions(api, partialOptions, extras) {
    return util.objectSpread({
      blockHash: api.genesisHash,
      genesisHash: api.genesisHash
    }, partialOptions, extras, {
      runtimeVersion: api.runtimeVersion,
      signedExtensions: api.registry.signedExtensions,
      version: api.extrinsicType
    });
  }
  function optionsOrNonce(partialOptions = {}) {
    return util.isBn(partialOptions) || util.isNumber(partialOptions) ? {
      nonce: partialOptions
    } : partialOptions;
  }
  function createClass({
    api,
    apiType,
    blockHash,
    decorateMethod
  }) {
    const ExtrinsicBase = api.registry.createClass('Extrinsic');
    class Submittable extends ExtrinsicBase {
      #ignoreStatusCb;
      #transformResult = identity;
      constructor(registry, extrinsic) {
        super(registry, extrinsic, {
          version: api.extrinsicType
        });
        this.#ignoreStatusCb = apiType === 'rxjs';
      }
      dryRun(account, optionsOrHash) {
        if (!api.rpc.system || !api.rpc.system.dryRun) {
          throw new Error('The system.dryRun RPC call is not available in your environment');
        }
        if (blockHash || util.isString(optionsOrHash) || util.isU8a(optionsOrHash)) {
          return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
        }
        return decorateMethod(() => this.#observeSign(account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
      }
      paymentInfo(account, optionsOrHash) {
        if (!api.call.transactionPaymentApi || !api.call.transactionPaymentApi.queryInfo) {
          throw new Error('The transactionPaymentApi.queryInfo runtime call is not available in your environment');
        }
        if (blockHash || util.isString(optionsOrHash) || util.isU8a(optionsOrHash)) {
          return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap(callAt => {
            const u8a = this.toU8a();
            return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
          })));
        }
        const [allOptions] = makeSignAndSendOptions(optionsOrHash);
        const address = isKeyringPair(account) ? account.address : account.toString();
        return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {
          const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
          const signOptions = makeSignOptions(api, eraOptions, {});
          const u8a = this.isSigned ? api.tx(this).signFake(address, signOptions).toU8a() : this.signFake(address, signOptions).toU8a();
          return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
        })))();
      }
      send(statusCb) {
        const isSubscription = api.hasSubscriptions && (this.#ignoreStatusCb || !!statusCb);
        return decorateMethod(isSubscription ? this.#observeSubscribe : this.#observeSend)(statusCb);
      }
      signAsync(account, partialOptions) {
        return decorateMethod(() => this.#observeSign(account, partialOptions).pipe(mapTo(this)))();
      }
      signAndSend(account, partialOptions, optionalStatusCb) {
        const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
        const isSubscription = api.hasSubscriptions && (this.#ignoreStatusCb || !!statusCb);
        return decorateMethod(() => this.#observeSign(account, options).pipe(switchMap(info => isSubscription ? this.#observeSubscribe(info) : this.#observeSend(info)))
        )(statusCb);
      }
      withResultTransform(transform) {
        this.#transformResult = transform;
        return this;
      }
      #observeSign = (account, partialOptions) => {
        const address = isKeyringPair(account) ? account.address : account.toString();
        const options = optionsOrNonce(partialOptions);
        return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {
          const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
          let updateId = -1;
          if (isKeyringPair(account)) {
            this.sign(account, eraOptions);
          } else {
            updateId = await this.#signViaSigner(address, eraOptions, signingInfo.header);
          }
          return {
            options: eraOptions,
            updateId
          };
        }));
      };
      #observeStatus = (txHash, status) => {
        if (!status.isFinalized && !status.isInBlock) {
          return of(this.#transformResult(new SubmittableResult({
            status,
            txHash
          })));
        }
        const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
        return api.derive.tx.events(blockHash).pipe(map(({
          block,
          events
        }) => this.#transformResult(new SubmittableResult({ ...filterEvents(txHash, block, events, status),
          status,
          txHash
        }))), catchError(internalError => of(this.#transformResult(new SubmittableResult({
          internalError,
          status,
          txHash
        })))));
      };
      #observeSend = info => {
        return api.rpc.author.submitExtrinsic(this).pipe(tap(hash => {
          this.#updateSigner(hash, info);
        }));
      };
      #observeSubscribe = info => {
        const txHash = this.hash;
        return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap(status => this.#observeStatus(txHash, status)), tap(status => {
          this.#updateSigner(status, info);
        }));
      };
      #signViaSigner = async (address, options, header) => {
        const signer = options.signer || api.signer;
        if (!signer) {
          throw new Error('No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
        }
        const payload = this.registry.createTypeUnsafe('SignerPayload', [util.objectSpread({}, options, {
          address,
          blockNumber: header ? header.number : 0,
          method: this.method
        })]);
        let result;
        if (util.isFunction(signer.signPayload)) {
          result = await signer.signPayload(payload.toPayload());
        } else if (util.isFunction(signer.signRaw)) {
          result = await signer.signRaw(payload.toRaw());
        } else {
          throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
        }
        super.addSignature(address, result.signature, payload.toPayload());
        return result.id;
      };
      #updateSigner = (status, info) => {
        if (info && info.updateId !== -1) {
          const {
            options,
            updateId
          } = info;
          const signer = options.signer || api.signer;
          if (signer && util.isFunction(signer.update)) {
            signer.update(updateId, status);
          }
        }
      };
    }
    return Submittable;
  }

  function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = createClass({
      api,
      apiType,
      blockHash,
      decorateMethod
    });
    return extrinsic => new Submittable(registry || api.registry, extrinsic);
  }

  function findCall(registry, callIndex) {
    return registry.findMetaCall(util.u8aToU8a(callIndex));
  }
  function findError(registry, errorIndex) {
    return registry.findMetaError(util.u8aToU8a(errorIndex));
  }

  const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
  function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce((all, key) => util.objectSpread(all, {
      [key]: `${key}${version}`
    }), {});
  }

  const typesChain = {};

  const sharedTypes$5 = {
    AnchorData: {
      anchoredBlock: 'u64',
      docRoot: 'H256',
      id: 'H256'
    },
    DispatchErrorModule: 'DispatchErrorModuleU8',
    PreCommitData: {
      expirationBlock: 'u64',
      identity: 'H256',
      signingRoot: 'H256'
    },
    Fee: {
      key: 'Hash',
      price: 'Balance'
    },
    MultiAccountData: {
      deposit: 'Balance',
      depositor: 'AccountId',
      signatories: 'Vec<AccountId>',
      threshold: 'u16'
    },
    ChainId: 'u8',
    DepositNonce: 'u64',
    ResourceId: '[u8; 32]',
    'chainbridge::ChainId': 'u8',
    RegistryId: 'H160',
    TokenId: 'U256',
    AssetId: {
      registryId: 'RegistryId',
      tokenId: 'TokenId'
    },
    AssetInfo: {
      metadata: 'Bytes'
    },
    MintInfo: {
      anchorId: 'Hash',
      proofs: 'Vec<ProofMint>',
      staticHashes: '[Hash; 3]'
    },
    Proof: {
      leafHash: 'H256',
      sortedHashes: 'H256'
    },
    ProofMint: {
      hashes: 'Vec<Hash>',
      property: 'Bytes',
      salt: '[u8; 32]',
      value: 'Bytes'
    },
    RegistryInfo: {
      fields: 'Vec<Bytes>',
      ownerCanBurn: 'bool'
    },
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'NonProxy']
    }
  };
  const standaloneTypes = util.objectSpread({}, sharedTypes$5, {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    LookupSource: 'IndicesLookupSource',
    Multiplier: 'Fixed64',
    RefCount: 'RefCountTo259'
  });
  const versioned$8 = [{
    minmax: [240, 243],
    types: util.objectSpread({}, standaloneTypes, {
      ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'Vesting']
      }
    })
  }, {
    minmax: [244, 999],
    types: util.objectSpread({}, standaloneTypes)
  }, {
    minmax: [1000, undefined],
    types: util.objectSpread({}, sharedTypes$5)
  }];

  const sharedTypes$4 = {
    CompactAssignments: 'CompactAssignmentsWith24',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith24',
    Keys: 'SessionKeys6',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
    }
  };
  const addrIndicesTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'IndicesLookupSource',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const addrAccountIdTypes$2 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned$7 = [{
    minmax: [1019, 1031],
    types: util.objectSpread({}, addrIndicesTypes, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchError: 'DispatchErrorTo198',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      IdentityInfo: 'IdentityInfoTo198',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      SlashingSpans: 'SlashingSpansTo204',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1032, 1042],
    types: util.objectSpread({}, addrIndicesTypes, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      SlashingSpans: 'SlashingSpansTo204',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1043, 1045],
    types: util.objectSpread({}, addrIndicesTypes, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1046, 1050],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      StakingLedger: 'StakingLedgerTo223',
      Weight: 'u32'
    })
  }, {
    minmax: [1051, 1054],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      StakingLedger: 'StakingLedgerTo240',
      Weight: 'u32'
    })
  }, {
    minmax: [1055, 1056],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      StakingLedger: 'StakingLedgerTo240',
      Weight: 'u32'
    })
  }, {
    minmax: [1057, 1061],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [1062, 2012],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2013, 2022],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2023, 2024],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2025, 2027],
    types: util.objectSpread({}, sharedTypes$4, addrAccountIdTypes$2)
  }, {
    minmax: [2028, 2029],
    types: util.objectSpread({}, sharedTypes$4, {
      AccountInfo: 'AccountInfoWithDualRefCount',
      CompactAssignments: 'CompactAssignmentsWith16',
      RawSolution: 'RawSolutionWith16'
    })
  }, {
    minmax: [2030, 9000],
    types: util.objectSpread({}, sharedTypes$4, {
      CompactAssignments: 'CompactAssignmentsWith16',
      RawSolution: 'RawSolutionWith16'
    })
  }, {
    minmax: [9010, 9099],
    types: util.objectSpread({}, sharedTypes$4, mapXcmTypes('V0'))
  }, {
    minmax: [9100, 9105],
    types: util.objectSpread({}, sharedTypes$4, mapXcmTypes('V1'))
  }, {
    minmax: [9106, undefined],
    types: {}
  }];

  const versioned$6 = [{
    minmax: [0, undefined],
    types: {
    }
  }];

  const versioned$5 = [{
    minmax: [0, undefined],
    types: {
    }
  }];

  const sharedTypes$3 = {
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys6',
    ProxyType: {
      _enum: {
        Any: 0,
        NonTransfer: 1,
        Governance: 2,
        Staking: 3,
        UnusedSudoBalances: 4,
        IdentityJudgement: 5,
        CancelProxy: 6,
        Auction: 7
      }
    }
  };
  const addrAccountIdTypes$1 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned$4 = [{
    minmax: [0, 12],
    types: util.objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [13, 22],
    types: util.objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [23, 24],
    types: util.objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [25, 27],
    types: util.objectSpread({}, sharedTypes$3, addrAccountIdTypes$1)
  }, {
    minmax: [28, 29],
    types: util.objectSpread({}, sharedTypes$3, {
      AccountInfo: 'AccountInfoWithDualRefCount'
    })
  }, {
    minmax: [30, 9109],
    types: util.objectSpread({}, sharedTypes$3)
  }, {
    minmax: [9110, undefined],
    types: {}
  }];

  const sharedTypes$2 = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    FullIdentification: '()',
    Keys: 'SessionKeys7B'
  };
  const versioned$3 = [{
    minmax: [0, 200],
    types: util.objectSpread({}, sharedTypes$2, {
      AccountInfo: 'AccountInfoWithDualRefCount',
      Address: 'AccountId',
      LookupSource: 'AccountId'
    })
  }, {
    minmax: [201, 214],
    types: util.objectSpread({}, sharedTypes$2, {
      AccountInfo: 'AccountInfoWithDualRefCount'
    })
  }, {
    minmax: [215, 228],
    types: util.objectSpread({}, sharedTypes$2, {
      Keys: 'SessionKeys6'
    })
  }, {
    minmax: [229, 9099],
    types: util.objectSpread({}, sharedTypes$2, mapXcmTypes('V0'))
  }, {
    minmax: [9100, 9105],
    types: util.objectSpread({}, sharedTypes$2, mapXcmTypes('V1'))
  }, {
    minmax: [9106, undefined],
    types: {}
  }];

  const versioned$2 = [{
    minmax: [0, undefined],
    types: {
    }
  }];

  const sharedTypes$1 = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    TAssetBalance: 'u128',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'CancelProxy', 'Assets', 'AssetOwner', 'AssetManager', 'Staking']
    }
  };
  const versioned$1 = [{
    minmax: [0, 3],
    types: util.objectSpread({
      DispatchError: 'DispatchErrorPre6First'
    }, sharedTypes$1, mapXcmTypes('V0'))
  }, {
    minmax: [4, 5],
    types: util.objectSpread({}, sharedTypes$1, mapXcmTypes('V1'))
  }, {
    minmax: [500, undefined],
    types: {}
  }];

  const sharedTypes = {
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys6',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
    }
  };
  const addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    LookupSource: 'AccountId',
    Keys: 'SessionKeys5',
    RawSolution: 'RawSolutionWith16',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned = [{
    minmax: [1, 2],
    types: util.objectSpread({}, sharedTypes, addrAccountIdTypes, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      Weight: 'u32'
    })
  }, {
    minmax: [3, 22],
    types: util.objectSpread({}, sharedTypes, addrAccountIdTypes, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [23, 42],
    types: util.objectSpread({}, sharedTypes, addrAccountIdTypes, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [43, 44],
    types: util.objectSpread({}, sharedTypes, addrAccountIdTypes, {
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [45, 47],
    types: util.objectSpread({}, sharedTypes, addrAccountIdTypes)
  }, {
    minmax: [48, 49],
    types: util.objectSpread({}, sharedTypes, {
      AccountInfo: 'AccountInfoWithDualRefCount'
    })
  }, {
    minmax: [50, 9099],
    types: util.objectSpread({}, sharedTypes, mapXcmTypes('V0'))
  }, {
    minmax: [9100, 9105],
    types: util.objectSpread({}, sharedTypes, mapXcmTypes('V1'))
  }, {
    minmax: [9106, undefined],
    types: {}
  }];

  const typesSpec = {
    'centrifuge-chain': versioned$8,
    kusama: versioned$7,
    node: versioned$6,
    'node-template': versioned$5,
    polkadot: versioned$4,
    rococo: versioned$3,
    shell: versioned$2,
    statemine: versioned$1,
    statemint: versioned$1,
    westend: versioned,
    westmint: versioned$1
  };

  const upgrades$3 = [[0, 1020, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [26669, 1021, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [38245, 1022, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [54248, 1023, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [59659, 1024, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [67651, 1025, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [82191, 1027, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [83238, 1028, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [101503, 1029, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [203466, 1030, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [295787, 1031, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [461692, 1032, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [504329, 1033, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [569327, 1038, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 1], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [587687, 1039, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [653183, 1040, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [693488, 1042, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [901442, 1045, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1375086, 1050, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1445458, 1051, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1472960, 1052, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1475648, 1053, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1491596, 1054, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1574408, 1055, [["0xdf6acb689907609b", 2], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 1], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2064961, 1058, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2201991, 1062, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2671528, 2005, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2704202, 2007, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2728002, 2008, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2832534, 2011, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2962294, 2012, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3240000, 2013, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3274408, 2015, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3323565, 2019, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3534175, 2022, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3860281, 2023, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4143129, 2024, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4401242, 2025, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4841367, 2026, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5961600, 2027, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6137912, 2028, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6561855, 2029, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7100891, 2030, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7468792, 9010, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7668600, 9030, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7812476, 9040, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8010981, 9050, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8073833, 9070, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8555825, 9080, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8945245, 9090, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9611377, 9100, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9625129, 9111, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9866422, 9122, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10403784, 9130, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10960765, 9150, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11006614, 9151, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11404482, 9160, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11601803, 9170, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [12008022, 9180, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [12405451, 9190, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [12665416, 9200, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [12909508, 9220, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [13109752, 9230, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [13555777, 9250, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [13727747, 9260, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]]];

  const upgrades$2 = [[0, 0, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [29231, 1, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [188836, 5, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [199405, 6, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [214264, 7, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [244358, 8, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [303079, 9, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [314201, 10, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [342400, 11, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [443963, 12, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [528470, 13, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [687751, 14, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [746085, 15, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [787923, 16, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [799302, 17, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1205128, 18, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1603423, 23, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1733218, 24, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2005673, 25, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2436698, 26, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3613564, 27, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3899547, 28, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4345767, 29, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4876134, 30, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5661442, 9050, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6321619, 9080, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6713249, 9090, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7217907, 9100, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7229126, 9110, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7560558, 9122, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8115869, 9140, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8638103, 9151, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9280179, 9170, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9738717, 9180, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10156856, 9190, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10458576, 9200, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10655116, 9220, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10879371, 9230, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11328884, 9250, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11532856, 9260, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]]];

  const upgrades$1 = [[214356, 4, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 1], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [392764, 7, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [409740, 8, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [809976, 20, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [877581, 24, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [879238, 25, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [889472, 26, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [902937, 27, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [932751, 28, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [991142, 29, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1030162, 31, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1119657, 32, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1199282, 33, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1342534, 34, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1392263, 35, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1431703, 36, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1433369, 37, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [1490972, 41, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2087397, 43, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2316688, 44, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 3], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [2549864, 45, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3925782, 46, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [3925843, 47, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4207800, 48, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [4627944, 49, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5124076, 50, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5478664, 900, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5482450, 9000, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 4], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5584305, 9010, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5784566, 9030, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5879822, 9031, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5896856, 9032, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [5897316, 9033, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6117927, 9050, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6210274, 9070, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 2], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6379314, 9080, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 2], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [6979141, 9090, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7568453, 9100, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7766394, 9111, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7911691, 9120, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7968866, 9121, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [7982889, 9122, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [8514322, 9130, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9091726, 9140, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9091774, 9150, [["0xdf6acb689907609b", 3], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 1], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9406726, 9160, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [9921066, 9170, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10007115, 9180, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 5], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10480973, 9190, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10578091, 9200, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10678509, 9210, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [10811001, 9220, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11096116, 9230, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11409279, 9250, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11584820, 9251, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11716837, 9260, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11876919, 9261, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1]]], [11987927, 9270, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1], ["0x17a6bc0d0062aeb3", 1]]], [12077324, 9271, [["0xdf6acb689907609b", 4], ["0x37e397fc7c91f5e4", 1], ["0x40fe3ad401f8959a", 6], ["0xd2bc9897eed08f15", 3], ["0xf78b278be53f454c", 2], ["0xaf2c0297a23e6d3d", 2], ["0x49eaaf1b548a0cb0", 1], ["0x91d5df18b0d2cf58", 1], ["0xed99c5acb25eedf5", 3], ["0xcbca25e39f142387", 2], ["0x687ad44ad37f03c2", 1], ["0xab3c0572291feb8b", 1], ["0xbc9d89904f5b923f", 1], ["0x37c8bb1350a9a2a8", 1], ["0x17a6bc0d0062aeb3", 1]]]];

  const allKnown = /*#__PURE__*/Object.freeze({
    __proto__: null,
    kusama: upgrades$3,
    polkadot: upgrades$2,
    westend: upgrades$1
  });

  const NET_EXTRA = {
    westend: {
      genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
    }
  };
  function checkOrder(network, versions) {
    const ooo = versions.filter((curr, index) => {
      const prev = versions[index - 1];
      return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];
    });
    if (ooo.length) {
      throw new Error(`${network}: Mismatched upgrade ordering: ${util.stringify(ooo)}`);
    }
    return versions;
  }
  function mapRaw([network, versions]) {
    const chain = utilCrypto.selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];
    if (!chain) {
      throw new Error(`Unable to find info for chain ${network}`);
    }
    return {
      genesisHash: util.hexToU8a(chain.genesisHash[0]),
      network,
      versions: checkOrder(network, versions).map(([blockNumber, specVersion, apis]) => ({
        apis,
        blockNumber: new util.BN(blockNumber),
        specVersion: new util.BN(specVersion)
      }))
    };
  }
  const upgrades = Object.entries(allKnown).map(mapRaw);

  function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
  }
  function filterVersions(versions = [], specVersion) {
    return versions.filter(({
      minmax: [min, max]
    }) => (min === undefined || min === null || specVersion >= min) && (max === undefined || max === null || specVersion <= max)).reduce((result, {
      types
    }) => util.objectSpread(result, types), {});
  }
  function getSpecExtensions({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;
      return util.objectSpread({}, (_knownTypes$typesBund = knownTypes.typesBundle) === null || _knownTypes$typesBund === void 0 ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) === null || _knownTypes$typesBund2 === void 0 ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[s]) === null || _knownTypes$typesBund3 === void 0 ? void 0 : _knownTypes$typesBund3.signedExtensions, (_knownTypes$typesBund4 = knownTypes.typesBundle) === null || _knownTypes$typesBund4 === void 0 ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) === null || _knownTypes$typesBund5 === void 0 ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[c]) === null || _knownTypes$typesBund6 === void 0 ? void 0 : _knownTypes$typesBund6.signedExtensions);
    });
  }
  function getSpecTypes({
    knownTypes
  }, chainName, specName, specVersion) {
    const _specVersion = util.bnToBn(specVersion).toNumber();
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;
      return (
        util.objectSpread({}, filterVersions(typesSpec[s], _specVersion), filterVersions(typesChain[c], _specVersion), filterVersions((_knownTypes$typesBund7 = knownTypes.typesBundle) === null || _knownTypes$typesBund7 === void 0 ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) === null || _knownTypes$typesBund8 === void 0 ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[s]) === null || _knownTypes$typesBund9 === void 0 ? void 0 : _knownTypes$typesBund9.types, _specVersion), filterVersions((_knownTypes$typesBund10 = knownTypes.typesBundle) === null || _knownTypes$typesBund10 === void 0 ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) === null || _knownTypes$typesBund11 === void 0 ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[c]) === null || _knownTypes$typesBund12 === void 0 ? void 0 : _knownTypes$typesBund12.types, _specVersion), (_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[s], (_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[c], knownTypes.types)
      );
    });
  }
  function getSpecHasher({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;
      return knownTypes.hasher || ((_knownTypes$typesBund13 = knownTypes.typesBundle) === null || _knownTypes$typesBund13 === void 0 ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) === null || _knownTypes$typesBund14 === void 0 ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[c]) === null || _knownTypes$typesBund15 === void 0 ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes.typesBundle) === null || _knownTypes$typesBund16 === void 0 ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) === null || _knownTypes$typesBund17 === void 0 ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[s]) === null || _knownTypes$typesBund18 === void 0 ? void 0 : _knownTypes$typesBund18.hasher) || null;
    });
  }
  function getSpecRpc({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;
      return util.objectSpread({}, (_knownTypes$typesBund19 = knownTypes.typesBundle) === null || _knownTypes$typesBund19 === void 0 ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) === null || _knownTypes$typesBund20 === void 0 ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[s]) === null || _knownTypes$typesBund21 === void 0 ? void 0 : _knownTypes$typesBund21.rpc, (_knownTypes$typesBund22 = knownTypes.typesBundle) === null || _knownTypes$typesBund22 === void 0 ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) === null || _knownTypes$typesBund23 === void 0 ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[c]) === null || _knownTypes$typesBund24 === void 0 ? void 0 : _knownTypes$typesBund24.rpc);
    });
  }
  function getSpecRuntime({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;
      return util.objectSpread({}, (_knownTypes$typesBund25 = knownTypes.typesBundle) === null || _knownTypes$typesBund25 === void 0 ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) === null || _knownTypes$typesBund26 === void 0 ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[s]) === null || _knownTypes$typesBund27 === void 0 ? void 0 : _knownTypes$typesBund27.runtime, (_knownTypes$typesBund28 = knownTypes.typesBundle) === null || _knownTypes$typesBund28 === void 0 ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) === null || _knownTypes$typesBund29 === void 0 ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[c]) === null || _knownTypes$typesBund30 === void 0 ? void 0 : _knownTypes$typesBund30.runtime);
    });
  }
  function getSpecAlias({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund31, _knownTypes$typesBund32, _knownTypes$typesBund33, _knownTypes$typesBund34, _knownTypes$typesBund35, _knownTypes$typesBund36;
      return (
        util.objectSpread({}, (_knownTypes$typesBund31 = knownTypes.typesBundle) === null || _knownTypes$typesBund31 === void 0 ? void 0 : (_knownTypes$typesBund32 = _knownTypes$typesBund31.spec) === null || _knownTypes$typesBund32 === void 0 ? void 0 : (_knownTypes$typesBund33 = _knownTypes$typesBund32[s]) === null || _knownTypes$typesBund33 === void 0 ? void 0 : _knownTypes$typesBund33.alias, (_knownTypes$typesBund34 = knownTypes.typesBundle) === null || _knownTypes$typesBund34 === void 0 ? void 0 : (_knownTypes$typesBund35 = _knownTypes$typesBund34.chain) === null || _knownTypes$typesBund35 === void 0 ? void 0 : (_knownTypes$typesBund36 = _knownTypes$typesBund35[c]) === null || _knownTypes$typesBund36 === void 0 ? void 0 : _knownTypes$typesBund36.alias, knownTypes.typesAlias)
      );
    });
  }
  function getUpgradeVersion(genesisHash, blockNumber) {
    const known = upgrades.find(u => genesisHash.eq(u.genesisHash));
    return known ? [known.versions.reduce((last, version) => {
      return blockNumber.gt(version.blockNumber) ? version : last;
    }, undefined), known.versions.find(version => blockNumber.lte(version.blockNumber))] : [undefined, undefined];
  }

  const l$2 = util.logger('api/augment');
  function logLength(type, values, and = []) {
    return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';
  }
  function logValues(type, values) {
    return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';
  }
  function warn(prefix, type, [added, removed]) {
    if (added.length || removed.length) {
      l$2.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
    }
  }
  function findSectionExcludes(a, b) {
    return a.filter(s => !b.includes(s));
  }
  function findSectionIncludes(a, b) {
    return a.filter(s => b.includes(s));
  }
  function extractSections(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];
  }
  function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes = [];
    for (let s = 0; s < dstSections.length; s++) {
      const section = dstSections[s];
      const srcMethods = Object.keys(src[section]);
      const dstMethods = Object.keys(dst[section]);
      for (let d = 0; d < dstMethods.length; d++) {
        const method = dstMethods[d];
        if (!srcMethods.includes(method)) {
          excludes.push(`${section}.${method}`);
        }
      }
    }
    return excludes;
  }
  function extractMethods(src, dst) {
    return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];
  }
  function augmentObject(prefix, src, dst, fromEmpty = false) {
    fromEmpty && util.objectClear(dst);
    if (prefix && Object.keys(dst).length) {
      warn(prefix, 'modules', extractSections(src, dst));
      warn(prefix, 'calls', extractMethods(src, dst));
    }
    const sections = Object.keys(src);
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      const methods = src[section];
      if (!dst[section]) {
        dst[section] = {};
      }
      util.lazyMethods(dst[section], Object.keys(methods), m => methods[m]);
    }
    return dst;
  }

  function sig({
    lookup
  }, {
    method,
    section
  }, args) {
    return `${section}.${method}(${args.map(a => lookup.getTypeDef(a).type).join(', ')})`;
  }
  function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter(a => !util.isUndefined(a));
    if (creator.meta.type.isPlain) {
      if (args.length !== 0) {
        throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
      }
    } else {
      const {
        hashers,
        key
      } = creator.meta.type.asMap;
      const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map(t => t);
      if (args.length !== keys.length) {
        throw new Error(`${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
      }
    }
    return [creator, args];
  }

  class Events {
    #eventemitter = new EventEmitter();
    emit(type, ...args) {
      return this.#eventemitter.emit(type, ...args);
    }
    on(type, handler) {
      this.#eventemitter.on(type, handler);
      return this;
    }
    off(type, handler) {
      this.#eventemitter.removeListener(type, handler);
      return this;
    }
    once(type, handler) {
      this.#eventemitter.once(type, handler);
      return this;
    }
  }

  const PAGE_SIZE_K = 1000;
  const PAGE_SIZE_V = 250;
  const PAGE_SIZE_Q = 50;
  const l$1 = util.logger('api/init');
  let instanceCounter = 0;
  function getAtQueryFn(api, {
    method,
    section
  }) {
    return util.assertReturn(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
  }
  class Decorate extends Events {
    #instanceId;
    #registry;
    #runtimeLog = {};
    #storageGetQ = [];
    #storageSubQ = [];
    __phantom = new util.BN(0);
    _call = {};
    _consts = {};
    _errors = {};
    _events = {};
    _extrinsicType = types.GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
    _isReady = false;
    _query = {};
    _runtimeMap = {};
    _rx = {
      call: {},
      consts: {},
      query: {},
      tx: {}
    };
    constructor(options, type, decorateMethod) {
      var _options$source;
      super();
      this.#instanceId = `${++instanceCounter}`;
      this.#registry = ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.registry) || options.registry || new types.TypeRegistry();
      this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map(a => a.rx.call));
      this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map(a => a.rx.query));
      this._rx.registry = this.#registry;
      const thisProvider = options.source ? options.source._rpcCore.provider.clone() : options.provider || new WsProvider();
      this._decorateMethod = decorateMethod;
      this._options = options;
      this._type = type;
      this._rpcCore = new RpcCore(this.#instanceId, this.#registry, thisProvider, this._options.rpc);
      this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
      this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }
    get registry() {
      return this.#registry;
    }
    createType(type, ...params) {
      return this.#registry.createType(type, ...params);
    }
    registerTypes(types) {
      types && this.#registry.register(types);
    }
    get hasSubscriptions() {
      return this._rpcCore.provider.hasSubscriptions;
    }
    get supportMulti() {
      return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }
    _emptyDecorated(registry, blockHash) {
      return {
        call: {},
        consts: {},
        errors: {},
        events: {},
        query: {},
        registry,
        rx: {
          call: {},
          query: {}
        },
        tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
      };
    }
    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
      if (!decoratedApi) {
        decoratedApi = this._emptyDecorated(registry.registry, blockHash);
      }
      if (fromEmpty || !registry.decoratedMeta) {
        registry.decoratedMeta = types.expandMetadata(registry.registry, registry.metadata);
      }
      const runtime = this._decorateCalls(registry, this._decorateMethod, blockHash);
      const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
      const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
      const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
      augmentObject('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
      augmentObject('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
      augmentObject('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
      augmentObject('query', storage, decoratedApi.query, fromEmpty);
      augmentObject('query', storageRx, decoratedApi.rx.query, fromEmpty);
      augmentObject('call', runtime, decoratedApi.call, fromEmpty);
      augmentObject('call', runtimeRx, decoratedApi.rx.call, fromEmpty);
      decoratedApi.findCall = callIndex => findCall(registry.registry, callIndex);
      decoratedApi.findError = errorIndex => findError(registry.registry, errorIndex);
      decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
      decoratedApi.runtimeVersion = registry.runtimeVersion;
      return {
        createdAt: blockHash,
        decoratedApi,
        decoratedMeta: registry.decoratedMeta
      };
    }
    _injectMetadata(registry, fromEmpty = false) {
      if (fromEmpty || !registry.decoratedApi) {
        registry.decoratedApi = this._emptyDecorated(registry.registry);
      }
      const {
        decoratedApi,
        decoratedMeta
      } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
      this._call = decoratedApi.call;
      this._consts = decoratedApi.consts;
      this._errors = decoratedApi.errors;
      this._events = decoratedApi.events;
      this._query = decoratedApi.query;
      this._rx.call = decoratedApi.rx.call;
      this._rx.query = decoratedApi.rx.query;
      const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
      const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
      if (fromEmpty || !this._extrinsics) {
        this._extrinsics = tx;
        this._rx.tx = rxtx;
      } else {
        augmentObject('tx', tx, this._extrinsics, false);
        augmentObject(null, rxtx, this._rx.tx, false);
      }
      augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
      this.emit('decorated');
    }
    injectMetadata(metadata, fromEmpty, registry) {
      this._injectMetadata({
        counter: 0,
        metadata,
        registry: registry || this.#registry,
        runtimeVersion: this.#registry.createType('RuntimeVersionPartial')
      }, fromEmpty);
    }
    _decorateFunctionMeta(input, output) {
      output.meta = input.meta;
      output.method = input.method;
      output.section = input.section;
      output.toJSON = input.toJSON;
      if (input.callIndex) {
        output.callIndex = input.callIndex;
      }
      return output;
    }
    _filterRpc(methods, additional) {
      if (Object.keys(additional).length !== 0) {
        this._rpcCore.addUserInterfaces(additional);
        this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
        this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
      }
      const sectionMap = {};
      for (let i = 0; i < methods.length; i++) {
        const [section] = methods[i].split('_');
        sectionMap[section] = true;
      }
      const sections = Object.keys(sectionMap);
      for (let i = 0; i < sections.length; i++) {
        const nameA = util.stringUpperFirst(sections[i]);
        const nameB = `${nameA}Api`;
        this._runtimeMap[utilCrypto.blake2AsHex(nameA, 64)] = nameA;
        this._runtimeMap[utilCrypto.blake2AsHex(nameB, 64)] = nameB;
      }
      this._filterRpcMethods(methods);
    }
    _filterRpcMethods(exposed) {
      const hasResults = exposed.length !== 0;
      const allKnown = [...this._rpcCore.mapping.entries()];
      const allKeys = [];
      for (let i = 0; i < allKnown.length; i++) {
        const [, {
          alias,
          endpoint,
          method,
          pubsub,
          section
        }] = allKnown[i];
        allKeys.push(`${section}_${method}`);
        if (pubsub) {
          allKeys.push(`${section}_${pubsub[1]}`);
          allKeys.push(`${section}_${pubsub[2]}`);
        }
        if (alias) {
          allKeys.push(...alias);
        }
        if (endpoint) {
          allKeys.push(endpoint);
        }
      }
      const filterKey = k => !allKeys.includes(k);
      const unknown = exposed.filter(filterKey);
      if (unknown.length && !this._options.noInitWarn) {
        l$1.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
      }
      for (let i = 0; i < allKnown.length; i++) {
        const [k, {
          method,
          section
        }] = allKnown[i];
        if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
          if (this._rpc[section]) {
            delete this._rpc[section][method];
            delete this._rx.rpc[section][method];
          }
        }
      }
    }
    _decorateRpc(rpc, decorateMethod, input = {}) {
      const out = input;
      const decorateFn = (section, method) => {
        const source = rpc[section][method];
        const fn = decorateMethod(source, {
          methodName: method
        });
        fn.meta = source.meta;
        fn.raw = decorateMethod(source.raw, {
          methodName: method
        });
        return fn;
      };
      for (let s = 0; s < rpc.sections.length; s++) {
        const section = rpc.sections[s];
        if (!Object.prototype.hasOwnProperty.call(out, section)) {
          const methods = Object.keys(rpc[section]);
          const decorateInternal = method => decorateFn(section, method);
          for (let m = 0; m < methods.length; m++) {
            const method = methods[m];
            if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
              if (!Object.prototype.hasOwnProperty.call(out, section)) {
                out[section] = {};
              }
              util.lazyMethod(out[section], method, decorateInternal);
            }
          }
        }
      }
      return out;
    }
    _addRuntimeDef(result, additional) {
      if (!additional) {
        return;
      }
      const entries = Object.entries(additional);
      for (let j = 0; j < entries.length; j++) {
        const [key, defs] = entries[j];
        if (result[key]) {
          for (let k = 0; k < defs.length; k++) {
            const def = defs[k];
            const prev = result[key].find(({
              version
            }) => def.version === version);
            if (prev) {
              util.objectSpread(prev.methods, def.methods);
            } else {
              result[key].push(def);
            }
          }
        } else {
          result[key] = defs;
        }
      }
    }
    _getRuntimeDefs(registry, specName, chain = '') {
      const result = {};
      const defValues = Object.values(types.typeDefinitions);
      for (let i = 0; i < defValues.length; i++) {
        this._addRuntimeDef(result, defValues[i].runtime);
      }
      this._addRuntimeDef(result, getSpecRuntime(registry, chain, specName));
      this._addRuntimeDef(result, this._options.runtime);
      return Object.entries(result);
    }
    _decorateCalls({
      registry,
      runtimeVersion: {
        apis,
        specName,
        specVersion
      }
    }, decorateMethod, blockHash) {
      const result = {};
      const named = {};
      const hashes = {};
      const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
      const older = [];
      const implName = `${specName.toString()}/${specVersion.toString()}`;
      const hasLogged = this.#runtimeLog[implName] || false;
      this.#runtimeLog[implName] = true;
      for (let i = 0; i < sections.length; i++) {
        const [_section, secs] = sections[i];
        const sectionHash = utilCrypto.blake2AsHex(_section, 64);
        const rtApi = apis.find(([a]) => a.eq(sectionHash));
        hashes[sectionHash] = true;
        if (rtApi) {
          const all = secs.map(({
            version
          }) => version).sort();
          const sec = secs.find(({
            version
          }) => rtApi[1].eq(version));
          if (sec) {
            const section = util.stringCamelCase(_section);
            const methods = Object.entries(sec.methods);
            if (methods.length) {
              if (!named[section]) {
                named[section] = {};
              }
              for (let m = 0; m < methods.length; m++) {
                const [_method, def] = methods[m];
                const method = util.stringCamelCase(_method);
                named[section][method] = util.objectSpread({
                  method,
                  name: `${_section}_${_method}`,
                  section,
                  sectionHash
                }, def);
              }
            }
          } else {
            older.push(`${_section}/${rtApi[1].toString()} (${all.join('/')} known)`);
          }
        }
      }
      const notFound = apis.map(([a, v]) => [a.toHex(), v.toString()]).filter(([a]) => !hashes[a]).map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
      if (!this._options.noInitWarn && !hasLogged) {
        if (older.length) {
          l$1.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(', ')}`);
        }
        if (notFound.length) {
          l$1.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(', ')}`);
        }
      }
      const stateCall = blockHash ? (name, bytes) => this._rpcCore.state.call(name, bytes, blockHash) : (name, bytes) => this._rpcCore.state.call(name, bytes);
      const lazySection = section => util.lazyMethods({}, Object.keys(named[section]), method => this._decorateCall(registry, named[section][method], stateCall, decorateMethod));
      const modules = Object.keys(named);
      for (let i = 0; i < modules.length; i++) {
        util.lazyMethod(result, modules[i], lazySection);
      }
      return result;
    }
    _decorateCall(registry, def, stateCall, decorateMethod) {
      const decorated = decorateMethod((...args) => {
        if (args.length !== def.params.length) {
          throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
        }
        const bytes = registry.createType('Raw', util.u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
        return stateCall(def.name, bytes).pipe(map(r => registry.createTypeUnsafe(def.type, [r])));
      });
      decorated.meta = def;
      return decorated;
    }
    _decorateMulti(decorateMethod) {
      return decorateMethod(keys => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys.map(args => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])));
    }
    _decorateMultiAt(atApi, decorateMethod, blockHash) {
      return decorateMethod(calls => this._rpcCore.state.queryStorageAt(calls.map(args => {
        if (Array.isArray(args)) {
          const {
            creator
          } = getAtQueryFn(atApi, args[0].creator);
          return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
        }
        return [getAtQueryFn(atApi, args.creator).creator];
      }), blockHash));
    }
    _decorateExtrinsics({
      tx
    }, decorateMethod) {
      const result = createSubmittable(this._type, this._rx, decorateMethod);
      const lazySection = section => util.lazyMethods({}, Object.keys(tx[section]), method => method.startsWith('$') ? tx[section][method] : this._decorateExtrinsicEntry(tx[section][method], result));
      const sections = Object.keys(tx);
      for (let i = 0; i < sections.length; i++) {
        util.lazyMethod(result, sections[i], lazySection);
      }
      return result;
    }
    _decorateExtrinsicEntry(method, creator) {
      const decorated = (...params) => creator(method(...params));
      decorated.is = other => method.is(other);
      return this._decorateFunctionMeta(method, decorated);
    }
    _decorateStorage({
      query,
      registry
    }, decorateMethod, blockHash) {
      const result = {};
      const lazySection = section => util.lazyMethods({}, Object.keys(query[section]), method => blockHash ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash) : this._decorateStorageEntry(query[section][method], decorateMethod));
      const sections = Object.keys(query);
      for (let i = 0; i < sections.length; i++) {
        util.lazyMethod(result, sections[i], lazySection);
      }
      return result;
    }
    _decorateStorageEntry(creator, decorateMethod) {
      const getArgs = (args, registry) => extractStorageArgs(registry || this.#registry, creator, args);
      const getQueryAt = blockHash => from(this.at(blockHash)).pipe(map(api => getAtQueryFn(api, creator)));
      const decorated = this._decorateStorageCall(creator, decorateMethod);
      decorated.creator = creator;
      decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => q(...args))));
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
      decorated.is = key => key.section === creator.section && key.method === creator.method;
      decorated.key = (...args) => util.u8aToHex(util.compactStripLength(creator(...args))[1]);
      decorated.keyPrefix = (...args) => util.u8aToHex(creator.keyPrefix(...args));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
      decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
        decorated.entriesAt = decorateMethod(memo(this.#instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._retrieveMapEntries(q.creator, blockHash, args)))));
        decorated.entriesPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapEntriesPaged(creator, undefined, opts)));
        decorated.keys = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
        decorated.keysAt = decorateMethod(memo(this.#instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._retrieveMapKeys(q.creator, blockHash, args)))));
        decorated.keysPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapKeysPaged(creator, undefined, opts)));
      }
      if (this.supportMulti && creator.meta.type.isMap) {
        decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]])) : this._retrieveMulti(args.map(a => [creator, a])));
      }
      return this._decorateFunctionMeta(creator, decorated);
    }
    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
      const getArgs = args => extractStorageArgs(registry, creator, args);
      const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
      decorated.creator = creator;
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
      decorated.is = key => key.section === creator.section && key.method === creator.method;
      decorated.key = (...args) => util.u8aToHex(util.compactStripLength(creator(creator.meta.type.isPlain ? undefined : args))[1]);
      decorated.keyPrefix = (...keys) => util.u8aToHex(creator.keyPrefix(...keys));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
        decorated.entriesPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
        decorated.keys = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
        decorated.keysPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapKeysPaged(creator, blockHash, opts)));
      }
      if (this.supportMulti && creator.meta.type.isMap) {
        decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]]), blockHash) : this._retrieveMulti(args.map(a => [creator, a]), blockHash));
      }
      return this._decorateFunctionMeta(creator, decorated);
    }
    _queueStorage(call, queue) {
      const query = queue === this.#storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      let queueIdx = queue.length - 1;
      let valueIdx = 0;
      let valueObs;
      if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
        queueIdx++;
        valueObs = from(
        Promise.resolve().then(() => {
          const calls = queue[queueIdx][1];
          delete queue[queueIdx];
          return calls;
        })).pipe(switchMap(calls => query(calls)));
        queue.push([valueObs, [call]]);
      } else {
        valueObs = queue[queueIdx][0];
        valueIdx = queue[queueIdx][1].length;
        queue[queueIdx][1].push(call);
      }
      return valueObs.pipe(map(values => values[valueIdx]));
    }
    _decorateStorageCall(creator, decorateMethod) {
      return decorateMethod((...args) => {
        const call = extractStorageArgs(this.#registry, creator, args);
        if (!this.hasSubscriptions) {
          return this._rpcCore.state.getStorage(call);
        }
        return this._queueStorage(call, this.#storageSubQ);
      }, {
        methodName: creator.method,
        overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.#registry, creator, args), this.#storageGetQ)
      });
    }
    _retrieveMulti(keys, blockHash) {
      if (!keys.length) {
        return of([]);
      }
      const query = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      if (keys.length <= PAGE_SIZE_V) {
        return blockHash ? query(keys, blockHash) : query(keys);
      }
      return combineLatest(util.arrayChunk(keys, PAGE_SIZE_V).map(k => blockHash ? query(k, blockHash) : query(k))).pipe(map(util.arrayFlatten));
    }
    _retrieveMapKeys({
      iterKey,
      meta,
      method,
      section
    }, at, args) {
      if (!iterKey || !meta.type.isMap) {
        throw new Error('keys can only be retrieved on maps');
      }
      const headKey = iterKey(...args).toHex();
      const startSubject = new BehaviorSubject(headKey);
      const query = at ? startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at) : startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
      const setMeta = key => key.setMeta(meta, section, method);
      return startSubject.pipe(switchMap(query), map(keys => keys.map(setMeta)), tap(keys => util.nextTick(() => {
        keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
      })), toArray(),
      map(util.arrayFlatten));
    }
    _retrieveMapKeysPaged({
      iterKey,
      meta,
      method,
      section
    }, at, opts) {
      if (!iterKey || !meta.type.isMap) {
        throw new Error('keys can only be retrieved on maps');
      }
      const setMeta = key => key.setMeta(meta, section, method);
      const query = at ? headKey => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at) : headKey => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
      return query(iterKey(...opts.args).toHex()).pipe(map(keys => keys.map(setMeta)));
    }
    _retrieveMapEntries(entry, at, args) {
      const query = at ? keys => this._rpcCore.state.queryStorageAt(keys, at) : keys => this._rpcCore.state.queryStorageAt(keys);
      return this._retrieveMapKeys(entry, at, args).pipe(switchMap(keys => keys.length ? combineLatest(util.arrayChunk(keys, PAGE_SIZE_V).map(query)).pipe(map(valsArr => util.arrayFlatten(valsArr).map((value, index) => [keys[index], value]))) : of([])));
    }
    _retrieveMapEntriesPaged(entry, at, opts) {
      const query = at ? keys => this._rpcCore.state.queryStorageAt(keys, at) : keys => this._rpcCore.state.queryStorageAt(keys);
      return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap(keys => keys.length ? query(keys).pipe(map(valsArr => valsArr.map((value, index) => [keys[index], value]))) : of([])));
    }
    _decorateDeriveRx(decorateMethod) {
      var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;
      const specName = (_this$_runtimeVersion = this._runtimeVersion) === null || _this$_runtimeVersion === void 0 ? void 0 : _this$_runtimeVersion.specName.toString();
      const available = getAvailableDerives(this.#instanceId, this._rx, util.objectSpread({}, this._options.derives, (_this$_options$typesB = this._options.typesBundle) === null || _this$_options$typesB === void 0 ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) === null || _this$_options$typesB2 === void 0 ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName || '']) === null || _this$_options$typesB3 === void 0 ? void 0 : _this$_options$typesB3.derives));
      return decorateDeriveSections(decorateMethod, available);
    }
    _decorateDerive(decorateMethod) {
      return decorateDeriveSections(decorateMethod, this._rx.derive);
    }
    _rxDecorateMethod = method => {
      return method;
    };
  }

  const KEEPALIVE_INTERVAL = 10000;
  const l = util.logger('api/init');
  function textToString(t) {
    return t.toString();
  }
  var _atLast = _classPrivateFieldKey("atLast");
  var _healthTimer = _classPrivateFieldKey("healthTimer");
  var _registries = _classPrivateFieldKey("registries");
  var _updateSub = _classPrivateFieldKey("updateSub");
  var _waitingRegistries = _classPrivateFieldKey("waitingRegistries");
  var _onProviderConnect = _classPrivateFieldKey("onProviderConnect");
  var _onProviderDisconnect = _classPrivateFieldKey("onProviderDisconnect");
  var _onProviderError = _classPrivateFieldKey("onProviderError");
  class Init extends Decorate {
    constructor(options, type, decorateMethod) {
      super(options, type, decorateMethod);
      Object.defineProperty(this, _onProviderError, {
        value: _onProviderError2
      });
      Object.defineProperty(this, _onProviderDisconnect, {
        value: _onProviderDisconnect2
      });
      Object.defineProperty(this, _onProviderConnect, {
        value: _onProviderConnect2
      });
      Object.defineProperty(this, _atLast, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _healthTimer, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _registries, {
        writable: true,
        value: []
      });
      Object.defineProperty(this, _updateSub, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _waitingRegistries, {
        writable: true,
        value: {}
      });
      this.registry.setKnownTypes(options);
      if (!options.source) {
        this.registerTypes(options.types);
      } else {
        _classPrivateFieldBase(this, _registries)[_registries] = _classPrivateFieldBase(options.source, _registries)[_registries];
      }
      this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
      this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
      if (this.supportMulti) {
        this._queryMulti = this._decorateMulti(this._decorateMethod);
        this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
      }
      this._rx.signer = options.signer;
      this._rpcCore.setRegistrySwap(blockHash => this.getBlockRegistry(blockHash));
      this._rpcCore.setResolveBlockHash(blockNumber => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
      if (this.hasSubscriptions) {
        this._rpcCore.provider.on('disconnected', () => _classPrivateFieldBase(this, _onProviderDisconnect)[_onProviderDisconnect]());
        this._rpcCore.provider.on('error', e => _classPrivateFieldBase(this, _onProviderError)[_onProviderError](e));
        this._rpcCore.provider.on('connected', () => _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]());
      } else if (!this._options.noInitWarn) {
        l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
      }
      if (this._rpcCore.provider.isConnected) {
        _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]();
      }
    }
    _initRegistry(registry, chain, version, metadata, chainProps) {
      registry.clearCache();
      registry.setChainProperties(chainProps || this.registry.getChainProperties());
      registry.setKnownTypes(this._options);
      registry.register(getSpecTypes(registry, chain, version.specName, version.specVersion));
      registry.setHasher(getSpecHasher(registry, chain, version.specName));
      if (registry.knownTypes.typesBundle) {
        registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version.specName);
      }
      registry.setMetadata(metadata, undefined, util.objectSpread({}, getSpecExtensions(registry, chain, version.specName), this._options.signedExtensions));
    }
    _getDefaultRegistry() {
      return util.assertReturn(_classPrivateFieldBase(this, _registries)[_registries].find(({
        isDefault
      }) => isDefault), 'Initialization error, cannot find the default registry');
    }
    async at(blockHash, knownVersion) {
      const u8aHash = util.u8aToU8a(blockHash);
      const u8aHex = util.u8aToHex(u8aHash);
      const registry = await this.getBlockRegistry(u8aHash, knownVersion);
      if (!_classPrivateFieldBase(this, _atLast)[_atLast] || _classPrivateFieldBase(this, _atLast)[_atLast][0] !== u8aHex) {
        _classPrivateFieldBase(this, _atLast)[_atLast] = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
      }
      return _classPrivateFieldBase(this, _atLast)[_atLast][1];
    }
    async _createBlockRegistry(blockHash, header, version) {
      const registry = new types.TypeRegistry(blockHash);
      const metadata = new types.Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
      this._initRegistry(registry, this._runtimeChain, version, metadata);
      const result = {
        counter: 0,
        lastBlockHash: blockHash,
        metadata,
        registry,
        runtimeVersion: version
      };
      _classPrivateFieldBase(this, _registries)[_registries].push(result);
      return result;
    }
    _cacheBlockRegistryProgress(key, creator) {
      let waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
      if (util.isUndefined(waiting)) {
        waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key] = new Promise((resolve, reject) => {
          creator().then(registry => {
            delete _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
            resolve(registry);
          }).catch(error => {
            delete _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
            reject(error);
          });
        });
      }
      return waiting;
    }
    _getBlockRegistryViaVersion(blockHash, version) {
      if (version) {
        const existingViaVersion = _classPrivateFieldBase(this, _registries)[_registries].find(({
          runtimeVersion: {
            specName,
            specVersion
          }
        }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));
        if (existingViaVersion) {
          existingViaVersion.counter++;
          existingViaVersion.lastBlockHash = blockHash;
          return existingViaVersion;
        }
      }
      return null;
    }
    async _getBlockRegistryViaHash(blockHash) {
      if (!this._genesisHash || !this._runtimeVersion) {
        throw new Error('Cannot retrieve data on an uninitialized chain');
      }
      const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash) ? {
        number: util.BN_ZERO,
        parentHash: this._genesisHash
      } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
      if (header.parentHash.isEmpty) {
        throw new Error('Unable to retrieve header and parent from supplied hash');
      }
      getUpgradeVersion(this._genesisHash, header.number);
      const version = this.registry.createType('RuntimeVersionPartial', await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
      return (
        this._getBlockRegistryViaVersion(blockHash, version) || (
        await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version)))
      );
    }
    async getBlockRegistry(blockHash, knownVersion) {
      return (
        _classPrivateFieldBase(this, _registries)[_registries].find(({
          lastBlockHash
        }) => lastBlockHash && util.u8aEq(lastBlockHash, blockHash)) ||
        this._getBlockRegistryViaVersion(blockHash, knownVersion) || (
        await this._cacheBlockRegistryProgress(util.u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash)))
      );
    }
    async _loadMeta() {
      var _this$_options$source;
      if (this._isReady) {
        return true;
      }
      this._unsubscribeUpdates();
      [this._genesisHash, this._runtimeMetadata] = (_this$_options$source = this._options.source) !== null && _this$_options$source !== void 0 && _this$_options$source._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
      return this._initFromMeta(this._runtimeMetadata);
    }
    async _metaFromSource(source) {
      this._extrinsicType = source.extrinsicVersion;
      this._runtimeChain = source.runtimeChain;
      this._runtimeVersion = source.runtimeVersion;
      const sections = Object.keys(source.rpc);
      const rpcs = [];
      for (let s = 0; s < sections.length; s++) {
        const section = sections[s];
        const methods = Object.keys(source.rpc[section]);
        for (let m = 0; m < methods.length; m++) {
          rpcs.push(`${section}_${methods[m]}`);
        }
      }
      this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
      return [source.genesisHash, source.runtimeMetadata];
    }
    _subscribeUpdates() {
      if (_classPrivateFieldBase(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
        return;
      }
      _classPrivateFieldBase(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap(version => {
        var _this$_runtimeVersion;
        return (
          (_this$_runtimeVersion = this._runtimeVersion) !== null && _this$_runtimeVersion !== void 0 && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map(metadata => {
            l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
            this._runtimeMetadata = metadata;
            this._runtimeVersion = version;
            this._rx.runtimeVersion = version;
            const thisRegistry = this._getDefaultRegistry();
            thisRegistry.metadata = metadata;
            thisRegistry.runtimeVersion = version;
            this._initRegistry(this.registry, this._runtimeChain, version, metadata);
            this._injectMetadata(thisRegistry, true);
            return true;
          }))
        );
      })).subscribe();
    }
    async _metaFromChain(optMetadata) {
      const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([firstValueFrom(this._rpcCore.chain.getBlockHash(0)), firstValueFrom(this._rpcCore.state.getRuntimeVersion()), firstValueFrom(this._rpcCore.system.chain()), firstValueFrom(this._rpcCore.system.properties()), firstValueFrom(this._rpcCore.rpc.methods()), optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())]);
      this._runtimeChain = chain;
      this._runtimeVersion = runtimeVersion;
      this._rx.runtimeVersion = runtimeVersion;
      const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
      const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new types.Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata()));
      this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
      this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain, runtimeVersion.specName));
      this._subscribeUpdates();
      if (!_classPrivateFieldBase(this, _registries)[_registries].length) {
        _classPrivateFieldBase(this, _registries)[_registries].push({
          counter: 0,
          isDefault: true,
          metadata,
          registry: this.registry,
          runtimeVersion
        });
      }
      metadata.getUniqTypes(this._options.throwOnUnknown || false);
      return [genesisHash, metadata];
    }
    _initFromMeta(metadata) {
      this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
      this._rx.extrinsicType = this._extrinsicType;
      this._rx.genesisHash = this._genesisHash;
      this._rx.runtimeVersion = this._runtimeVersion;
      this._injectMetadata(this._getDefaultRegistry(), true);
      this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
      this._derive = this._decorateDerive(this._decorateMethod);
      return true;
    }
    _subscribeHealth() {
      _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = this.hasSubscriptions ? setInterval(() => {
        firstValueFrom(this._rpcCore.system.health.raw()).catch(() => undefined);
      }, KEEPALIVE_INTERVAL) : null;
    }
    _unsubscribeHealth() {
      if (_classPrivateFieldBase(this, _healthTimer)[_healthTimer]) {
        clearInterval(_classPrivateFieldBase(this, _healthTimer)[_healthTimer]);
        _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = null;
      }
    }
    _unsubscribeUpdates() {
      if (_classPrivateFieldBase(this, _updateSub)[_updateSub]) {
        _classPrivateFieldBase(this, _updateSub)[_updateSub].unsubscribe();
        _classPrivateFieldBase(this, _updateSub)[_updateSub] = null;
      }
    }
    _unsubscribe() {
      this._unsubscribeHealth();
      this._unsubscribeUpdates();
    }
  }
  async function _onProviderConnect2() {
    this._isConnected.next(true);
    this.emit('connected');
    try {
      const cryptoReady = this._options.initWasm === false ? true : await utilCrypto.cryptoWaitReady();
      const hasMeta = await this._loadMeta();
      this._subscribeHealth();
      if (hasMeta && !this._isReady && cryptoReady) {
        this._isReady = true;
        this.emit('ready', this);
      }
    } catch (_error) {
      const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
      l.error(error);
      this.emit('error', error);
    }
  }
  function _onProviderDisconnect2() {
    this._isConnected.next(false);
    this._unsubscribeHealth();
    this.emit('disconnected');
  }
  function _onProviderError2(error) {
    this.emit('error', error);
  }

  function assertResult(value) {
    if (value === undefined) {
      throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    }
    return value;
  }
  class Getters extends Init {
    get call() {
      return assertResult(this._call);
    }
    get consts() {
      return assertResult(this._consts);
    }
    get derive() {
      return assertResult(this._derive);
    }
    get errors() {
      return assertResult(this._errors);
    }
    get events() {
      return assertResult(this._events);
    }
    get extrinsicVersion() {
      return this._extrinsicType;
    }
    get genesisHash() {
      return assertResult(this._genesisHash);
    }
    get isConnected() {
      return this._isConnected.getValue();
    }
    get libraryInfo() {
      return `${packageInfo.name} v${packageInfo.version}`;
    }
    get query() {
      return assertResult(this._query);
    }
    get queryMulti() {
      return assertResult(this._queryMulti);
    }
    get rpc() {
      return assertResult(this._rpc);
    }
    get runtimeChain() {
      return assertResult(this._runtimeChain);
    }
    get runtimeMetadata() {
      return assertResult(this._runtimeMetadata);
    }
    get runtimeVersion() {
      return assertResult(this._runtimeVersion);
    }
    get rx() {
      return assertResult(this._rx);
    }
    get stats() {
      return this._rpcCore.provider.stats;
    }
    get type() {
      return this._type;
    }
    get tx() {
      return assertResult(this._extrinsics);
    }
    findCall(callIndex) {
      return findCall(this.registry, callIndex);
    }
    findError(errorIndex) {
      return findError(this.registry, errorIndex);
    }
  }

  class ApiBase extends Getters {
    constructor(options = {}, type, decorateMethod) {
      super(options, type, decorateMethod);
    }
    connect() {
      return this._rpcCore.connect();
    }
    disconnect() {
      this._unsubscribe();
      return this._rpcCore.disconnect();
    }
    setSigner(signer) {
      this._rx.signer = signer;
    }
    async sign(address, data, {
      signer
    } = {}) {
      if (util.isString(address)) {
        const _signer = signer || this._rx.signer;
        if (!_signer || !_signer.signRaw) {
          throw new Error('No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
        }
        return (await _signer.signRaw(util.objectSpread({
          type: 'bytes'
        }, data, {
          address
        }))).signature;
      }
      return util.u8aToHex(address.sign(util.u8aToU8a(data.data)));
    }
  }

  class Combinator {
    #allHasFired = false;
    #callback;
    #fired = [];
    #fns = [];
    #isActive = true;
    #results = [];
    #subscriptions = [];
    constructor(fns, callback) {
      this.#callback = callback;
      this.#subscriptions = fns.map(async (input, index) => {
        const [fn, ...args] = Array.isArray(input) ? input : [input];
        this.#fired.push(false);
        this.#fns.push(fn);
        return fn(...args, this._createCallback(index));
      });
    }
    _allHasFired() {
      this.#allHasFired || (this.#allHasFired = this.#fired.filter(hasFired => !hasFired).length === 0);
      return this.#allHasFired;
    }
    _createCallback(index) {
      return value => {
        this.#fired[index] = true;
        this.#results[index] = value;
        this._triggerUpdate();
      };
    }
    _triggerUpdate() {
      if (!this.#isActive || !util.isFunction(this.#callback) || !this._allHasFired()) {
        return;
      }
      try {
        this.#callback(this.#results);
      } catch (error) {
      }
    }
    unsubscribe() {
      if (!this.#isActive) {
        return;
      }
      this.#isActive = false;
      this.#subscriptions.forEach(async subscription => {
        try {
          const unsubscribe = await subscription;
          if (util.isFunction(unsubscribe)) {
            unsubscribe();
          }
        } catch (error) {
        }
      });
    }
  }

  function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
      reject: error => {
        if (!isCompleted) {
          isCompleted = true;
          reject(error);
        }
        return EMPTY;
      },
      resolve: value => {
        if (!isCompleted) {
          isCompleted = true;
          resolve(value);
        }
      }
    };
  }
  function extractArgs(args, needsCallback) {
    const actualArgs = args.slice();
    const callback = args.length && util.isFunction(args[args.length - 1]) ? actualArgs.pop() : undefined;
    if (needsCallback && !util.isFunction(callback)) {
      throw new Error('Expected a callback to be passed with subscriptions');
    }
    return [actualArgs, callback];
  }
  function decorateCall(method, args) {
    return new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      const subscription = method(...args).pipe(catchError(error => tracker.reject(error))).subscribe(result => {
        tracker.resolve(result);
        util.nextTick(() => subscription.unsubscribe());
      });
    });
  }
  function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      const subscription = method(...args).pipe(catchError(error => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {
        util.nextTick(() => resultCb(result));
      });
    });
  }
  function toPromiseMethod(method, options) {
    const needsCallback = !!(options && options.methodName && options.methodName.includes('subscribe'));
    return function (...args) {
      const [actualArgs, resultCb] = extractArgs(args, needsCallback);
      return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);
    };
  }

  class ApiPromise extends ApiBase {
    #isReadyPromise;
    #isReadyOrErrorPromise;
    constructor(options) {
      super(options, 'promise', toPromiseMethod);
      this.#isReadyPromise = new Promise(resolve => {
        super.once('ready', () => resolve(this));
      });
      this.#isReadyOrErrorPromise = new Promise((resolve, reject) => {
        const tracker = promiseTracker(resolve, reject);
        super.once('ready', () => tracker.resolve(this));
        super.once('error', error => tracker.reject(error));
      });
    }
    static create(options) {
      const instance = new ApiPromise(options);
      if (options && options.throwOnConnect) {
        return instance.isReadyOrError;
      }
      instance.isReadyOrError.catch(() => {
      });
      return instance.isReady;
    }
    get isReady() {
      return this.#isReadyPromise;
    }
    get isReadyOrError() {
      return this.#isReadyOrErrorPromise;
    }
    clone() {
      return new ApiPromise(util.objectSpread({}, this._options, {
        source: this
      }));
    }
    async combineLatest(fns, callback) {
      const combinator = new Combinator(fns, callback);
      return () => {
        combinator.unsubscribe();
      };
    }
  }

  function toRxMethod(method) {
    return method;
  }

  class ApiRx extends ApiBase {
    #isReadyRx;
    constructor(options) {
      super(options, 'rxjs', toRxMethod);
      this.#isReadyRx = from(
      new Promise(resolve => {
        super.on('ready', () => resolve(this));
      }));
    }
    static create(options) {
      return new ApiRx(options).isReady;
    }
    get isReady() {
      return this.#isReadyRx;
    }
    clone() {
      return new ApiRx(util.objectSpread({}, this._options, {
        source: this
      }));
    }
  }

  const polkadot = `{"name":"Polkadot","id":"polkadot","chainType":"Live","bootNodes":["/dns/polkadot-connect-0.parity.io/tcp/443/wss/p2p/12D3KooWEPmjoRpDSUuiTjvyNDd8fejZ9eNWH5bE965nyBMDrB4o","/dns/polkadot-connect-1.parity.io/tcp/443/wss/p2p/12D3KooWLvcA24g6sT9YTaQyinwowMbLF5z7iMLoxZpEiV9pSmNf","/dns/polkadot-connect-2.parity.io/tcp/443/wss/p2p/12D3KooWDhp18HYzJuVX2jLhtjQgAhT1XWGqah42StoUJpkLvh2o","/dns/polkadot-connect-3.parity.io/tcp/443/wss/p2p/12D3KooWEsPEadSjLAPyxckqVJkp54aVdPuX3DD6a1FTL2y5cB9x","/dns/polkadot-connect-4.parity.io/tcp/443/wss/p2p/12D3KooWFfG1SQvcPoUK2N41cx7r52KYXKpRtZxfLZk8xtVzpp4d","/dns/polkadot-connect-5.parity.io/tcp/443/wss/p2p/12D3KooWDmQPkBvQGg9wjBdFThtWj3QCDVQyHJ1apfWrHvjwbYS8","/dns/polkadot-connect-6.parity.io/tcp/443/wss/p2p/12D3KooWBKtPpCnVTTzD7fPpCdFsrsYZ5K8fwmsLabb1JBuCycYs","/dns/polkadot-connect-7.parity.io/tcp/443/wss/p2p/12D3KooWP3BsFY6UaiLjEJ3YbDp6q6SMQgAHB15qKj41DUZQLMqD","/dns/p2p.0.polkadot.network/tcp/30333/p2p/12D3KooWHsvEicXjWWraktbZ4MQBizuyADQtuEGr3NbDvtm5rFA5","/dns/p2p.1.polkadot.network/tcp/30333/p2p/12D3KooWQz2q2UWVCiy9cFX1hHYEmhSKQB2hjEZCccScHLGUPjcc","/dns/p2p.2.polkadot.network/tcp/30333/p2p/12D3KooWNHxjYbDLLbDNZ2tq1kXgif5MSiLTUWJKcDdedKu4KaG8","/dns/p2p.3.polkadot.network/tcp/30333/p2p/12D3KooWGJQysxrQcSvUWWNw88RkqYvJhH3ZcDpWJ8zrXKhLP5Vr","/dns/p2p.4.polkadot.network/tcp/30333/p2p/12D3KooWKer8bYqpYjwurVABu13mkELpX2X7mSpEicpjShLeg7D6","/dns/p2p.5.polkadot.network/tcp/30333/p2p/12D3KooWSRjL9LcEQd5u2fQTbyLxTEHq1tUFgQ6amXSp8Eu7TfKP","/dns/cc1-0.parity.tech/tcp/30333/p2p/12D3KooWSz8r2WyCdsfWHgPyvD8GKQdJ1UAiRmrcrs8sQB3fe2KU","/dns/cc1-1.parity.tech/tcp/30333/p2p/12D3KooWFN2mhgpkJsDBuNuE5427AcDrsib8EoqGMZmkxWwx3Md4"],"telemetryEndpoints":[["wss://telemetry.polkadot.io/submit/",0]],"protocolId":"dot","properties":{"ss58Format":0,"tokenDecimals":10,"tokenSymbol":"DOT"},"forkBlocks":null,"badBlocks":null,"consensusEngine":null,"genesis":{"stateRootHash":"0x29d0d972cd27cbc511e9589fcb7a4506d5eb6a9e8df205f00472e5ab354a4e17"},"lightSyncState":{"babeEpochChanges":"","babeFinalizedBlockWeight":2802052,"finalizedBlockHeader":"0xa258631e770164af96c1ade233932bb2c686d4d321989d89c6c621a556c65ddc3a51ad02207c8e09e6e62e9ccf94ccc6b95858747328c2fed1895cc61cd954550acafe7f6ee360d6d837f5b9647fca3d8362e31f52ccbcb2f17a49d479eb0bb7c4b6aea3080642414245b50101cb000000cd10791000000000562ba1de9f9255da3170a20e2e045581f389414b776ffa2c1af5af47fad9b54ec674bc0550465912f911b66a3f7faa5f744effc32641208fbebe96febb7e950b53b91d716eee2c37ea63b6678cf3d3bd9d5782676f54d0faced2f0e072e8e304054241424501014e2d317169a72772ff98afc7781ee168ad89205b3973fa87a050dda467a455453dbfe1c37ba04c78a2a4edc52b08df227216571fad800e35792799f9fc081186","grandpaAuthoritySet":""}}`;

  const polkadot$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': polkadot
  });

  function utf8BytesToString(buffer, offset, length) {
      checkRange(buffer, offset, length);
      return new TextDecoder().decode(buffer.slice(offset, offset + length));
  }
  function readUInt32LE(buffer, offset) {
      checkRange(buffer, offset, 4);
      return (buffer[offset] | (buffer[offset + 1] << 8) | (buffer[offset + 2] << 16)) + (buffer[offset + 3] * 0x1000000);
  }
  function writeUInt8(buffer, offset, value) {
      checkRange(buffer, offset, 1);
      buffer[offset] = value & 0xff;
  }
  function writeUInt32LE(buffer, offset, value) {
      checkRange(buffer, offset, 4);
      buffer[offset + 3] = (value >>> 24) & 0xff;
      buffer[offset + 2] = (value >>> 16) & 0xff;
      buffer[offset + 1] = (value >>> 8) & 0xff;
      buffer[offset] = value & 0xff;
  }
  function checkRange(buffer, offset, length) {
      if (!Number.isInteger(offset) || offset < 0)
          throw new RangeError();
      if (offset + length > buffer.length)
          throw new RangeError();
  }

  //! Exports a function that provides bindings for the bindings found in the Rust part of the code.
  class ConnectionError extends Error {
      constructor(message) {
          super(message);
      }
  }
  function smoldotLightBindingsBuilder (config) {
      let connections = {};
      const killedTracked = { killed: false };
      const killAll = () => {
          killedTracked.killed = true;
          for (const connection in connections) {
              connections[connection].close();
              delete connections[connection];
          }
      };
      const imports = {
          panic: (ptr, len) => {
              const instance = config.instance;
              ptr >>>= 0;
              len >>>= 0;
              const message = utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), ptr, len);
              config.onPanic(message);
          },
          json_rpc_respond: (ptr, len, chainId) => {
              if (killedTracked.killed)
                  return;
              const instance = config.instance;
              ptr >>>= 0;
              len >>>= 0;
              let message = utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), ptr, len);
              if (config.jsonRpcCallback) {
                  config.jsonRpcCallback(message, chainId);
              }
          },
          database_content_ready: (ptr, len, chainId) => {
              if (killedTracked.killed)
                  return;
              const instance = config.instance;
              ptr >>>= 0;
              len >>>= 0;
              let content = utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), ptr, len);
              if (config.databaseContentCallback) {
                  config.databaseContentCallback(content, chainId);
              }
          },
          log: (level, targetPtr, targetLen, messagePtr, messageLen) => {
              if (killedTracked.killed)
                  return;
              const instance = config.instance;
              targetPtr >>>= 0;
              targetLen >>>= 0;
              messagePtr >>>= 0;
              messageLen >>>= 0;
              if (config.logCallback) {
                  const mem = new Uint8Array(instance.exports.memory.buffer);
                  let target = utf8BytesToString(mem, targetPtr, targetLen);
                  let message = utf8BytesToString(mem, messagePtr, messageLen);
                  config.logCallback(level, target, message);
              }
          },
          unix_time_ms: () => Date.now(),
          monotonic_clock_ms: () => config.performanceNow(),
          start_timer: (id, ms) => {
              if (killedTracked.killed)
                  return;
              const instance = config.instance;
              if (ms > 2147483647)
                  ms = 2147483647;
              if (ms == 0 && typeof setImmediate === "function") {
                  setImmediate(() => {
                      if (killedTracked.killed)
                          return;
                      try {
                          instance.exports.timer_finished(id);
                      }
                      catch (_error) { }
                  });
              }
              else {
                  setTimeout(() => {
                      if (killedTracked.killed)
                          return;
                      try {
                          instance.exports.timer_finished(id);
                      }
                      catch (_error) { }
                  }, ms);
              }
          },
          connection_new: (connectionId, addrPtr, addrLen, errorPtrPtr) => {
              const instance = config.instance;
              addrPtr >>>= 0;
              addrLen >>>= 0;
              errorPtrPtr >>>= 0;
              if (!!connections[connectionId]) {
                  throw new Error("internal error: connection already allocated");
              }
              try {
                  if (killedTracked.killed)
                      throw new Error("killAll invoked");
                  const address = utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), addrPtr, addrLen);
                  const connec = config.connect({
                      address,
                      onOpen: (info) => {
                          if (killedTracked.killed)
                              return;
                          try {
                              switch (info.type) {
                                  case 'single-stream': {
                                      instance.exports.connection_open_single_stream(connectionId);
                                      break;
                                  }
                                  case 'multi-stream': {
                                      const ptr = instance.exports.alloc(info.peerId.length) >>> 0;
                                      new Uint8Array(instance.exports.memory.buffer).set(info.peerId, ptr);
                                      instance.exports.connection_open_multi_stream(connectionId, ptr, info.peerId.length);
                                      break;
                                  }
                              }
                          }
                          catch (_error) { }
                      },
                      onConnectionClose: (message) => {
                          if (killedTracked.killed)
                              return;
                          try {
                              const encoded = new TextEncoder().encode(message);
                              const ptr = instance.exports.alloc(encoded.length) >>> 0;
                              new Uint8Array(instance.exports.memory.buffer).set(encoded, ptr);
                              instance.exports.connection_closed(connectionId, ptr, encoded.length);
                          }
                          catch (_error) { }
                      },
                      onMessage: (message, streamId) => {
                          if (killedTracked.killed)
                              return;
                          try {
                              const ptr = instance.exports.alloc(message.length) >>> 0;
                              new Uint8Array(instance.exports.memory.buffer).set(message, ptr);
                              instance.exports.stream_message(connectionId, streamId || 0, ptr, message.length);
                          }
                          catch (_error) { }
                      },
                      onStreamOpened: (streamId, direction) => {
                          if (killedTracked.killed)
                              return;
                          try {
                              instance.exports.connection_stream_opened(connectionId, streamId, direction === 'outbound' ? 1 : 0);
                          }
                          catch (_error) { }
                      },
                      onStreamClose: (streamId) => {
                          if (killedTracked.killed)
                              return;
                          try {
                              instance.exports.stream_closed(connectionId, streamId);
                          }
                          catch (_error) { }
                      }
                  });
                  connections[connectionId] = connec;
                  return 0;
              }
              catch (error) {
                  const isBadAddress = error instanceof ConnectionError;
                  let errorStr = "Unknown error";
                  if (error instanceof Error) {
                      errorStr = error.toString();
                  }
                  const mem = new Uint8Array(instance.exports.memory.buffer);
                  const encoded = new TextEncoder().encode(errorStr);
                  const ptr = instance.exports.alloc(encoded.length) >>> 0;
                  mem.set(encoded, ptr);
                  writeUInt32LE(mem, errorPtrPtr, ptr);
                  writeUInt32LE(mem, errorPtrPtr + 4, encoded.length);
                  writeUInt8(mem, errorPtrPtr + 8, isBadAddress ? 1 : 0);
                  return 1;
              }
          },
          connection_close: (connectionId) => {
              if (killedTracked.killed)
                  return;
              const connection = connections[connectionId];
              connection.close();
              delete connections[connectionId];
          },
          connection_stream_open: (connectionId) => {
              const connection = connections[connectionId];
              connection.openOutSubstream();
          },
          connection_stream_close: (connectionId, streamId) => {
              const connection = connections[connectionId];
              connection.close(streamId);
          },
          stream_send: (connectionId, streamId, ptr, len) => {
              if (killedTracked.killed)
                  return;
              const instance = config.instance;
              ptr >>>= 0;
              len >>>= 0;
              const data = new Uint8Array(instance.exports.memory.buffer).slice(ptr, ptr + len);
              const connection = connections[connectionId];
              connection.send(data, streamId);
          },
          current_task_entered: (ptr, len) => {
              if (killedTracked.killed)
                  return;
              const instance = config.instance;
              ptr >>>= 0;
              len >>>= 0;
              const taskName = utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), ptr, len);
              if (config.currentTaskCallback)
                  config.currentTaskCallback(taskName);
          },
          current_task_exit: () => {
              if (killedTracked.killed)
                  return;
              if (config.currentTaskCallback)
                  config.currentTaskCallback(null);
          }
      };
      return { imports, killAll };
  }

  //! Exports a function that provides bindings for the Wasi interface.
  const wasiBindingsBuilder = (config) => {
      let stdoutBuffer = "";
      let stderrBuffer = "";
      return {
          random_get: (ptr, len) => {
              const instance = config.instance;
              ptr >>>= 0;
              len >>>= 0;
              const baseBuffer = new Uint8Array(instance.exports.memory.buffer)
                  .slice(ptr, ptr + len);
              for (let iter = 0; iter < len; iter += 65536) {
                  config.getRandomValues(baseBuffer.slice(iter, iter + 65536));
              }
              return 0;
          },
          fd_write: (fd, addr, num, outPtr) => {
              const instance = config.instance;
              outPtr >>>= 0;
              if (fd != 1 && fd != 2) {
                  return 8;
              }
              const mem = new Uint8Array(instance.exports.memory.buffer);
              let toWrite = "";
              let totalLength = 0;
              for (let i = 0; i < num; i++) {
                  const buf = readUInt32LE(mem, addr + 4 * i * 2);
                  const bufLen = readUInt32LE(mem, addr + 4 * (i * 2 + 1));
                  toWrite += utf8BytesToString(mem, buf, bufLen);
                  totalLength += bufLen;
              }
              const flushBuffer = (string) => {
                  while (true) {
                      const index = string.indexOf('\n');
                      if (index != -1) {
                          console.log(string.substring(0, index));
                          string = string.substring(index + 1);
                      }
                      else {
                          return string;
                      }
                  }
              };
              if (fd == 1) {
                  stdoutBuffer += toWrite;
                  stdoutBuffer = flushBuffer(stdoutBuffer);
              }
              else if (fd == 2) {
                  stderrBuffer += toWrite;
                  stderrBuffer = flushBuffer(stderrBuffer);
              }
              writeUInt32LE(mem, outPtr, totalLength);
              return 0;
          },
          sched_yield: () => {
              return 0;
          },
          proc_exit: (retCode) => {
              config.onProcExit(retCode);
          },
          environ_sizes_get: (argcOut, argvBufSizeOut) => {
              const instance = config.instance;
              argcOut >>>= 0;
              argvBufSizeOut >>>= 0;
              let totalLen = 0;
              config.envVars.forEach(e => totalLen += new TextEncoder().encode(e).length + 1);
              const mem = new Uint8Array(instance.exports.memory.buffer);
              writeUInt32LE(mem, argcOut, config.envVars.length);
              writeUInt32LE(mem, argvBufSizeOut, totalLen);
              return 0;
          },
          environ_get: (argv, argvBuf) => {
              const instance = config.instance;
              argv >>>= 0;
              argvBuf >>>= 0;
              const mem = new Uint8Array(instance.exports.memory.buffer);
              let argvPos = 0;
              let argvBufPos = 0;
              config.envVars.forEach(envVar => {
                  const encoded = new TextEncoder().encode(envVar);
                  writeUInt32LE(mem, argv + argvPos, argvBuf + argvBufPos);
                  argvPos += 4;
                  mem.set(encoded, argvBuf + argvBufPos);
                  argvBufPos += encoded.length;
                  writeUInt8(mem, argvBuf + argvBufPos, 0);
                  argvBufPos += 1;
              });
              return 0;
          },
      };
  };

  function wasm0 () { return ""; }

  function wasm1 () { return ""; }

  function wasm2 () { return ""; }

  const wasmBase64 = "" + wasm0() + wasm1() + wasm2();

  var __awaiter$2 = (global && global.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function startInstance(config, platformBindings) {
      return __awaiter$2(this, void 0, void 0, function* () {
          const wasmBytecode = yield platformBindings.base64DecodeAndZlibInflate(wasmBase64);
          let killAll;
          const smoldotJsConfig = Object.assign({ performanceNow: platformBindings.performanceNow, connect: platformBindings.connect, onPanic: (message) => {
                  killAll();
                  config.onWasmPanic(message);
                  throw new Error();
              } }, config);
          const wasiConfig = {
              envVars: [],
              getRandomValues: platformBindings.getRandomValues,
              onProcExit: (retCode) => {
                  killAll();
                  config.onWasmPanic(`proc_exit called: ${retCode}`);
                  throw new Error();
              }
          };
          const { imports: smoldotBindings, killAll: smoldotBindingsKillAll } = smoldotLightBindingsBuilder(smoldotJsConfig);
          killAll = smoldotBindingsKillAll;
          const result = yield WebAssembly.instantiate(wasmBytecode, {
              "smoldot": smoldotBindings,
              "wasi_snapshot_preview1": wasiBindingsBuilder(wasiConfig),
          });
          const instance = result.instance;
          smoldotJsConfig.instance = instance;
          wasiConfig.instance = instance;
          return instance;
      });
  }

  var __awaiter$1 = (global && global.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function start$2(configMessage, platformBindings) {
      let state;
      const crashError = {};
      const currentTask = { name: null };
      const printError = { printError: true };
      let chains = new Map();
      const config = {
          onWasmPanic: (message) => {
              crashError.error = new CrashError(message);
              if (!printError.printError)
                  return;
              console.error("Smoldot has panicked" +
                  (currentTask.name ? (" while executing task `" + currentTask.name + "`") : "") +
                  ". This is a bug in smoldot. Please open an issue at " +
                  "https://github.com/paritytech/smoldot/issues with the following message:\n" +
                  message);
          },
          logCallback: (level, target, message) => {
              configMessage.logCallback(level, target, message);
          },
          jsonRpcCallback: (data, chainId) => {
              var _a;
              const cb = (_a = chains.get(chainId)) === null || _a === void 0 ? void 0 : _a.jsonRpcCallback;
              if (cb)
                  cb(data);
          },
          databaseContentCallback: (data, chainId) => {
              var _a;
              const promises = (_a = chains.get(chainId)) === null || _a === void 0 ? void 0 : _a.databasePromises;
              promises.shift().resolve(data);
          },
          currentTaskCallback: (taskName) => {
              currentTask.name = taskName;
          },
          cpuRateLimit: configMessage.cpuRateLimit,
      };
      state = {
          initialized: false, promise: startInstance(config, platformBindings).then((instance) => {
              let cpuRateLimit = Math.round(config.cpuRateLimit * 4294967295);
              if (cpuRateLimit < 0)
                  cpuRateLimit = 0;
              if (cpuRateLimit > 4294967295)
                  cpuRateLimit = 4294967295;
              if (!Number.isFinite(cpuRateLimit))
                  cpuRateLimit = 4294967295;
              instance.exports.init(configMessage.maxLogLevel, configMessage.enableCurrentTask ? 1 : 0, cpuRateLimit);
              state = { initialized: true, instance };
              return instance;
          })
      };
      function queueOperation(operation) {
          return __awaiter$1(this, void 0, void 0, function* () {
              if (!state.initialized) {
                  return state.promise.then((instance) => operation(instance));
              }
              else {
                  return operation(state.instance);
              }
          });
      }
      return {
          request: (request, chainId) => {
              if (!state.initialized)
                  throw new Error("Internal error");
              if (crashError.error)
                  throw crashError.error;
              try {
                  const encoded = new TextEncoder().encode(request);
                  const ptr = state.instance.exports.alloc(encoded.length) >>> 0;
                  new Uint8Array(state.instance.exports.memory.buffer).set(encoded, ptr);
                  state.instance.exports.json_rpc_send(ptr, encoded.length, chainId);
              }
              catch (_error) {
                  console.assert(crashError.error);
                  throw crashError.error;
              }
          },
          addChain: (chainSpec, databaseContent, potentialRelayChains, jsonRpcCallback) => {
              return queueOperation((instance) => {
                  if (crashError.error)
                      throw crashError.error;
                  try {
                      const chainSpecEncoded = new TextEncoder().encode(chainSpec);
                      const chainSpecPtr = instance.exports.alloc(chainSpecEncoded.length) >>> 0;
                      new Uint8Array(instance.exports.memory.buffer).set(chainSpecEncoded, chainSpecPtr);
                      const databaseContentEncoded = new TextEncoder().encode(databaseContent);
                      const databaseContentPtr = instance.exports.alloc(databaseContentEncoded.length) >>> 0;
                      new Uint8Array(instance.exports.memory.buffer).set(databaseContentEncoded, databaseContentPtr);
                      const potentialRelayChainsLen = potentialRelayChains.length;
                      const potentialRelayChainsPtr = instance.exports.alloc(potentialRelayChainsLen * 4) >>> 0;
                      for (let idx = 0; idx < potentialRelayChains.length; ++idx) {
                          writeUInt32LE(new Uint8Array(instance.exports.memory.buffer), potentialRelayChainsPtr + idx * 4, potentialRelayChains[idx]);
                      }
                      const chainId = instance.exports.add_chain(chainSpecPtr, chainSpecEncoded.length, databaseContentPtr, databaseContentEncoded.length, !!jsonRpcCallback ? 1 : 0, potentialRelayChainsPtr, potentialRelayChainsLen);
                      if (instance.exports.chain_is_ok(chainId) != 0) {
                          console.assert(!chains.has(chainId));
                          chains.set(chainId, {
                              jsonRpcCallback,
                              databasePromises: new Array()
                          });
                          return { success: true, chainId };
                      }
                      else {
                          const errorMsgLen = instance.exports.chain_error_len(chainId) >>> 0;
                          const errorMsgPtr = instance.exports.chain_error_ptr(chainId) >>> 0;
                          const errorMsg = utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), errorMsgPtr, errorMsgLen);
                          instance.exports.remove_chain(chainId);
                          return { success: false, error: errorMsg };
                      }
                  }
                  catch (_error) {
                      console.assert(crashError.error);
                      throw crashError.error;
                  }
              });
          },
          removeChain: (chainId) => {
              if (!state.initialized)
                  throw new Error("Internal error");
              if (crashError.error)
                  throw crashError.error;
              console.assert(chains.has(chainId));
              chains.delete(chainId);
              try {
                  state.instance.exports.remove_chain(chainId);
              }
              catch (_error) {
                  console.assert(crashError.error);
                  throw crashError.error;
              }
          },
          databaseContent: (chainId, maxUtf8BytesSize) => {
              var _a;
              if (!state.initialized)
                  throw new Error("Internal error");
              if (crashError.error)
                  throw crashError.error;
              console.assert(chains.has(chainId));
              const databaseContentPromises = (_a = chains.get(chainId)) === null || _a === void 0 ? void 0 : _a.databasePromises;
              const promise = new Promise((resolve, reject) => {
                  databaseContentPromises.push({ resolve, reject });
              });
              const twoPower32 = (1 << 30) * 4;
              const maxSize = maxUtf8BytesSize || (twoPower32 - 1);
              const cappedMaxSize = (maxSize >= twoPower32) ? (twoPower32 - 1) : maxSize;
              const twoPower31 = (1 << 30) * 2;
              const converted = (cappedMaxSize >= twoPower31) ?
                  (cappedMaxSize - twoPower32) : cappedMaxSize;
              try {
                  state.instance.exports.database_content(chainId, converted);
                  return promise;
              }
              catch (_error) {
                  console.assert(crashError.error);
                  throw crashError.error;
              }
          },
          startShutdown: () => {
              return queueOperation((instance) => {
                  if (crashError.error)
                      return;
                  try {
                      printError.printError = false;
                      instance.exports.start_shutdown();
                  }
                  catch (_error) {
                  }
              });
          }
      };
  }

  var __awaiter = (global && global.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class AddChainError extends Error {
      constructor(message) {
          super(message);
          this.name = "AddChainError";
      }
  }
  class AlreadyDestroyedError extends Error {
      constructor() {
          super();
          this.name = "AlreadyDestroyedError";
      }
  }
  class JsonRpcDisabledError extends Error {
      constructor() {
          super();
          this.name = "JsonRpcDisabledError";
      }
  }
  class CrashError extends Error {
      constructor(message) {
          super(message);
      }
  }
  function start$1(options, platformBindings) {
      const logCallback = options.logCallback || ((level, target, message) => {
          if (level <= 1) {
              console.error("[%s] %s", target, message);
          }
          else if (level == 2) {
              console.warn("[%s] %s", target, message);
          }
          else if (level == 3) {
              console.info("[%s] %s", target, message);
          }
          else if (level == 4) {
              console.debug("[%s] %s", target, message);
          }
          else {
              console.trace("[%s] %s", target, message);
          }
      });
      let chainIds = new WeakMap();
      let alreadyDestroyedError = null;
      const instance = start$2({
          maxLogLevel: options.maxLogLevel || 3,
          logCallback,
          enableCurrentTask: options.maxLogLevel ? options.maxLogLevel >= 1 : true,
          cpuRateLimit: options.cpuRateLimit || 1.0,
      }, platformBindings);
      return {
          addChain: (options) => __awaiter(this, void 0, void 0, function* () {
              if (alreadyDestroyedError)
                  throw alreadyDestroyedError;
              if (!(typeof options.chainSpec === 'string'))
                  throw new Error("Chain specification must be a string");
              let potentialRelayChainsIds = [];
              if (!!options.potentialRelayChains) {
                  for (const chain of options.potentialRelayChains) {
                      const id = chainIds.get(chain);
                      if (id === undefined)
                          continue;
                      potentialRelayChainsIds.push(id);
                  }
              }
              if (options.jsonRpcCallback) {
                  const cb = options.jsonRpcCallback;
                  options.jsonRpcCallback = (response) => {
                      try {
                          cb(response);
                      }
                      catch (error) {
                          console.warn("Uncaught exception in JSON-RPC callback:", error);
                      }
                  };
              }
              const outcome = yield instance.addChain(options.chainSpec, typeof options.databaseContent === 'string' ? options.databaseContent : "", potentialRelayChainsIds, options.jsonRpcCallback);
              if (!outcome.success)
                  throw new AddChainError(outcome.error);
              const chainId = outcome.chainId;
              const wasDestroyed = { destroyed: false };
              const newChain = {
                  sendJsonRpc: (request) => {
                      if (alreadyDestroyedError)
                          throw alreadyDestroyedError;
                      if (wasDestroyed.destroyed)
                          throw new AlreadyDestroyedError();
                      if (!options.jsonRpcCallback)
                          throw new JsonRpcDisabledError();
                      if (request.length >= 64 * 1024 * 1024) {
                          console.error("Client.sendJsonRpc ignored a JSON-RPC request because it was too large (" + request.length + " bytes)");
                          return;
                      }
                      instance.request(request, chainId);
                  },
                  databaseContent: (maxUtf8BytesSize) => {
                      if (alreadyDestroyedError)
                          return Promise.reject(alreadyDestroyedError);
                      if (wasDestroyed.destroyed)
                          throw new AlreadyDestroyedError();
                      return instance.databaseContent(chainId, maxUtf8BytesSize);
                  },
                  remove: () => {
                      if (alreadyDestroyedError)
                          throw alreadyDestroyedError;
                      if (wasDestroyed.destroyed)
                          throw new AlreadyDestroyedError();
                      wasDestroyed.destroyed = true;
                      console.assert(chainIds.has(newChain));
                      chainIds.delete(newChain);
                      instance.removeChain(chainId);
                  },
              };
              chainIds.set(newChain, chainId);
              return newChain;
          }),
          terminate: () => __awaiter(this, void 0, void 0, function* () {
              if (alreadyDestroyedError)
                  throw alreadyDestroyedError;
              alreadyDestroyedError = new AlreadyDestroyedError();
              instance.startShutdown();
          })
      };
  }

  /*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */
  const Z_FIXED$1               = 4;
  const Z_BINARY              = 0;
  const Z_TEXT                = 1;
  const Z_UNKNOWN$1             = 2;
  function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }
  const STORED_BLOCK = 0;
  const STATIC_TREES = 1;
  const DYN_TREES    = 2;
  const MIN_MATCH$1    = 3;
  const MAX_MATCH$1    = 258;
  const LENGTH_CODES$1  = 29;
  const LITERALS$1      = 256;
  const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
  const D_CODES$1       = 30;
  const BL_CODES$1      = 19;
  const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
  const MAX_BITS$1      = 15;
  const Buf_size      = 16;
  const MAX_BL_BITS = 7;
  const END_BLOCK   = 256;
  const REP_3_6     = 16;
  const REPZ_3_10   = 17;
  const REPZ_11_138 = 18;
  const extra_lbits =
    new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);
  const extra_dbits =
    new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);
  const extra_blbits =
    new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);
  const bl_order =
    new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
  const DIST_CODE_LEN = 512;
  const static_ltree  = new Array((L_CODES$1 + 2) * 2);
  zero$1(static_ltree);
  const static_dtree  = new Array(D_CODES$1 * 2);
  zero$1(static_dtree);
  const _dist_code    = new Array(DIST_CODE_LEN);
  zero$1(_dist_code);
  const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
  zero$1(_length_code);
  const base_length   = new Array(LENGTH_CODES$1);
  zero$1(base_length);
  const base_dist     = new Array(D_CODES$1);
  zero$1(base_dist);
  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree  = static_tree;
    this.extra_bits   = extra_bits;
    this.extra_base   = extra_base;
    this.elems        = elems;
    this.max_length   = max_length;
    this.has_stree    = static_tree && static_tree.length;
  }
  let static_l_desc;
  let static_d_desc;
  let static_bl_desc;
  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;
    this.max_code = 0;
    this.stat_desc = stat_desc;
  }
  const d_code = (dist) => {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  };
  const put_short = (s, w) => {
    s.pending_buf[s.pending++] = (w) & 0xff;
    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
  };
  const send_bits = (s, value, length) => {
    if (s.bi_valid > (Buf_size - length)) {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> (Buf_size - s.bi_valid);
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      s.bi_valid += length;
    }
  };
  const send_code = (s, c, tree) => {
    send_bits(s, tree[c * 2], tree[c * 2 + 1]);
  };
  const bi_reverse = (code, len) => {
    let res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  };
  const bi_flush = (s) => {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  };
  const gen_bitlen = (s, desc) =>
  {
    const tree            = desc.dyn_tree;
    const max_code        = desc.max_code;
    const stree           = desc.stat_desc.static_tree;
    const has_stree       = desc.stat_desc.has_stree;
    const extra           = desc.stat_desc.extra_bits;
    const base            = desc.stat_desc.extra_base;
    const max_length      = desc.stat_desc.max_length;
    let h;
    let n, m;
    let bits;
    let xbits;
    let f;
    let overflow = 0;
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      s.bl_count[bits] = 0;
    }
    tree[s.heap[s.heap_max] * 2 + 1] = 0;
    for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1] = bits;
      if (n > max_code) { continue; }
      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n - base];
      }
      f = tree[n * 2];
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1] + xbits);
      }
    }
    if (overflow === 0) { return; }
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) { bits--; }
      s.bl_count[bits]--;
      s.bl_count[bits + 1] += 2;
      s.bl_count[max_length]--;
      overflow -= 2;
    } while (overflow > 0);
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) { continue; }
        if (tree[m * 2 + 1] !== bits) {
          s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
          tree[m * 2 + 1] = bits;
        }
        n--;
      }
    }
  };
  const gen_codes = (tree, max_code, bl_count) =>
  {
    const next_code = new Array(MAX_BITS$1 + 1);
    let code = 0;
    let bits;
    let n;
    for (bits = 1; bits <= MAX_BITS$1; bits++) {
      next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
    }
    for (n = 0;  n <= max_code; n++) {
      let len = tree[n * 2 + 1];
      if (len === 0) { continue; }
      tree[n * 2] = bi_reverse(next_code[len]++, len);
    }
  };
  const tr_static_init = () => {
    let n;
    let bits;
    let length;
    let code;
    let dist;
    const bl_count = new Array(MAX_BITS$1 + 1);
    length = 0;
    for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < (1 << extra_lbits[code]); n++) {
        _length_code[length++] = code;
      }
    }
    _length_code[length - 1] = code;
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < (1 << extra_dbits[code]); n++) {
        _dist_code[dist++] = code;
      }
    }
    dist >>= 7;
    for (; code < D_CODES$1; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      bl_count[bits] = 0;
    }
    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1] = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1] = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1] = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1] = 8;
      n++;
      bl_count[8]++;
    }
    gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
    for (n = 0; n < D_CODES$1; n++) {
      static_dtree[n * 2 + 1] = 5;
      static_dtree[n * 2] = bi_reverse(n, 5);
    }
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);
  };
  const init_block = (s) => {
    let n;
    for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2] = 0; }
    for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2] = 0; }
    for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2] = 0; }
    s.dyn_ltree[END_BLOCK * 2] = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  };
  const bi_windup = (s) =>
  {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  };
  const copy_block = (s, buf, len, header) =>
  {
    bi_windup(s);
    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    }
    s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
    s.pending += len;
  };
  const smaller = (tree, n, m, depth) => {
    const _n2 = n * 2;
    const _m2 = m * 2;
    return (tree[_n2] < tree[_m2] ||
           (tree[_n2] === tree[_m2] && depth[n] <= depth[m]));
  };
  const pqdownheap = (s, tree, k) =>
  {
    const v = s.heap[k];
    let j = k << 1;
    while (j <= s.heap_len) {
      if (j < s.heap_len &&
        smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      if (smaller(tree, v, s.heap[j], s.depth)) { break; }
      s.heap[k] = s.heap[j];
      k = j;
      j <<= 1;
    }
    s.heap[k] = v;
  };
  const compress_block = (s, ltree, dtree) =>
  {
    let dist;
    let lc;
    let lx = 0;
    let code;
    let extra;
    if (s.last_lit !== 0) {
      do {
        dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
        lc = s.pending_buf[s.l_buf + lx];
        lx++;
        if (dist === 0) {
          send_code(s, lc, ltree);
        } else {
          code = _length_code[lc];
          send_code(s, code + LITERALS$1 + 1, ltree);
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);
          }
          dist--;
          code = d_code(dist);
          send_code(s, code, dtree);
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);
          }
        }
      } while (lx < s.last_lit);
    }
    send_code(s, END_BLOCK, ltree);
  };
  const build_tree = (s, desc) =>
  {
    const tree     = desc.dyn_tree;
    const stree    = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems    = desc.stat_desc.elems;
    let n, m;
    let max_code = -1;
    let node;
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE$1;
    for (n = 0; n < elems; n++) {
      if (tree[n * 2] !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
      } else {
        tree[n * 2 + 1] = 0;
      }
    }
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
      tree[node * 2] = 1;
      s.depth[node] = 0;
      s.opt_len--;
      if (has_stree) {
        s.static_len -= stree[node * 2 + 1];
      }
    }
    desc.max_code = max_code;
    for (n = (s.heap_len >> 1); n >= 1; n--) { pqdownheap(s, tree, n); }
    node = elems;
    do {
      n = s.heap[1];
      s.heap[1] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1);
      m = s.heap[1];
      s.heap[--s.heap_max] = n;
      s.heap[--s.heap_max] = m;
      tree[node * 2] = tree[n * 2] + tree[m * 2];
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1] = tree[m * 2 + 1] = node;
      s.heap[1] = node++;
      pqdownheap(s, tree, 1);
    } while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[1];
    gen_bitlen(s, desc);
    gen_codes(tree, max_code, s.bl_count);
  };
  const scan_tree = (s, tree, max_code) =>
  {
    let n;
    let prevlen = -1;
    let curlen;
    let nextlen = tree[0 * 2 + 1];
    let count = 0;
    let max_count = 7;
    let min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] = 0xffff;
    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1];
      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        s.bl_tree[curlen * 2] += count;
      } else if (curlen !== 0) {
        if (curlen !== prevlen) { s.bl_tree[curlen * 2]++; }
        s.bl_tree[REP_3_6 * 2]++;
      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2]++;
      } else {
        s.bl_tree[REPZ_11_138 * 2]++;
      }
      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };
  const send_tree = (s, tree, max_code) =>
  {
    let n;
    let prevlen = -1;
    let curlen;
    let nextlen = tree[0 * 2 + 1];
    let count = 0;
    let max_count = 7;
    let min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1];
      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);
      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);
      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }
      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };
  const build_bl_tree = (s) => {
    let max_blindex;
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    build_tree(s, s.bl_desc);
    for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
        break;
      }
    }
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    return max_blindex;
  };
  const send_all_trees = (s, lcodes, dcodes, blcodes) =>
  {
    let rank;
    send_bits(s, lcodes - 257, 5);
    send_bits(s, dcodes - 1,   5);
    send_bits(s, blcodes - 4,  4);
    for (rank = 0; rank < blcodes; rank++) {
      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
    }
    send_tree(s, s.dyn_ltree, lcodes - 1);
    send_tree(s, s.dyn_dtree, dcodes - 1);
  };
  const detect_data_type = (s) => {
    let black_mask = 0xf3ffc07f;
    let n;
    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if ((black_mask & 1) && (s.dyn_ltree[n * 2] !== 0)) {
        return Z_BINARY;
      }
    }
    if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 ||
        s.dyn_ltree[13 * 2] !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS$1; n++) {
      if (s.dyn_ltree[n * 2] !== 0) {
        return Z_TEXT;
      }
    }
    return Z_BINARY;
  };
  let static_init_done = false;
  const _tr_init$1 = (s) =>
  {
    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }
    s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    init_block(s);
  };
  const _tr_stored_block$1 = (s, buf, stored_len, last) =>
  {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
    copy_block(s, buf, stored_len, true);
  };
  const _tr_align$1 = (s) => {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  };
  const _tr_flush_block$1 = (s, buf, stored_len, last) =>
  {
    let opt_lenb, static_lenb;
    let max_blindex = 0;
    if (s.level > 0) {
      if (s.strm.data_type === Z_UNKNOWN$1) {
        s.strm.data_type = detect_data_type(s);
      }
      build_tree(s, s.l_desc);
      build_tree(s, s.d_desc);
      max_blindex = build_bl_tree(s);
      opt_lenb = (s.opt_len + 3 + 7) >>> 3;
      static_lenb = (s.static_len + 3 + 7) >>> 3;
      if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
    } else {
      opt_lenb = static_lenb = stored_len + 5;
    }
    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
      _tr_stored_block$1(s, buf, stored_len, last);
    } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);
    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    init_block(s);
    if (last) {
      bi_windup(s);
    }
  };
  const _tr_tally$1 = (s, dist, lc) =>
  {
    s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
    s.last_lit++;
    if (dist === 0) {
      s.dyn_ltree[lc * 2]++;
    } else {
      s.matches++;
      dist--;
      s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
      s.dyn_dtree[d_code(dist) * 2]++;
    }
    return (s.last_lit === s.lit_bufsize - 1);
  };
  var _tr_init_1  = _tr_init$1;
  var _tr_stored_block_1 = _tr_stored_block$1;
  var _tr_flush_block_1  = _tr_flush_block$1;
  var _tr_tally_1 = _tr_tally$1;
  var _tr_align_1 = _tr_align$1;
  var trees = {
  	_tr_init: _tr_init_1,
  	_tr_stored_block: _tr_stored_block_1,
  	_tr_flush_block: _tr_flush_block_1,
  	_tr_tally: _tr_tally_1,
  	_tr_align: _tr_align_1
  };
  const adler32 = (adler, buf, len, pos) => {
    let s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;
    while (len !== 0) {
      n = len > 2000 ? 2000 : len;
      len -= n;
      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);
      s1 %= 65521;
      s2 %= 65521;
    }
    return (s1 | (s2 << 16)) |0;
  };
  var adler32_1 = adler32;
  const makeTable = () => {
    let c, table = [];
    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }
    return table;
  };
  const crcTable = new Uint32Array(makeTable());
  const crc32 = (crc, buf, len, pos) => {
    const t = crcTable;
    const end = pos + len;
    crc ^= -1;
    for (let i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }
    return (crc ^ (-1));
  };
  var crc32_1 = crc32;
  var messages = {
    2:      'need dictionary',
    1:      'stream end',
    0:      '',
    '-1':   'file error',
    '-2':   'stream error',
    '-3':   'data error',
    '-4':   'insufficient memory',
    '-5':   'buffer error',
    '-6':   'incompatible version'
  };
  var constants$2 = {
    Z_NO_FLUSH:         0,
    Z_PARTIAL_FLUSH:    1,
    Z_SYNC_FLUSH:       2,
    Z_FULL_FLUSH:       3,
    Z_FINISH:           4,
    Z_BLOCK:            5,
    Z_TREES:            6,
    Z_OK:               0,
    Z_STREAM_END:       1,
    Z_NEED_DICT:        2,
    Z_ERRNO:           -1,
    Z_STREAM_ERROR:    -2,
    Z_DATA_ERROR:      -3,
    Z_MEM_ERROR:       -4,
    Z_BUF_ERROR:       -5,
    Z_NO_COMPRESSION:         0,
    Z_BEST_SPEED:             1,
    Z_BEST_COMPRESSION:       9,
    Z_DEFAULT_COMPRESSION:   -1,
    Z_FILTERED:               1,
    Z_HUFFMAN_ONLY:           2,
    Z_RLE:                    3,
    Z_FIXED:                  4,
    Z_DEFAULT_STRATEGY:       0,
    Z_BINARY:                 0,
    Z_TEXT:                   1,
    Z_UNKNOWN:                2,
    Z_DEFLATED:               8
  };
  const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;
  const {
    Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
    Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
    Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
    Z_UNKNOWN,
    Z_DEFLATED: Z_DEFLATED$2
  } = constants$2;
  const MAX_MEM_LEVEL = 9;
  const MAX_WBITS$1 = 15;
  const DEF_MEM_LEVEL = 8;
  const LENGTH_CODES  = 29;
  const LITERALS      = 256;
  const L_CODES       = LITERALS + 1 + LENGTH_CODES;
  const D_CODES       = 30;
  const BL_CODES      = 19;
  const HEAP_SIZE     = 2 * L_CODES + 1;
  const MAX_BITS  = 15;
  const MIN_MATCH = 3;
  const MAX_MATCH = 258;
  const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);
  const PRESET_DICT = 0x20;
  const INIT_STATE = 42;
  const EXTRA_STATE = 69;
  const NAME_STATE = 73;
  const COMMENT_STATE = 91;
  const HCRC_STATE = 103;
  const BUSY_STATE = 113;
  const FINISH_STATE = 666;
  const BS_NEED_MORE      = 1;
  const BS_BLOCK_DONE     = 2;
  const BS_FINISH_STARTED = 3;
  const BS_FINISH_DONE    = 4;
  const OS_CODE = 0x03;
  const err = (strm, errorCode) => {
    strm.msg = messages[errorCode];
    return errorCode;
  };
  const rank = (f) => {
    return ((f) << 1) - ((f) > 4 ? 9 : 0);
  };
  const zero = (buf) => {
    let len = buf.length; while (--len >= 0) { buf[len] = 0; }
  };
  let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
  let HASH = HASH_ZLIB;
  const flush_pending = (strm) => {
    const s = strm.state;
    let len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) { return; }
    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  };
  const flush_block_only = (s, last) => {
    _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  };
  const put_byte = (s, b) => {
    s.pending_buf[s.pending++] = b;
  };
  const putShortMSB = (s, b) => {
    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  };
  const read_buf = (strm, buf, start, size) => {
    let len = strm.avail_in;
    if (len > size) { len = size; }
    if (len === 0) { return 0; }
    strm.avail_in -= len;
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32_1(strm.adler, buf, len, start);
    }
    else if (strm.state.wrap === 2) {
      strm.adler = crc32_1(strm.adler, buf, len, start);
    }
    strm.next_in += len;
    strm.total_in += len;
    return len;
  };
  const longest_match = (s, cur_match) => {
    let chain_length = s.max_chain_length;
    let scan = s.strstart;
    let match;
    let len;
    let best_len = s.prev_length;
    let nice_match = s.nice_match;
    const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
    const _win = s.window;
    const wmask = s.w_mask;
    const prev  = s.prev;
    const strend = s.strstart + MAX_MATCH;
    let scan_end1  = _win[scan + best_len - 1];
    let scan_end   = _win[scan + best_len];
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    if (nice_match > s.lookahead) { nice_match = s.lookahead; }
    do {
      match = cur_match;
      if (_win[match + best_len]     !== scan_end  ||
          _win[match + best_len - 1] !== scan_end1 ||
          _win[match]                !== _win[scan] ||
          _win[++match]              !== _win[scan + 1]) {
        continue;
      }
      scan += 2;
      match++;
      do {
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               scan < strend);
      len = MAX_MATCH - (strend - scan);
      scan = strend - MAX_MATCH;
      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1  = _win[scan + best_len - 1];
        scan_end   = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  };
  const fill_window = (s) => {
    const _w_size = s.w_size;
    let p, n, m, more, str;
    do {
      more = s.window_size - s.lookahead - s.strstart;
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
        s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        s.block_start -= _w_size;
        n = s.hash_size;
        p = n;
        do {
          m = s.head[--p];
          s.head[p] = (m >= _w_size ? m - _w_size : 0);
        } while (--n);
        n = _w_size;
        p = n;
        do {
          m = s.prev[--p];
          s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        } while (--n);
        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;
      if (s.lookahead + s.insert >= MIN_MATCH) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];
        s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
        while (s.insert) {
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH) {
            break;
          }
        }
      }
    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
  };
  const deflate_stored = (s, flush) => {
    let max_block_size = 0xffff;
    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }
    for (;;) {
      if (s.lookahead <= 1) {
        fill_window(s);
        if (s.lookahead === 0 && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      s.strstart += s.lookahead;
      s.lookahead = 0;
      const max_start = s.block_start + max_block_size;
      if (s.strstart === 0 || s.strstart >= max_start) {
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.strstart > s.block_start) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_NEED_MORE;
  };
  const deflate_fast = (s, flush) => {
    let hash_head;
    let bflush;
    for (;;) {
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      hash_head = 0;
      if (s.lookahead >= MIN_MATCH) {
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
      }
      if (hash_head !== 0 && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
        s.match_length = longest_match(s, hash_head);
      }
      if (s.match_length >= MIN_MATCH) {
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
        s.lookahead -= s.match_length;
        if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
          s.match_length--;
          do {
            s.strstart++;
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
          } while (--s.match_length !== 0);
          s.strstart++;
        } else
        {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
        }
      } else {
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  const deflate_slow = (s, flush) => {
    let hash_head;
    let bflush;
    let max_insert;
    for (;;) {
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; }
      }
      hash_head = 0;
      if (s.lookahead >= MIN_MATCH) {
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
      }
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH - 1;
      if (hash_head !== 0 && s.prev_length < s.max_lazy_match &&
          s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)) {
        s.match_length = longest_match(s, hash_head);
        if (s.match_length <= 5 &&
           (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096))) {
          s.match_length = MIN_MATCH - 1;
        }
      }
      if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH;
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH - 1;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      } else if (s.match_available) {
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
        if (bflush) {
          flush_block_only(s, false);
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    if (s.match_available) {
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  const deflate_rle = (s, flush) => {
    let bflush;
    let prev;
    let scan, strend;
    const _win = s.window;
    for (;;) {
      if (s.lookahead <= MAX_MATCH) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; }
      }
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH;
          do {
          } while (prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   scan < strend);
          s.match_length = MAX_MATCH - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
      }
      if (s.match_length >= MIN_MATCH) {
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  const deflate_huff = (s, flush) => {
    let bflush;
    for (;;) {
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          break;
        }
      }
      s.match_length = 0;
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }
  const configuration_table = [
    new Config(0, 0, 0, 0, deflate_stored),
    new Config(4, 4, 8, 4, deflate_fast),
    new Config(4, 5, 16, 8, deflate_fast),
    new Config(4, 6, 32, 32, deflate_fast),
    new Config(4, 4, 16, 16, deflate_slow),
    new Config(8, 16, 32, 32, deflate_slow),
    new Config(8, 16, 128, 128, deflate_slow),
    new Config(8, 32, 128, 256, deflate_slow),
    new Config(32, 128, 258, 1024, deflate_slow),
    new Config(32, 258, 258, 4096, deflate_slow)
  ];
  const lm_init = (s) => {
    s.window_size = 2 * s.w_size;
    zero(s.head);
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
  };
  function DeflateState() {
    this.strm = null;
    this.status = 0;
    this.pending_buf = null;
    this.pending_buf_size = 0;
    this.pending_out = 0;
    this.pending = 0;
    this.wrap = 0;
    this.gzhead = null;
    this.gzindex = 0;
    this.method = Z_DEFLATED$2;
    this.last_flush = -1;
    this.w_size = 0;
    this.w_bits = 0;
    this.w_mask = 0;
    this.window = null;
    this.window_size = 0;
    this.prev = null;
    this.head = null;
    this.ins_h = 0;
    this.hash_size = 0;
    this.hash_bits = 0;
    this.hash_mask = 0;
    this.hash_shift = 0;
    this.block_start = 0;
    this.match_length = 0;
    this.prev_match = 0;
    this.match_available = 0;
    this.strstart = 0;
    this.match_start = 0;
    this.lookahead = 0;
    this.prev_length = 0;
    this.max_chain_length = 0;
    this.max_lazy_match = 0;
    this.level = 0;
    this.strategy = 0;
    this.good_match = 0;
    this.nice_match = 0;
    this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
    this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
    this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);
    this.l_desc   = null;
    this.d_desc   = null;
    this.bl_desc  = null;
    this.bl_count = new Uint16Array(MAX_BITS + 1);
    this.heap = new Uint16Array(2 * L_CODES + 1);
    zero(this.heap);
    this.heap_len = 0;
    this.heap_max = 0;
    this.depth = new Uint16Array(2 * L_CODES + 1);
    zero(this.depth);
    this.l_buf = 0;
    this.lit_bufsize = 0;
    this.last_lit = 0;
    this.d_buf = 0;
    this.opt_len = 0;
    this.static_len = 0;
    this.matches = 0;
    this.insert = 0;
    this.bi_buf = 0;
    this.bi_valid = 0;
  }
  const deflateResetKeep = (strm) => {
    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR$2);
    }
    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN;
    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;
    if (s.wrap < 0) {
      s.wrap = -s.wrap;
    }
    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
    strm.adler = (s.wrap === 2) ?
      0
    :
      1;
    s.last_flush = Z_NO_FLUSH$2;
    _tr_init(s);
    return Z_OK$3;
  };
  const deflateReset = (strm) => {
    const ret = deflateResetKeep(strm);
    if (ret === Z_OK$3) {
      lm_init(strm.state);
    }
    return ret;
  };
  const deflateSetHeader = (strm, head) => {
    if (!strm || !strm.state) { return Z_STREAM_ERROR$2; }
    if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$2; }
    strm.state.gzhead = head;
    return Z_OK$3;
  };
  const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
    if (!strm) {
      return Z_STREAM_ERROR$2;
    }
    let wrap = 1;
    if (level === Z_DEFAULT_COMPRESSION$1) {
      level = 6;
    }
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else if (windowBits > 15) {
      wrap = 2;
      windowBits -= 16;
    }
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
      windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
      strategy < 0 || strategy > Z_FIXED) {
      return err(strm, Z_STREAM_ERROR$2);
    }
    if (windowBits === 8) {
      windowBits = 9;
    }
    const s = new DeflateState();
    strm.state = s;
    s.strm = strm;
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);
    s.lit_bufsize = 1 << (memLevel + 6);
    s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Uint8Array(s.pending_buf_size);
    s.d_buf = 1 * s.lit_bufsize;
    s.l_buf = (1 + 2) * s.lit_bufsize;
    s.level = level;
    s.strategy = strategy;
    s.method = method;
    return deflateReset(strm);
  };
  const deflateInit = (strm, level) => {
    return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
  };
  const deflate$2 = (strm, flush) => {
    let beg, val;
    if (!strm || !strm.state ||
      flush > Z_BLOCK$1 || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
    }
    const s = strm.state;
    if (!strm.output ||
        (!strm.input && strm.avail_in !== 0) ||
        (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
      return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
    }
    s.strm = strm;
    const old_flush = s.last_flush;
    s.last_flush = flush;
    if (s.status === INIT_STATE) {
      if (s.wrap === 2) {
        strm.adler = 0;
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) {
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        }
        else {
          put_byte(s, (s.gzhead.text ? 1 : 0) +
                      (s.gzhead.hcrc ? 2 : 0) +
                      (!s.gzhead.extra ? 0 : 4) +
                      (!s.gzhead.name ? 0 : 8) +
                      (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, (s.gzhead.time >> 8) & 0xff);
          put_byte(s, (s.gzhead.time >> 16) & 0xff);
          put_byte(s, (s.gzhead.time >> 24) & 0xff);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, s.gzhead.os & 0xff);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      }
      else
      {
        let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
        let level_flags = -1;
        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= (level_flags << 6);
        if (s.strstart !== 0) { header |= PRESET_DICT; }
        header += 31 - (header % 31);
        s.status = BUSY_STATE;
        putShortMSB(s, header);
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1;
      }
    }
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra) {
        beg = s.pending;
        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      }
      else {
        s.status = NAME_STATE;
      }
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name) {
        beg = s.pending;
        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      }
      else {
        s.status = COMMENT_STATE;
      }
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment) {
        beg = s.pending;
        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      }
      else {
        s.status = HCRC_STATE;
      }
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, (strm.adler >> 8) & 0xff);
          strm.adler = 0;
          s.status = BUSY_STATE;
        }
      }
      else {
        s.status = BUSY_STATE;
      }
    }
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
      flush !== Z_FINISH$3) {
      return err(strm, Z_BUF_ERROR$1);
    }
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR$1);
    }
    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
      (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
      let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
        (s.strategy === Z_RLE ? deflate_rle(s, flush) :
          configuration_table[s.level].func(s, flush));
      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
        }
        return Z_OK$3;
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        }
        else if (flush !== Z_BLOCK$1) {
          _tr_stored_block(s, 0, 0, false);
          if (flush === Z_FULL_FLUSH$1) {
            zero(s.head);
            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
    }
    if (flush !== Z_FINISH$3) { return Z_OK$3; }
    if (s.wrap <= 0) { return Z_STREAM_END$3; }
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      put_byte(s, (strm.adler >> 16) & 0xff);
      put_byte(s, (strm.adler >> 24) & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, (strm.total_in >> 8) & 0xff);
      put_byte(s, (strm.total_in >> 16) & 0xff);
      put_byte(s, (strm.total_in >> 24) & 0xff);
    }
    else
    {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    flush_pending(strm);
    if (s.wrap > 0) { s.wrap = -s.wrap; }
    return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
  };
  const deflateEnd = (strm) => {
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$2;
    }
    const status = strm.state.status;
    if (status !== INIT_STATE &&
      status !== EXTRA_STATE &&
      status !== NAME_STATE &&
      status !== COMMENT_STATE &&
      status !== HCRC_STATE &&
      status !== BUSY_STATE &&
      status !== FINISH_STATE
    ) {
      return err(strm, Z_STREAM_ERROR$2);
    }
    strm.state = null;
    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
  };
  const deflateSetDictionary = (strm, dictionary) => {
    let dictLength = dictionary.length;
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$2;
    }
    const s = strm.state;
    const wrap = s.wrap;
    if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
      return Z_STREAM_ERROR$2;
    }
    if (wrap === 1) {
      strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
    }
    s.wrap = 0;
    if (dictLength >= s.w_size) {
      if (wrap === 0) {
        zero(s.head);
        s.strstart = 0;
        s.block_start = 0;
        s.insert = 0;
      }
      let tmpDict = new Uint8Array(s.w_size);
      tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
      dictionary = tmpDict;
      dictLength = s.w_size;
    }
    const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    fill_window(s);
    while (s.lookahead >= MIN_MATCH) {
      let str = s.strstart;
      let n = s.lookahead - (MIN_MATCH - 1);
      do {
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
      } while (--n);
      s.strstart = str;
      s.lookahead = MIN_MATCH - 1;
      fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return Z_OK$3;
  };
  var deflateInit_1 = deflateInit;
  var deflateInit2_1 = deflateInit2;
  var deflateReset_1 = deflateReset;
  var deflateResetKeep_1 = deflateResetKeep;
  var deflateSetHeader_1 = deflateSetHeader;
  var deflate_2$1 = deflate$2;
  var deflateEnd_1 = deflateEnd;
  var deflateSetDictionary_1 = deflateSetDictionary;
  var deflateInfo = 'pako deflate (from Nodeca project)';
  var deflate_1$2 = {
  	deflateInit: deflateInit_1,
  	deflateInit2: deflateInit2_1,
  	deflateReset: deflateReset_1,
  	deflateResetKeep: deflateResetKeep_1,
  	deflateSetHeader: deflateSetHeader_1,
  	deflate: deflate_2$1,
  	deflateEnd: deflateEnd_1,
  	deflateSetDictionary: deflateSetDictionary_1,
  	deflateInfo: deflateInfo
  };
  const _has = (obj, key) => {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };
  var assign = function (obj ) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      const source = sources.shift();
      if (!source) { continue; }
      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }
      for (const p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }
    return obj;
  };
  var flattenChunks = (chunks) => {
    let len = 0;
    for (let i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }
    const result = new Uint8Array(len);
    for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
      let chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }
    return result;
  };
  var common = {
  	assign: assign,
  	flattenChunks: flattenChunks
  };
  let STR_APPLY_UIA_OK = true;
  try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }
  const _utf8len = new Uint8Array(256);
  for (let q = 0; q < 256; q++) {
    _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
  }
  _utf8len[254] = _utf8len[254] = 1;
  var string2buf = (str) => {
    if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
      return new TextEncoder().encode(str);
    }
    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    for (m_pos = 0; m_pos < str_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }
    buf = new Uint8Array(buf_len);
    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      if (c < 0x80) {
        buf[i++] = c;
      } else if (c < 0x800) {
        buf[i++] = 0xC0 | (c >>> 6);
        buf[i++] = 0x80 | (c & 0x3f);
      } else if (c < 0x10000) {
        buf[i++] = 0xE0 | (c >>> 12);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      } else {
        buf[i++] = 0xf0 | (c >>> 18);
        buf[i++] = 0x80 | (c >>> 12 & 0x3f);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      }
    }
    return buf;
  };
  const buf2binstring = (buf, len) => {
    if (len < 65534) {
      if (buf.subarray && STR_APPLY_UIA_OK) {
        return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
      }
    }
    let result = '';
    for (let i = 0; i < len; i++) {
      result += String.fromCharCode(buf[i]);
    }
    return result;
  };
  var buf2string = (buf, max) => {
    const len = max || buf.length;
    if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
      return new TextDecoder().decode(buf.subarray(0, max));
    }
    let i, out;
    const utf16buf = new Array(len * 2);
    for (out = 0, i = 0; i < len;) {
      let c = buf[i++];
      if (c < 0x80) { utf16buf[out++] = c; continue; }
      let c_len = _utf8len[c];
      if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }
      c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
      while (c_len > 1 && i < len) {
        c = (c << 6) | (buf[i++] & 0x3f);
        c_len--;
      }
      if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
      if (c < 0x10000) {
        utf16buf[out++] = c;
      } else {
        c -= 0x10000;
        utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
        utf16buf[out++] = 0xdc00 | (c & 0x3ff);
      }
    }
    return buf2binstring(utf16buf, out);
  };
  var utf8border = (buf, max) => {
    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }
    let pos = max - 1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
    if (pos < 0) { return max; }
    if (pos === 0) { return max; }
    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
  };
  var strings = {
  	string2buf: string2buf,
  	buf2string: buf2string,
  	utf8border: utf8border
  };
  function ZStream() {
    this.input = null;
    this.next_in = 0;
    this.avail_in = 0;
    this.total_in = 0;
    this.output = null;
    this.next_out = 0;
    this.avail_out = 0;
    this.total_out = 0;
    this.msg = '';
    this.state = null;
    this.data_type = 2;
    this.adler = 0;
  }
  var zstream = ZStream;
  const toString$1 = Object.prototype.toString;
  const {
    Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
    Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
    Z_DEFAULT_COMPRESSION,
    Z_DEFAULT_STRATEGY,
    Z_DEFLATED: Z_DEFLATED$1
  } = constants$2;
  function Deflate$1(options) {
    this.options = common.assign({
      level: Z_DEFAULT_COMPRESSION,
      method: Z_DEFLATED$1,
      chunkSize: 16384,
      windowBits: 15,
      memLevel: 8,
      strategy: Z_DEFAULT_STRATEGY
    }, options || {});
    let opt = this.options;
    if (opt.raw && (opt.windowBits > 0)) {
      opt.windowBits = -opt.windowBits;
    }
    else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
      opt.windowBits += 16;
    }
    this.err    = 0;
    this.msg    = '';
    this.ended  = false;
    this.chunks = [];
    this.strm = new zstream();
    this.strm.avail_out = 0;
    let status = deflate_1$2.deflateInit2(
      this.strm,
      opt.level,
      opt.method,
      opt.windowBits,
      opt.memLevel,
      opt.strategy
    );
    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }
    if (opt.header) {
      deflate_1$2.deflateSetHeader(this.strm, opt.header);
    }
    if (opt.dictionary) {
      let dict;
      if (typeof opt.dictionary === 'string') {
        dict = strings.string2buf(opt.dictionary);
      } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(opt.dictionary);
      } else {
        dict = opt.dictionary;
      }
      status = deflate_1$2.deflateSetDictionary(this.strm, dict);
      if (status !== Z_OK$2) {
        throw new Error(messages[status]);
      }
      this._dict_set = true;
    }
  }
  Deflate$1.prototype.push = function (data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;
    if (this.ended) { return false; }
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;
    if (typeof data === 'string') {
      strm.input = strings.string2buf(data);
    } else if (toString$1.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for (;;) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }
      if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }
      status = deflate_1$2.deflate(strm, _flush_mode);
      if (status === Z_STREAM_END$2) {
        if (strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
        }
        status = deflate_1$2.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK$2;
      }
      if (strm.avail_out === 0) {
        this.onData(strm.output);
        continue;
      }
      if (_flush_mode > 0 && strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }
      if (strm.avail_in === 0) break;
    }
    return true;
  };
  Deflate$1.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };
  Deflate$1.prototype.onEnd = function (status) {
    if (status === Z_OK$2) {
      this.result = common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };
  function deflate$1(input, options) {
    const deflator = new Deflate$1(options);
    deflator.push(input, true);
    if (deflator.err) { throw deflator.msg || messages[deflator.err]; }
    return deflator.result;
  }
  function deflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return deflate$1(input, options);
  }
  function gzip$1(input, options) {
    options = options || {};
    options.gzip = true;
    return deflate$1(input, options);
  }
  var Deflate_1$1 = Deflate$1;
  var deflate_2 = deflate$1;
  var deflateRaw_1$1 = deflateRaw$1;
  var gzip_1$1 = gzip$1;
  var constants$1 = constants$2;
  var deflate_1$1 = {
  	Deflate: Deflate_1$1,
  	deflate: deflate_2,
  	deflateRaw: deflateRaw_1$1,
  	gzip: gzip_1$1,
  	constants: constants$1
  };
  const BAD$1 = 30;
  const TYPE$1 = 12;
  var inffast = function inflate_fast(strm, start) {
    let _in;
    let last;
    let _out;
    let beg;
    let end;
    let dmax;
    let wsize;
    let whave;
    let wnext;
    let s_window;
    let hold;
    let bits;
    let lcode;
    let dcode;
    let lmask;
    let dmask;
    let here;
    let op;
    let len;
    let dist;
    let from;
    let from_source;
    let input, output;
    const state = strm.state;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
    dmax = state.dmax;
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
      for (;;) {
        op = here >>> 24;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff;
        if (op === 0) {
          output[_out++] = here & 0xffff;
        }
        else if (op & 16) {
          len = here & 0xffff;
          op &= 15;
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];
          dodist:
          for (;;) {
            op = here >>> 24;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff;
            if (op & 16) {
              dist = here & 0xffff;
              op &= 15;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break top;
              }
              hold >>>= op;
              bits -= op;
              op = _out - beg;
              if (dist > op) {
                op = dist - op;
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD$1;
                    break top;
                  }
                }
                from = 0;
                from_source = s_window;
                if (wnext === 0) {
                  from += wsize - op;
                  if (op < len) {
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;
                    from_source = output;
                  }
                }
                else if (wnext < op) {
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;
                      from_source = output;
                    }
                  }
                }
                else {
                  from += wnext - op;
                  if (op < len) {
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;
                do {
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {
              here = dcode[(here & 0xffff) + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD$1;
              break top;
            }
            break;
          }
        }
        else if ((op & 64) === 0) {
          here = lcode[(here & 0xffff) + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {
          state.mode = TYPE$1;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break top;
        }
        break;
      }
    } while (_in < last && _out < end);
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  };
  const MAXBITS = 15;
  const ENOUGH_LENS$1 = 852;
  const ENOUGH_DISTS$1 = 592;
  const CODES$1 = 0;
  const LENS$1 = 1;
  const DISTS$1 = 2;
  const lbase = new Uint16Array([
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ]);
  const lext = new Uint8Array([
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ]);
  const dbase = new Uint16Array([
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ]);
  const dext = new Uint8Array([
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ]);
  const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
  {
    const bits = opts.bits;
    let len = 0;
    let sym = 0;
    let min = 0, max = 0;
    let root = 0;
    let curr = 0;
    let drop = 0;
    let left = 0;
    let used = 0;
    let huff = 0;
    let incr;
    let fill;
    let low;
    let mask;
    let next;
    let base = null;
    let base_index = 0;
    let end;
    const count = new Uint16Array(MAXBITS + 1);
    const offs = new Uint16Array(MAXBITS + 1);
    let extra = null;
    let extra_index = 0;
    let here_bits, here_op, here_val;
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) { break; }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {
      table[table_index++] = (1 << 24) | (64 << 16) | 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;
      opts.bits = 1;
      return 0;
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) { break; }
    }
    if (root < min) {
      root = min;
    }
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1;
    }
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }
    if (type === CODES$1) {
      base = extra = work;
      end = 19;
    } else if (type === LENS$1) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;
    } else {
      base = dbase;
      extra = dext;
      end = -1;
    }
    huff = 0;
    sym = 0;
    len = min;
    next = table_index;
    curr = root;
    drop = 0;
    low = -1;
    used = 1 << root;
    mask = used - 1;
    if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
      (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
      return 1;
    }
    for (;;) {
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      }
      else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      }
      else {
        here_op = 32 + 64;
        here_val = 0;
      }
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill;
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
      } while (fill !== 0);
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }
      sym++;
      if (--count[len] === 0) {
        if (len === max) { break; }
        len = lens[lens_index + work[sym]];
      }
      if (len > root && (huff & mask) !== low) {
        if (drop === 0) {
          drop = root;
        }
        next += min;
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) { break; }
          curr++;
          left <<= 1;
        }
        used += 1 << curr;
        if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
          (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
          return 1;
        }
        low = huff & mask;
        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
      }
    }
    if (huff !== 0) {
      table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
    }
    opts.bits = root;
    return 0;
  };
  var inftrees = inflate_table;
  const CODES = 0;
  const LENS = 1;
  const DISTS = 2;
  const {
    Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
    Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
    Z_DEFLATED
  } = constants$2;
  const    HEAD = 1;
  const    FLAGS = 2;
  const    TIME = 3;
  const    OS = 4;
  const    EXLEN = 5;
  const    EXTRA = 6;
  const    NAME = 7;
  const    COMMENT = 8;
  const    HCRC = 9;
  const    DICTID = 10;
  const    DICT = 11;
  const        TYPE = 12;
  const        TYPEDO = 13;
  const        STORED = 14;
  const        COPY_ = 15;
  const        COPY = 16;
  const        TABLE = 17;
  const        LENLENS = 18;
  const        CODELENS = 19;
  const            LEN_ = 20;
  const            LEN = 21;
  const            LENEXT = 22;
  const            DIST = 23;
  const            DISTEXT = 24;
  const            MATCH = 25;
  const            LIT = 26;
  const    CHECK = 27;
  const    LENGTH = 28;
  const    DONE = 29;
  const    BAD = 30;
  const    MEM = 31;
  const    SYNC = 32;
  const ENOUGH_LENS = 852;
  const ENOUGH_DISTS = 592;
  const MAX_WBITS = 15;
  const DEF_WBITS = MAX_WBITS;
  const zswap32 = (q) => {
    return  (((q >>> 24) & 0xff) +
            ((q >>> 8) & 0xff00) +
            ((q & 0xff00) << 8) +
            ((q & 0xff) << 24));
  };
  function InflateState() {
    this.mode = 0;
    this.last = false;
    this.wrap = 0;
    this.havedict = false;
    this.flags = 0;
    this.dmax = 0;
    this.check = 0;
    this.total = 0;
    this.head = null;
    this.wbits = 0;
    this.wsize = 0;
    this.whave = 0;
    this.wnext = 0;
    this.window = null;
    this.hold = 0;
    this.bits = 0;
    this.length = 0;
    this.offset = 0;
    this.extra = 0;
    this.lencode = null;
    this.distcode = null;
    this.lenbits = 0;
    this.distbits = 0;
    this.ncode = 0;
    this.nlen = 0;
    this.ndist = 0;
    this.have = 0;
    this.next = null;
    this.lens = new Uint16Array(320);
    this.work = new Uint16Array(288);
    this.lendyn = null;
    this.distdyn = null;
    this.sane = 0;
    this.back = 0;
    this.was = 0;
  }
  const inflateResetKeep = (strm) => {
    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = '';
    if (state.wrap) {
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null;
    state.hold = 0;
    state.bits = 0;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
    state.sane = 1;
    state.back = -1;
    return Z_OK$1;
  };
  const inflateReset = (strm) => {
    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);
  };
  const inflateReset2 = (strm, windowBits) => {
    let wrap;
    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  };
  const inflateInit2 = (strm, windowBits) => {
    if (!strm) { return Z_STREAM_ERROR$1; }
    const state = new InflateState();
    strm.state = state;
    state.window = null;
    const ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) {
      strm.state = null;
    }
    return ret;
  };
  const inflateInit = (strm) => {
    return inflateInit2(strm, DEF_WBITS);
  };
  let virgin = true;
  let lenfix, distfix;
  const fixedtables = (state) => {
    if (virgin) {
      lenfix = new Int32Array(512);
      distfix = new Int32Array(32);
      let sym = 0;
      while (sym < 144) { state.lens[sym++] = 8; }
      while (sym < 256) { state.lens[sym++] = 9; }
      while (sym < 280) { state.lens[sym++] = 7; }
      while (sym < 288) { state.lens[sym++] = 8; }
      inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
      sym = 0;
      while (sym < 32) { state.lens[sym++] = 5; }
      inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
      virgin = false;
    }
    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  };
  const updatewindow = (strm, src, end, copy) => {
    let dist;
    const state = strm.state;
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;
      state.window = new Uint8Array(state.wsize);
    }
    if (copy >= state.wsize) {
      state.window.set(src.subarray(end - state.wsize, end), 0);
      state.wnext = 0;
      state.whave = state.wsize;
    }
    else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
      copy -= dist;
      if (copy) {
        state.window.set(src.subarray(end - copy, end), 0);
        state.wnext = copy;
        state.whave = state.wsize;
      }
      else {
        state.wnext += dist;
        if (state.wnext === state.wsize) { state.wnext = 0; }
        if (state.whave < state.wsize) { state.whave += dist; }
      }
    }
    return 0;
  };
  const inflate$2 = (strm, flush) => {
    let state;
    let input, output;
    let next;
    let put;
    let have, left;
    let hold;
    let bits;
    let _in, _out;
    let copy;
    let from;
    let from_source;
    let here = 0;
    let here_bits, here_op, here_val;
    let last_bits, last_op, last_val;
    let len;
    let ret;
    const hbuf = new Uint8Array(4);
    let opts;
    let n;
    const order =
      new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);
    if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    if (state.mode === TYPE) { state.mode = TYPEDO; }
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    _in = have;
    _out = left;
    ret = Z_OK$1;
    inf_leave:
    for (;;) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((state.wrap & 2) && hold === 0x8b1f) {
            state.check = 0;
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state.mode = FLAGS;
            break;
          }
          state.flags = 0;
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) ||
            (((hold & 0xff) << 8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD;
            break;
          }
          if ((hold & 0x0f) !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 0x0f) + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          else if (len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD;
            break;
          }
          state.dmax = 1 << state.wbits;
          strm.adler = state.check = 1;
          state.mode = hold & 0x200 ? DICTID : TYPE;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.flags = hold;
          if ((state.flags & 0xff) !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = ((hold >> 8) & 1);
          }
          if (state.flags & 0x0200) {
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = TIME;
        case TIME:
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 0x0200) {
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            hbuf[2] = (hold >>> 16) & 0xff;
            hbuf[3] = (hold >>> 24) & 0xff;
            state.check = crc32_1(state.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = OS;
        case OS:
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.xflags = (hold & 0xff);
            state.head.os = (hold >> 8);
          }
          if (state.flags & 0x0200) {
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = EXLEN;
        case EXLEN:
          if (state.flags & 0x0400) {
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 0x0200) {
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          }
          else if (state.head) {
            state.head.extra = null;
          }
          state.mode = EXTRA;
        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;
            if (copy > have) { copy = have; }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(
                  input.subarray(
                    next,
                    next + copy
                  ),
                  len
                );
              }
              if (state.flags & 0x0200) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) { break inf_leave; }
          }
          state.length = 0;
          state.mode = NAME;
        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len &&
                  (state.length < 65536 )) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len &&
                  (state.length < 65536 )) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
        case HCRC:
          if (state.flags & 0x0200) {
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state.head) {
            state.head.hcrc = ((state.flags >> 9) & 1);
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state.mode = DICT;
        case DICT:
          if (state.havedict === 0) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1;
          state.mode = TYPE;
        case TYPE:
          if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        case TYPEDO:
          if (state.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.last = (hold & 0x01);
          hold >>>= 1;
          bits -= 1;
          switch ((hold & 0x03)) {
            case 0:
              state.mode = STORED;
              break;
            case 1:
              fixedtables(state);
              state.mode = LEN_;
              if (flush === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = 'invalid block type';
              state.mode = BAD;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD;
            break;
          }
          state.length = hold & 0xffff;
          hold = 0;
          bits = 0;
          state.mode = COPY_;
          if (flush === Z_TREES) { break inf_leave; }
        case COPY_:
          state.mode = COPY;
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) { copy = have; }
            if (copy > left) { copy = left; }
            if (copy === 0) { break inf_leave; }
            output.set(input.subarray(next, next + copy), put);
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          state.mode = TYPE;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.nlen = (hold & 0x1f) + 257;
          hold >>>= 5;
          bits -= 5;
          state.ndist = (hold & 0x1f) + 1;
          hold >>>= 5;
          bits -= 5;
          state.ncode = (hold & 0x0f) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = LENLENS;
        case LENLENS:
          while (state.have < state.ncode) {
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.lens[order[state.have++]] = (hold & 0x07);
            hold >>>= 3;
            bits -= 3;
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = { bits: state.lenbits };
          ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = CODELENS;
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;
              if ((here_bits) <= bits) { break; }
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state.lens[state.have++] = here_val;
            }
            else {
              if (here_val === 16) {
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03);
                hold >>>= 2;
                bits -= 2;
              }
              else if (here_val === 17) {
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 3 + (hold & 0x07);
                hold >>>= 3;
                bits -= 3;
              }
              else {
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 11 + (hold & 0x7f);
                hold >>>= 7;
                bits -= 7;
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }
          if (state.mode === BAD) { break; }
          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD;
            break;
          }
          state.lenbits = 9;
          opts = { bits: state.lenbits };
          ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD;
            break;
          }
          state.distbits = 6;
          state.distcode = state.distdyn;
          opts = { bits: state.distbits };
          ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          state.distbits = opts.bits;
          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD;
            break;
          }
          state.mode = LEN_;
          if (flush === Z_TREES) { break inf_leave; }
        case LEN_:
          state.mode = LEN;
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            inffast(strm, _out);
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if (here_bits <= bits) { break; }
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.lencode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) - 1)) >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;
              if ((last_bits + here_bits) <= bits) { break; }
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
        case LENEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length += hold & ((1 << state.extra) - 1);
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          state.was = state.length;
          state.mode = DIST;
        case DIST:
          for (;;) {
            here = state.distcode[hold & ((1 << state.distbits) - 1)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((here_bits) <= bits) { break; }
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.distcode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) - 1)) >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;
              if ((last_bits + here_bits) <= bits) { break; }
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = (here_op) & 15;
          state.mode = DISTEXT;
        case DISTEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.offset += hold & ((1 << state.extra) - 1);
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
          state.mode = MATCH;
        case MATCH:
          if (left === 0) { break inf_leave; }
          copy = _out - left;
          if (state.offset > copy) {
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              }
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            }
            else {
              from = state.wnext - copy;
            }
            if (copy > state.length) { copy = state.length; }
            from_source = state.window;
          }
          else {
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) { copy = left; }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) { state.mode = LEN; }
          break;
        case LIT:
          if (left === 0) { break inf_leave; }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check =
                  (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));
            }
            _out = left;
            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = LENGTH;
        case LENGTH:
          if (state.wrap && state.flags) {
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = DONE;
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR$1;
        case SYNC:
        default:
          return Z_STREAM_ERROR$1;
      }
    }
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                        (state.mode < CHECK || flush !== Z_FINISH$1))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check =
        (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
                      (state.mode === TYPE ? 128 : 0) +
                      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  };
  const inflateEnd = (strm) => {
    if (!strm || !strm.state ) {
      return Z_STREAM_ERROR$1;
    }
    let state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK$1;
  };
  const inflateGetHeader = (strm, head) => {
    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }
    state.head = head;
    head.done = false;
    return Z_OK$1;
  };
  const inflateSetDictionary = (strm, dictionary) => {
    const dictLength = dictionary.length;
    let state;
    let dictid;
    let ret;
    if (!strm  || !strm.state ) { return Z_STREAM_ERROR$1; }
    state = strm.state;
    if (state.wrap !== 0 && state.mode !== DICT) {
      return Z_STREAM_ERROR$1;
    }
    if (state.mode === DICT) {
      dictid = 1;
      dictid = adler32_1(dictid, dictionary, dictLength, 0);
      if (dictid !== state.check) {
        return Z_DATA_ERROR$1;
      }
    }
    ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
      state.mode = MEM;
      return Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    return Z_OK$1;
  };
  var inflateReset_1 = inflateReset;
  var inflateReset2_1 = inflateReset2;
  var inflateResetKeep_1 = inflateResetKeep;
  var inflateInit_1 = inflateInit;
  var inflateInit2_1 = inflateInit2;
  var inflate_2$1 = inflate$2;
  var inflateEnd_1 = inflateEnd;
  var inflateGetHeader_1 = inflateGetHeader;
  var inflateSetDictionary_1 = inflateSetDictionary;
  var inflateInfo = 'pako inflate (from Nodeca project)';
  var inflate_1$2 = {
  	inflateReset: inflateReset_1,
  	inflateReset2: inflateReset2_1,
  	inflateResetKeep: inflateResetKeep_1,
  	inflateInit: inflateInit_1,
  	inflateInit2: inflateInit2_1,
  	inflate: inflate_2$1,
  	inflateEnd: inflateEnd_1,
  	inflateGetHeader: inflateGetHeader_1,
  	inflateSetDictionary: inflateSetDictionary_1,
  	inflateInfo: inflateInfo
  };
  function GZheader() {
    this.text       = 0;
    this.time       = 0;
    this.xflags     = 0;
    this.os         = 0;
    this.extra      = null;
    this.extra_len  = 0;
    this.name       = '';
    this.comment    = '';
    this.hcrc       = 0;
    this.done       = false;
  }
  var gzheader = GZheader;
  const toString = Object.prototype.toString;
  const {
    Z_NO_FLUSH, Z_FINISH,
    Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
  } = constants$2;
  function Inflate$1(options) {
    this.options = common.assign({
      chunkSize: 1024 * 64,
      windowBits: 15,
      to: ''
    }, options || {});
    const opt = this.options;
    if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
      opt.windowBits = -opt.windowBits;
      if (opt.windowBits === 0) { opt.windowBits = -15; }
    }
    if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
        !(options && options.windowBits)) {
      opt.windowBits += 32;
    }
    if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
      if ((opt.windowBits & 15) === 0) {
        opt.windowBits |= 15;
      }
    }
    this.err    = 0;
    this.msg    = '';
    this.ended  = false;
    this.chunks = [];
    this.strm   = new zstream();
    this.strm.avail_out = 0;
    let status  = inflate_1$2.inflateInit2(
      this.strm,
      opt.windowBits
    );
    if (status !== Z_OK) {
      throw new Error(messages[status]);
    }
    this.header = new gzheader();
    inflate_1$2.inflateGetHeader(this.strm, this.header);
    if (opt.dictionary) {
      if (typeof opt.dictionary === 'string') {
        opt.dictionary = strings.string2buf(opt.dictionary);
      } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
        opt.dictionary = new Uint8Array(opt.dictionary);
      }
      if (opt.raw) {
        status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
        if (status !== Z_OK) {
          throw new Error(messages[status]);
        }
      }
    }
  }
  Inflate$1.prototype.push = function (data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
    if (toString.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for (;;) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }
      status = inflate_1$2.inflate(strm, _flush_mode);
      if (status === Z_NEED_DICT && dictionary) {
        status = inflate_1$2.inflateSetDictionary(strm, dictionary);
        if (status === Z_OK) {
          status = inflate_1$2.inflate(strm, _flush_mode);
        } else if (status === Z_DATA_ERROR) {
          status = Z_NEED_DICT;
        }
      }
      while (strm.avail_in > 0 &&
             status === Z_STREAM_END &&
             strm.state.wrap > 0 &&
             data[strm.next_in] !== 0)
      {
        inflate_1$2.inflateReset(strm);
        status = inflate_1$2.inflate(strm, _flush_mode);
      }
      switch (status) {
        case Z_STREAM_ERROR:
        case Z_DATA_ERROR:
        case Z_NEED_DICT:
        case Z_MEM_ERROR:
          this.onEnd(status);
          this.ended = true;
          return false;
      }
      last_avail_out = strm.avail_out;
      if (strm.next_out) {
        if (strm.avail_out === 0 || status === Z_STREAM_END) {
          if (this.options.to === 'string') {
            let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
            let tail = strm.next_out - next_out_utf8;
            let utf8str = strings.buf2string(strm.output, next_out_utf8);
            strm.next_out = tail;
            strm.avail_out = chunkSize - tail;
            if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
            this.onData(utf8str);
          } else {
            this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
          }
        }
      }
      if (status === Z_OK && last_avail_out === 0) continue;
      if (status === Z_STREAM_END) {
        status = inflate_1$2.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return true;
      }
      if (strm.avail_in === 0) break;
    }
    return true;
  };
  Inflate$1.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };
  Inflate$1.prototype.onEnd = function (status) {
    if (status === Z_OK) {
      if (this.options.to === 'string') {
        this.result = this.chunks.join('');
      } else {
        this.result = common.flattenChunks(this.chunks);
      }
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };
  function inflate$1(input, options) {
    const inflator = new Inflate$1(options);
    inflator.push(input);
    if (inflator.err) throw inflator.msg || messages[inflator.err];
    return inflator.result;
  }
  function inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return inflate$1(input, options);
  }
  var Inflate_1$1 = Inflate$1;
  var inflate_2 = inflate$1;
  var inflateRaw_1$1 = inflateRaw$1;
  var ungzip$1 = inflate$1;
  var constants = constants$2;
  var inflate_1$1 = {
  	Inflate: Inflate_1$1,
  	inflate: inflate_2,
  	inflateRaw: inflateRaw_1$1,
  	ungzip: ungzip$1,
  	constants: constants
  };
  const { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;
  const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
  var Deflate_1 = Deflate;
  var deflate_1 = deflate;
  var deflateRaw_1 = deflateRaw;
  var gzip_1 = gzip;
  var Inflate_1 = Inflate;
  var inflate_1 = inflate;
  var inflateRaw_1 = inflateRaw;
  var ungzip_1 = ungzip;
  var constants_1 = constants$2;
  var pako = {
  	Deflate: Deflate_1,
  	deflate: deflate_1,
  	deflateRaw: deflateRaw_1,
  	gzip: gzip_1,
  	Inflate: Inflate_1,
  	inflate: inflate_1,
  	inflateRaw: inflateRaw_1,
  	ungzip: ungzip_1,
  	constants: constants_1
  };

  function start(options) {
      options = options || {};
      return start$1(options, {
          base64DecodeAndZlibInflate: (input) => {
              return Promise.resolve(pako.inflate(trustedBase64Decode(input)));
          },
          performanceNow: () => {
              return performance.now();
          },
          getRandomValues: (buffer) => {
              const crypto = globalThis.crypto;
              if (!crypto)
                  throw new Error('randomness not available');
              crypto.getRandomValues(buffer);
          },
          connect: (config) => {
              return connect(config, (options === null || options === void 0 ? void 0 : options.forbidWs) || false, (options === null || options === void 0 ? void 0 : options.forbidNonLocalWs) || false, (options === null || options === void 0 ? void 0 : options.forbidWss) || false);
          }
      });
  }
  function trustedBase64Decode(base64) {
      const binaryString = atob(base64);
      const size = binaryString.length;
      const bytes = new Uint8Array(size);
      for (let i = 0; i < size; i++) {
          bytes[i] = binaryString.charCodeAt(i);
      }
      return bytes;
  }
  function connect(config, forbidWs, forbidNonLocalWs, forbidWss) {
      let connection;
      const wsParsed = config.address.match(/^\/(ip4|ip6|dns4|dns6|dns)\/(.*?)\/tcp\/(.*?)\/(ws|wss|tls\/ws)$/);
      if (wsParsed != null) {
          const proto = (wsParsed[4] == 'ws') ? 'ws' : 'wss';
          if ((proto == 'ws' && forbidWs) ||
              (proto == 'ws' && wsParsed[2] != 'localhost' && wsParsed[2] != '127.0.0.1' && forbidNonLocalWs) ||
              (proto == 'wss' && forbidWss)) {
              throw new ConnectionError('Connection type not allowed');
          }
          const url = (wsParsed[1] == 'ip6') ?
              (proto + "://[" + wsParsed[2] + "]:" + wsParsed[3]) :
              (proto + "://" + wsParsed[2] + ":" + wsParsed[3]);
          connection = new WebSocket(url);
          connection.binaryType = 'arraybuffer';
          connection.onopen = () => {
              config.onOpen({ type: 'single-stream' });
          };
          connection.onclose = (event) => {
              const message = "Error code " + event.code + (!!event.reason ? (": " + event.reason) : "");
              config.onConnectionClose(message);
          };
          connection.onmessage = (msg) => {
              config.onMessage(new Uint8Array(msg.data));
          };
      }
      else {
          throw new ConnectionError('Unrecognized multiaddr format');
      }
      return {
          close: () => {
              connection.onopen = null;
              connection.onclose = null;
              connection.onmessage = null;
              connection.onerror = null;
              connection.close();
          },
          send: (data) => {
              connection.send(data);
          },
          openOutSubstream: () => { throw new Error('Wrong connection type'); }
      };
  }

  const indexBrowser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    start: start,
    AddChainError: AddChainError,
    AlreadyDestroyedError: AlreadyDestroyedError,
    CrashError: CrashError,
    JsonRpcDisabledError: JsonRpcDisabledError
  });

  Object.defineProperty(exports, 'Keyring', {
    enumerable: true,
    get: function () { return keyring.Keyring; }
  });
  exports.ApiPromise = ApiPromise;
  exports.ApiRx = ApiRx;
  exports.HttpProvider = HttpProvider;
  exports.ScProvider = ScProvider;
  exports.SubmittableResult = SubmittableResult;
  exports.WsProvider = WsProvider;
  exports.packageInfo = packageInfo;
  exports.toPromiseMethod = toPromiseMethod;
  exports.toRxMethod = toRxMethod;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
